var origAttr = jQuery.fn.attr;
jQuery.fn.attr = function(a, b) {
    if (arguments.length != 2 || typeof a != "string" || b !== origAttr.call(this, a)) {
        return origAttr.apply(this, arguments)
    } else {
        return this
    }
};
crs = window.crs || {};
crs.core = crs.core || {};
crs.core = {tenantID: null,crsAPIUrl: null,isEditMode: false,crsDataSourceAPIUrl: null,autoDeleteDataSource: false,dataSourcePage: {dataSourceId: "",ftpUserName: null,$dataSourceNameInput: null,$solutionListDiv: null,$ftpContainer: null,$uploadFileDiv: null,$fileListDiv: null,$actionPopover: null,$validateSchemaDiv: null,$ftpSetupLayer: null,$dataSourcePageLayer: null,$pageInfo: null,$idLookupLayer: null,$waitContainerForDataSourcePage: null,$errorModal: null},viewStack: [],initLayers: function() {
        $(".layer").hide();
        crs.core.dataSourcePage.$dataSourcePageLayer.show()
    },showLayer: function(b, a) {
        if (a) {
            a.parents(".layer").hide();
            crs.core.viewStack.push(a.parents(".layer"))
        }
        b.show()
    },hideLayer: function(a) {
        a.parents(".layer").hide();
        (crs.core.viewStack.pop()).show()
    },autoGenerateAlphaNumericFrom: function(a, e) {
        var f = "";
        if (a) {
            var d = a.val().trim();
            for (var c = 0; 
            c < d.length; 
            c += 1) {
                var b = d.charCodeAt(c);
                if (e && f.length == 0 && ((b >= 48 && b <= 57) || b == 32)) {
                    continue
                }
                if ((b >= 97 && b <= 122) || (b >= 65 && b <= 90) || (b >= 48 && b <= 57)) {
                    f += d[c]
                } else {
                    if (b == 32) {
                        f += "_"
                    }
                }
            }
        }
        return f
    },showError: function(b) {
        var a = Granite.I18n.get("Unknown error encountered while performing the requested operation. Please contact your administrator, or leave us a feedback.", null, "CRS: ");
        if (b && b.type && b.type == "error") {
            a = b.content
        } else {
            if (b && (typeof b == "string")) {
                a = b
            }
        }
        //crs.core.dataSourcePage.$errorModal.modal({type: "error",header: Granite.I18n.get("Error", null, "CRS: "),content: a}).modal("show")
    },showInfoModal: function(a, c) {
        var b = Granite.I18n.get("Information", null, "CRS: ");
        if (a) {
            b = a
        }
        if (c) {
            $("#infoModal").find(".coral-Modal-body p").text(c);
            $("#infoModal").find(".coral-Modal-title").text(b);
            $("#infoModal").modal("show")
        }
    },initialize: function() {
        var b = location.pathname.substr(location.pathname.indexOf(".html") + 6);
        this.tenantID = b.substr(0, b.indexOf("/"));
        this.crsAPIUrl = "crs/datasources";
        var a = location.pathname.substring(location.pathname.lastIndexOf("/") + 1);
        crs.core.isEditMode = (a != "datasources");
        crs.core.crsDataSourceAPIUrl = crs.core.crsAPIUrl + ((crs.core.isEditMode) ? ("/" + a) : "");
        var c = parseInt($("#page-info").data("attribute-limit"));
        crs.core.attributeLimit = !isNaN(c) ? c : undefined;
        if (crs.core.isEditMode) {
            crs.core.dataSourcePage.dataSourceId = a
        }
        crs.core.dataSourcePage.$dataSourceNameInput = $("input.datasource-title");
        crs.core.dataSourcePage.$pageInfo = $("#page-info");
        crs.core.dataSourcePage.$solutionListDiv = $(".solution-list-container .solution-list");
        crs.core.dataSourcePage.$ftpContainer = $(".data-upload-container .ftp-container");
        crs.core.dataSourcePage.$uploadFileDiv = crs.core.dataSourcePage.$ftpContainer.find(".upload-folder");
        crs.core.dataSourcePage.$fileListDiv = crs.core.dataSourcePage.$ftpContainer.find(".file-list");
        crs.core.dataSourcePage.$validateSchemaDiv = crs.core.dataSourcePage.$ftpContainer.find(".validate-schema");
        crs.core.dataSourcePage.$actionPopover = $("#actionPopover");
        crs.core.dataSourcePage.$ftpSetupLayer = $(".layer.ftp-setup-page");
        crs.core.dataSourcePage.$dataSourcePageLayer = $(".layer.datasource-page");
        crs.core.dataSourcePage.$idLookupLayer = $(".layer.lookup-page");
        crs.core.dataSourcePage.$waitContainerForDataSourcePage = $("#waitIndicator");
        crs.core.dataSourcePage.$errorModal = $("#error-ds-modal");
        crs.core.autoDeleteDataSource = !crs.core.isEditMode;
        crs.core.initLayers()
    }};
$(document).ready(function() {
    $.ajaxSetup({cache: false});
    crs.core.initialize()
});
$(function() {
    var h = 25;
    var B = crs.core.dataSourcePage.$dataSourcePageLayer;
    var p = $(".schema-list-container");
    var F = $("#waitIndicator");
    var f = crs.core.dataSourcePage.$ftpContainer;
    var A = crs.core.dataSourcePage.$validateSchemaDiv;
    var m = $("div.solution-list-container");
    var a = $(".solution-list-container .add-solution-container");
    var j = $("#solution-edit-modal");
    var c = $("input.datasource-ic");
    var u = $("textarea.datasource-des");
    var n = crs.core.dataSourcePage.$dataSourceNameInput;
    var k = $("header button.exit");
    var l = $("#save-datasource");
    var i = B.find(".activate-datasource-container");
    var G = i.find('label.active-datasource > input[type="radio"]');
    var I = i.find('label.inactive-datasource > input[type="radio"]');
    var g = crs.core.dataSourcePage.$solutionListDiv;
    l.on("click", e);
    $(document).on("click", ".solution-list-container .solution-list li.solution div a", y);
    $(document).on("click", ".solution-list-container .solution-list li.solution-suite div a", H);
    $(document).on("click", ".solution-list ul > li.solution .cell.delete-row.coral-Icon--close", z);
    $(document).on("click", ".solution-list ul > li.solution-suite .cell.delete-row.coral-Icon--close", d);
    k.on("click", w);
    n.on("focusout", r);
    c.on("focusout", r);
    n.on("keydown", v);
    c.on("keydown", v);
    u.on("keydown", v);
    $(document).on("click", ".add-data-action", function() {
        crs.core.hideActionPopover();
        crs.core.hideUploadRegion(false);
        crs.core.hideDiagram(true)
    });
    $(document).on("click", "#aliasPopover .coral-Modal-closeButton", function() {
        $("#aliasPopover").data("popover").hide()
    });
    G.on("change", function() {
        if ($(this).is(":checked")) {
            I.removeAttr("checked")
        }
    });
    I.on("change", function() {
        if ($(this).is(":checked")) {
            G.removeAttr("checked")
        }
    });
    $(document).on("click", ".upload-action nav > span", function(M) {
        $(this).closest("nav").children("a").trigger("click")
    });
    $(document).on("click", "#actionPopover li.edit-schema-action", function() {
        var M = $(".layer.schema-page");
        crs.core.showLayer(M, $(this));
        M.find("header nav > a").text(Granite.I18n.get("Edit Schema", null, "CRS: "));
        crs.core.initializeSchemaPage()
    });
    i.find(".activate-content").on("click", function() {
        x(true);
        $(this).off("click")
    });
    $(window).on("beforeunload", function(M) {
        if (!crs.core.isEditMode && crs.core.dataSourcePage.dataSourceId && crs.core.autoDeleteDataSource) {
            crs.core.deleteDataSource(crs.core.dataSourcePage.dataSourceId, null, false)
        }
        return
    });
    n.on("keyup", function(O) {
        var M = n.val().trim();
        var N = c.val().trim();
        if (O && (O.keyCode == 8 || O.which == 8)) {
            c.val(M.replace(/ /g, "_").toLowerCase())
        } else {
            if (!N || (M.replace(/ /g, "").toLowerCase().indexOf(N.replace(/_/g, "").toLowerCase())) > -1) {
                c.val(M.replace(/ /g, "_").toLowerCase())
            }
        }
    });
    c.on("keyup", function() {
        K()
    });
    $(document).on("click", "ul > li .cell.expand-row.coral-Icon--accordionRight", function(M) {
        $(this).closest("ul").find("li.listItem." + $(this).closest("li").data("open-target")).removeClass("hidden");
        $(this).toggleClass("coral-Icon--accordionRight");
        $(this).toggleClass("coral-Icon--accordionDown")
    });
    $(document).on("click", "ul > li .cell.expand-row.coral-Icon--accordionDown", function(M) {
        $(this).closest("ul").find("li.listItem." + $(this).closest("li").data("open-target")).addClass("hidden");
        $(this).toggleClass("coral-Icon--accordionRight");
        $(this).toggleClass("coral-Icon--accordionDown")
    });
    crs.core.hideActionPopover = function() {
        var M = crs.core.dataSourcePage.$actionPopover.data("popover");
        if (M) {
            M.hide()
        }
    };
    crs.core.populateSolutionList = function() {
        a.addClass("hidden");
        g.removeClass("hidden");
        g.find("ul.list li.listItem").remove();
        var N = crs.core.crsDataSourceAPIUrl + ".solutionlist.html";
        var M = g.find(".wait-container");
        M.removeClass("hidden");
        $.ajax({url: N,type: "GET",data: {dataSourceId: crs.core.dataSourcePage.dataSourceId}}).done(function(O) {
            g.find("ul.list").append(O)
        }).fail(function(O) {
            console.log(O);
            crs.core.showError(O)
        }).always(function() {
            M.addClass("hidden")
        })
    };
    crs.core.deleteDataSource = function(N, Q, P) {
        if (!N) {
            console.log("couldn't delete a data source without an ID");
            return
        }
        var M = true;
        var O = crs.core.crsAPIUrl + "/" + N;
        F.removeClass("hidden");
        $.ajax({url: O,type: "DELETE",async: (P) ? false : true}).done(function(R) {
        }).fail(function(R) {
            M = false
        }).always(function() {
            F.addClass("hidden");
            crs.core.dataSourcePage.dataSourceId = null;
            if (Q != null && typeof Q == "function") {
                Q(M)
            }
        })
    };
    crs.core.loadSchemaList = function() {
        p.find(".content").addClass("hidden");
        p.find(".description").addClass("hidden");
        p.find("li.listItem").remove();
        F.removeClass("hidden");
        $.ajax({url: crs.core.crsDataSourceAPIUrl + ".schemalist.html",type: "GET"}).done(function(M) {
            p.find(".content ul.list").append(M);
            m.removeClass("disableAndOpaque")
        }).fail(function(M) {
            console.log(M);
            crs.core.showError(M)
        }).always(function() {
            F.addClass("hidden");
            p.find(".content").removeClass("hidden")
        })
    };
    crs.core.initializeDataSourcePage = function(M) {
        if (M && M == "schemaPage") {
            x(true);
            m.removeClass("disableAndOpaque");
            crs.core.hideUploadRegion(true);
            crs.core.populateUploadFileList();
            if (!g.hasClass("hidden")) {
                $(".activate-datasource-container.disableAndOpaque").removeClass("disableAndOpaque")
            }
        } else {
            if (M && M == "solutionPage") {
                m.removeClass("disableAndOpaque");
                crs.core.populateSolutionList();
                x(true);
                $(".activate-datasource-container.disableAndOpaque").removeClass("disableAndOpaque")
            } else {
                if (M && M == "fromCreateFTPAccount") {
                    if ($fileListDiv.hasClass("hidden")) {
                        A.removeClass("hidden")
                    }
                    x(true)
                }
            }
        }
    };
    function K() {
        n.off("keyup");
        c.off("keyup")
    }
    function o(N, M) {
        q(M, function() {
            x(true);
            F.removeClass("hidden");
            var S = N.hasClass("solution"), O = N.closest("ul"), R = (S) ? N : O.find("li.listItem.solution[data-open-target=" + N.data("solution-id") + "]"), Q = {action: (N.hasClass("solution")) ? "delete_solution" : "delete_report_suite",solution_name: R.data("id")};
            if (!S) {
                Q.reportsuite_id = N.data("id")
            }
            var P = crs.core.crsDataSourceAPIUrl;
            $.ajax({url: P,type: "POST",data: Q}).done(function(T) {
                if (T.success != null && T.success == true) {
                    if (S) {
                        O.find("li.listItem." + N.data("open-target")).remove();
                        N.remove()
                    } else {
                        N.remove();
                        if (O.find("li.listItem." + R.data("open-target")).length == 0) {
                            R.remove()
                        }
                    }
                    if (O.find("li.listItem").length == 0) {
                        a.removeClass("hidden");
                        g.addClass("hidden");
                        i.addClass("disableAndOpaque");
                        t(false)
                    }
                } else {
                    if (T.messages != null && T.messages.length > 0) {
                        crs.core.showError(T.messages[0])
                    }
                }
            }).fail(function(T, U) {
                crs.core.showError("Failed to perform delete operation. Status: " + U)
            }).always(function() {
                F.addClass("hidden")
            })
        })
    }
    function t(M) {
        if (M) {
            G.attr("checked", true);
            I.removeAttr("checked")
        } else {
            G.removeAttr("checked");
            I.attr("checked", true)
        }
    }
    function z(O) {
        var N = $(O.target).closest("li");
        var M = Granite.I18n.get("Are you sure you want to remove this Solution ?", null, "CRS: ");
        o(N, M)
    }
    function d(O) {
        var N = $(O.target).closest("li");
        var M = Granite.I18n.get("Are you sure you want to remove this Report Suite ?", null, "CRS: ");
        o(N, M)
    }
    function q(N, O) {
        var M = $("#confirm-delete-modal");
        var N = "<p>" + (N) ? N : "</p>";
        M.modal({type: "notice",header: Granite.I18n.get("Confirm Remove", null, "CRS: "),content: N,buttons: [{label: Granite.I18n.get("Cancel", null, "CRS: "),click: "hide"}, {label: Granite.I18n.get("Confirm", null, "CRS: "),className: "coral-Button--primary",click: function() {
                        this.hide();
                        typeof O == "function" && O()
                    }}]});
        M.modal("show")
    }
    function E(M) {
        var N = "<p>" + Granite.I18n.get("This action will edit all reports suites globally. Any changes will effect all report suites. Are you sure you want to do this?", null, "CRS: ") + "</p>";
        j.modal({header: Granite.I18n.get("Edit All Report Suites", null, "CRS: "),content: N,buttons: [{label: Granite.I18n.get("Cancel", null, "CRS: "),click: "hide"}, {label: Granite.I18n.get("Confirm", null, "CRS: "),className: "coral-Button--primary",click: function() {
                        this.hide();
                        typeof M == "function" && M()
                    }}]});
        j.modal("show")
    }
    function y(M) {
        var N = $(this);
        E(function() {
            crs.core.showLayer($(".layer.solution-page"), N);
            crs.core.initializeSolutionPage(N.closest(".solution").data("id"))
        })
    }
    function H(M) {
        var N = {};
        N.suiteName = $(this).data("value");
        N.suiteId = $(this).closest("li.solution-suite").data("id");
        crs.core.showLayer($(".layer.solution-page"), $(this));
        crs.core.initializeSolutionPage($(this).closest(".solution-suite").data("solution-id"), N)
    }
    function w(M) {
        if (!crs.core.isEditMode && crs.core.dataSourcePage.dataSourceId && !crs.core.dataSourcePage.ftpUserName) {
            crs.core.deleteDataSource(crs.core.dataSourcePage.dataSourceId, function() {
                s()
            })
        } else {
            s()
        }
    }
    var D = false;
    function e() {
        var M = n.val().trim();
        var P = u.val().trim();
        var Q = c.val().trim();
        var R = D;
        if (!R && !M) {
            if (crs.core.isEditMode) {
                crs.core.showError(Granite.I18n.get("Please fill a valid Name", null, "CRS: "))
            }
            R = true
        }
        var N = !i.hasClass("disableAndOpaque");
        var O = G.is(":checked");
        if (!R && N && O && !Q) {
            crs.core.showError(Granite.I18n.get("Please fill a valid Alias ID", null, "CRS: "));
            R = true
        }
        if (R) {
            return
        }
        var S = {};
        S.name = M;
        S.description = P;
        S.integrationCode = Q;
        if (N) {
            S.status = (O) ? "active" : "inactive"
        }
        J(S)
    }
    function r() {
        if (!crs.core.dataSourcePage.dataSourceId) {
            e()
        }
    }
    function J(N, M) {
        D = true;
        F.removeClass("hidden");
        if (crs.core.dataSourcePage.dataSourceId) {
            x(false)
        }
        $.ajax({url: (crs.core.dataSourcePage.dataSourceId) ? crs.core.crsDataSourceAPIUrl : crs.core.crsAPIUrl,type: "POST",data: {action: (crs.core.dataSourcePage.dataSourceId) ? "update_datasource" : "create_datasource",data: JSON.stringify(N),_charset_: "utf-8"}}).done(function(O) {
            if (O.success != null && O.success == true) {
                if (crs.core.dataSourcePage.dataSourceId) {
                    crs.core.autoDeleteDataSource = false;
                    s()
                } else {
                    var P = O.response;
                    crs.core.dataSourcePage.dataSourceId = P.dataSourceId;
                    crs.core.crsDataSourceAPIUrl = crs.core.crsDataSourceAPIUrl + "/" + crs.core.dataSourcePage.dataSourceId;
                    C();
                    b(crs.core.dataSourcePage.dataSourceId);
                    $("#dropzone .coral-FileUpload").data("fileUpload").options.uploadUrl = $("#dropzone .coral-FileUpload").data("fileUpload").options.uploadUrl + "/" + crs.core.dataSourcePage.dataSourceId + ".uploadCSV";
                    if (M != null && typeof M == "function") {
                        M.apply()
                    }
                }
            } else {
                if (O.messages != null && O.messages.length > 0) {
                    crs.core.showError(O.messages[0])
                }
            }
        }).fail(function(O) {
            console.log(O);
            crs.core.showError(O)
        }).always(function() {
            F.addClass("hidden");
            D = false;
            x(true)
        })
    }
    function L(N) {
        var M = ($(this).find("input").val() == "1");
        F.removeClass("hidden");
        $.ajax({url: crs.core.crsDataSourceAPIUrl,type: "POST",data: {action: "change_datasource_status",activate: M,_charset_: "utf-8"}}).done(function(O) {
            if (O.success == null || O.success != true) {
                if (O.messages != null && O.messages.length > 0) {
                    crs.core.showError(O.messages[0])
                }
            }
        }).fail(function(O) {
            console.log(O);
            crs.core.showError(O)
        }).always(function() {
            F.addClass("hidden")
        })
    }
    function C() {
        $("div.ftp-container").removeClass("disableAndOpaque")
    }
    function b(M) {
        $("span.folderName").html(M)
    }
    function s() {
        location.href = "/content/mac/" + crs.core.tenantID + "/datasources.html"
    }
    function v() {
        if (crs.core.isEditMode) {
            l.removeClass("disableAndOpaque")
        }
        $(this).off("keydown")
    }
    function x(M) {
        if (M) {
            l.removeClass("disableAndOpaque")
        } else {
            l.addClass("disableAndOpaque")
        }
    }
    crs.core.enableDataSourceSave = x;
    K();
    if (crs.core.isEditMode) {
        b(crs.core.dataSourcePage.dataSourceId);
        if (!g.hasClass("hidden")) {
            crs.core.populateSolutionList()
        }
    }
});
$(function() {
    var f = {data: [],metrics: [{id: "unique",ref_id: "m001",name: Granite.I18n.get("Unique Customer ID's", null, "CRS: "),type: "int",source: "real",transforms: null,date_range: {},date_ref: [],filter_ref: [0]}, {id: "matched",ref_id: "m002",name: Granite.I18n.get("1 VID Matched to CID", null, "CRS: "),type: "int",source: "real",transforms: null,date_range: {},date_ref: [],filter_ref: [0]}, {id: "invalid",ref_id: "m003",name: Granite.I18n.get("Invalid MCVID's", null, "CRS: "),type: "int",source: "real",transforms: null,date_range: {},date_ref: [],filter_ref: [0]}],filters: [{ref_id: "f001",data_store: "dms/sistr2",filter_def: null,metric_ref: [0],info: null}],dates: [],children: []};
    var g = null;
    var h = crs.core.dataSourcePage.$dataSourcePageLayer, c = h.find(".file-list .diagram-time-selection"), j = h.find(".file-list .upload-action"), i = h.find("#dataLineChart"), k = i.find(".diagramContainer"), a = i.find(".wait");
    function b(d) {
        if (d) {
            i.addClass("hidden");
            c.addClass("hidden");
            j.removeClass("with-margin")
        } else {
            i.removeClass("hidden");
            c.removeClass("hidden");
            j.addClass("with-margin");
            i.attr("style", "height: 300px;")
        }
    }
    crs.core.hideDiagram = b;
    function e(d) {
        if (!d) {
            d = Granite.I18n.get("Failed to load diagram data for this attribute source.", null, "CRS: ")
        }
        k.html('<div class="cv-error">' + d + "</div>");
        k.removeClass("hidden");
        i.attr("style", "height: 100px;")
    }
    crs.core.populateDiagramData = function() {
        i.removeClass("hidden");
        a.removeClass("hidden");
        k.addClass("hidden");
        $.ajax({url: crs.core.crsAPIUrl + ".html",type: "GET",data: {action: "diagram_data",dataSourceId: crs.core.dataSourcePage.dataSourceId,sinceHours: c.find("> span").data("time-range"),_charset_: "utf-8"}}).done(function(l) {
            if (l.success != null && l.success == true) {
                b(false);
                k.removeClass("hidden");
                if (l.response.isDataAvailable) {
                    f.data = l.response.data;
                    for (var o = 0; 
                    o < f.metrics.length; 
                    o++) {
                        f.metrics[o].date_range = l.response.date_range;
                        f.metrics[o].date_ref = l.response.date_ref
                    }
                    f.dates = l.response.dates;
                    var d = crs.core.dataSourcePage.$pageInfo.data("locale");
                    g = cloudViz.line({parent: d3.select("#dataLineChart .diagramContainer").node(),data: (f && rs2dv(f, {displayCount: -1}) || {}),dataAdapter: "rs2dv",filled: false,autoResize: true,interactive: true,locale: (d) ? d : "en_US"}).render();
                    i.find(".cv-legend-entry .cv-legend-title").attr("data-dtm-coachmarkconcept", "crs");
                    i.find(".cv-legend-entry .cv-legend-title").attr("data-dtm-coachmarkcoachconcept", "datasourcepage");
                    var m = ["uniqueCustomersId", "mcvidMatchedToCid", "InvalidMcvid", "AllMcvidMatchedToCid"];
                    d3.select("div.diagramContainer").selectAll(".cv-legend-entry .cv-legend-title").data(m).attr("data-dtm-coachmarkKey", function(p) {
                        return p
                    });
                    $("body").trigger("coachmarks.reload", ["uniqueCustomersId"])
                } else {
                    e(l.response.diagramAlternateText)
                }
            } else {
                var n = "";
                if (l.messages != null && l.messages.length > 0) {
                    n = l.messages[0]
                }
                crs.core.showError(n);
                e()
            }
        }).fail(function(d) {
            crs.core.showError();
            e()
        }).always(function() {
            a.addClass("hidden")
        })
    };
    $(document).on("click", ".file-list .diagram-time-selection", function(l) {
        var d = $("#diagram-time-select").data("selectList");
        d.hide();
        d.resetCaret();
        d.set("relatedElement", $(this).find("> span"));
        d.show();
        return false
    });
    $(document).on("selected", "#diagram-time-select", function(l) {
        var d = $(l.target).data("value"), m = $(l.target).text();
        c.find("> span").data("time-range", d).text(m);
        $(this).data("selectList").hide();
        crs.core.populateDiagramData()
    })
});
$(function() {
    var x = $(".layer.schema-page"), v = x.find("button.save-schema"), u = "previous-text", b = crs.core.dataSourcePage.$ftpContainer, j = x.children(".wait-container"), e = crs.core.dataSourcePage.$waitContainerForDataSourcePage, w = $("#preview-data-modal");
    $(document).on("click", ".validate-schema .validate-schema-action.coral-Button", function(y) {
        h($(y.target), true)
    });
    v.on("click", s);
    $(document).on("click", ".inplace-editable-select span.attribute-type-value", a);
    $(document).on("selected", "#schema-type-select", r);
    $(document).on("click", ".inplace-editable span", c);
    $(document).on("click", ".inplace-editable .coral-Icon", l);
    $(document).on("keyup", ".inplace-editable input", l);
    $(document).on("click", ".schema-container .preview-data", function() {
        var B = w.find(".coral-Modal-body"), y = j, A = B.find(".body-content");
        y.removeClass("hidden");
        A.empty();
        var z = crs.core.crsAPIUrl + ".attributesforpreview.html";
        $.ajax({url: z,type: "POST",data: {currentSchema: JSON.stringify(n()),dataSourceId: crs.core.dataSourcePage.dataSourceId}}).done(function(D) {
            var C = $(D);
            if (C.attr("id") && C.attr("id").indexOf("error") != -1) {
                x.append(C)
            } else {
                A.html(D).trigger("cui-contentloaded");
                w.modal("show")
            }
        }).fail(function(C) {
            console.log(C);
            crs.core.showError(C)
        }).always(function() {
            y.addClass("hidden");
            showingUp = false
        })
    });
    crs.core.initializeSchemaPage = function(z) {
        t();
        j.removeClass("hidden");
        x.children(".container").empty();
        var y = crs.core.crsDataSourceAPIUrl + ".schema.schemadetails.html";
        $.ajax({url: y,type: "GET"}).done(function(A) {
            x.children(".container").html(A).trigger("cui-contentloaded");
            $("body").trigger("coachmarks.reload", ["attributeType"])
        }).fail(function(A) {
            console.log(A);
            crs.core.showError(A)
        }).always(function() {
            j.addClass("hidden");
            if (z) {
                f()
            } else {
                t()
            }
        })
    };
    var p = false;
    var m = 1000;
    var g = 120000;
    var k = null;
    function q() {
        if (k != null) {
            clearTimeout(k);
            k = null;
            m = 1000
        }
    }
    crs.core.startDetectionMismatchLoop = function() {
        if (p) {
            if (k != null) {
                q()
            } else {
                return
            }
        }
        p = true;
        q();
        var z = function() {
            q();
            p = false
        };
        var y = function() {
            if (m > g) {
                q();
                p = false
            } else {
                k = setTimeout(function() {
                    crs.core.detectSchemaMismatch(z, y)
                }, m);
                m = m * 2
            }
        };
        crs.core.detectSchemaMismatch(z, y)
    };
    crs.core.detectSchemaMismatch = function(y, B) {
        var A = crs.core.crsDataSourceAPIUrl, z = false;
        $.ajax({url: A,type: "GET",data: {action: "detect_schema_mismatch"}}).done(function(C) {
            if (C.success != null && C.success == true) {
                var D = C.response;
                if (D && D.schemaMismatch && D.schemaMismatch == true) {
                    z = true;
                    Granite.I18n.get("{0}%", "0", "CRS: percentage of upload.");
                    o(D.attributesToDelete.count, D.attributesToDelete.names, D.attributesToAdd.count, D.attributesToAdd.names);
                    y && typeof y == "function" && y()
                } else {
                    B && typeof B == "function" && B()
                }
            } else {
                if (C.messages != null && C.messages.length > 0) {
                    console.log(C.messages[0])
                }
            }
        }).fail(function(C) {
            console.log(C)
        }).always(function() {
            if (z) {
            }
        })
    };
    function o(B, D, C, A) {
        var z = $("#schema-mismatch-modal");
        var y = Granite.I18n.get("{0} attribute(s) deleted ({1})", [B, D], "CRS: "), E = Granite.I18n.get("{0} attribute(s) added ({1})", [C, A], "CRS: "), F = Granite.I18n.get('<div>This file containes data that does not match your current schema. Continuing will result in the following actions:</div><ul><li>{0}</li><li>{1}</li></ul><div class="{2}">If you choose to continue, these changes cannot be undone. Afterwhich you will need to re-validate your schema.</div>', [y, E, "top-margin"], "CRS: percentage of upload.");
        $content = $("<p></p>").html(F);
        z.modal({type: "notice",header: Granite.I18n.get("Schema Mismatch", null, "CRS: "),content: $content.html(),buttons: [{label: Granite.I18n.get("Reject", null, "CRS: "),click: function() {
                        this.hide();
                        i(false)
                    }}, {label: Granite.I18n.get("Continue", null, "CRS: "),className: "coral-Button--primary",click: function() {
                        this.hide();
                        i(true)
                    }}]});
        z.modal("show")
    }
    function i(B) {
        var z = (B) ? "accept_new_schema" : "reject_new_schema";
        var y = e;
        var A = crs.core.crsDataSourceAPIUrl;
        y.removeClass("hidden");
        $.ajax({url: A,type: "POST",data: {action: z,_charset_: "utf-8"}}).done(function(C) {
            if (C.success != null && C.success == true) {
                if (B) {
                    var D = $(".layer.schema-page");
                    crs.core.showLayer(D, crs.core.dataSourcePage.$actionPopover);
                    D.find("header nav > a").text(Granite.I18n.get("Edit Schema", null, "CRS: "));
                    crs.core.initializeSchemaPage(true);
                    crs.core.populateUploadFileList();
                    if (!crs.core.dataSourcePage.$solutionListDiv.hasClass("hidden")) {
                        crs.core.populateSolutionList()
                    }
                }
            } else {
                if (C.messages != null && C.messages.length > 0) {
                    crs.core.showError(C.messages[0])
                }
            }
        }).fail(function(C) {
            console.log(C);
            crs.core.showError(C)
        }).always(function() {
            y.addClass("hidden")
        })
    }
    w.on("show", function(y) {
    }).on("hide", function(y) {
    });
    function f() {
        v.removeClass("disableAndOpaque")
    }
    function t() {
        v.addClass("disableAndOpaque")
    }
    function n() {
        var C = {version: $(".schema-table li.header").data("schema-version") || "1",data: {type: "object",objectType: "Attributes",properties: {}}};
        var A = $(".schema-table li.listItem");
        for (var z = 0; 
        z < A.length; 
        z++) {
            var B = {};
            B.type = A.eq(z).find(".attribute-type span.attribute-type-value span").text();
            B.title = A.eq(z).find(".attribute-title span").text();
            B.description = A.eq(z).find(".attribute-description span").text();
            var y = C.data.properties;
            y[A.eq(z).find(".attribute-name").text()] = B
        }
        return C
    }
    function s(A) {
        if ($(".schema-page .editing-schema").length > 0) {
            crs.core.showError(Granite.I18n.get("Please complete the editing of the page and then save.", null, "CRS: "));
            return
        }
        var y = $(".schema-page .wait-container");
        t();
        y.removeClass("hidden");
        var z = crs.core.crsDataSourceAPIUrl;
        $.ajax({url: z,type: "POST",data: {action: "create_schema",schemaObject: JSON.stringify(n()),_charset_: "utf-8"}}).done(function(B) {
            if (B.success != null && B.success == true) {
                crs.core.hideLayer($(A.target));
                crs.core.initializeDataSourcePage("schemaPage")
            } else {
                if (B.messages != null && B.messages.length > 0) {
                    crs.core.showError(B.messages[0])
                }
            }
        }).fail(function(B) {
            console.log(B);
            crs.core.showError(B)
        }).always(function() {
            y.addClass("hidden");
            f()
        })
    }
    function r(A) {
        f();
        var z = $(A.target).text().trim();
        var y = $(this).data("selectList");
        $(y.options.relatedElement).text(z);
        y.hide()
    }
    function d(z, A) {
        var y;
        if (z) {
            y = A.find("input").data(u)
        } else {
            y = A.find("input").val();
            f()
        }
        A.empty().append($("<span>").text(y))
    }
    function a(z) {
        f();
        var y = $("#schema-type-select").data("selectList");
        y.hide();
        y.resetCaret();
        y.set("relatedElement", z.target);
        y.show();
        return false
    }
    function c(A) {
        var y = $(this).text();
        var z = $(this).closest("div.inplace-editable");
        $(this).remove();
        $inputTextBox = $('<input type="text" class="coral-Textfield"/>').data(u, y);
        $icon = $('<i class="icon-check-circle medium editing-schema coral-Icon coral-Icon--checkCircle coral-Icon--sizeM"></i>');
        z.append($inputTextBox).append($icon);
        $inputTextBox.focus();
        $inputTextBox.val(y)
    }
    function l(y) {
        if (y) {
            var z = $(this).closest("div.inplace-editable");
            if (y.type == "click") {
                d(false, z)
            } else {
                if (y.keyCode == 13 || y.which == 13) {
                    d(false, z)
                } else {
                    if (y.keyCode == 27 || y.which == 27) {
                        d(true, z)
                    }
                }
            }
        }
    }
    function h(C, B) {
        var y = C.siblings(".wait"), A = false;
        $validateButton = C;
        $validateButton.addClass("disableAndOpaque").addClass("disabled");
        y.removeClass("hidden");
        var z = crs.core.crsDataSourceAPIUrl;
        $.ajax({url: z,type: "GET",data: {action: "can_validate_schema"}}).done(function(D) {
            if (D.success != null && D.success == true) {
                var E = D.response;
                if (E) {
                    if (E.canValidate && E.canValidate == true) {
                        crs.core.showLayer($(".layer.schema-page"), $validateButton);
                        crs.core.initializeSchemaPage(true)
                    } else {
                        if (E.canValidate && E.canValidate == false && E.schemaMismatch && E.schemaMismatch == true) {
                            console.error("Schema Mismtach !!");
                            console.log("AttributesToAdd", E.attributesToAdd);
                            console.log("AttributesToDelete", E.attributesToDelete)
                        } else {
                            if (D.response.errorInfo) {
                                crs.core.showError(D.response.errorInfo);
                                A = true
                            } else {
                                if (D.response.info) {
                                    crs.core.showInfoModal(null, D.response.info)
                                } else {
                                    A = true;
                                    crs.core.showError()
                                }
                            }
                        }
                    }
                } else {
                    A = true;
                    crs.core.showError()
                }
            } else {
                A = true;
                if (D.messages != null && D.messages.length > 0) {
                    crs.core.showError(D.messages[0])
                } else {
                    crs.core.showError()
                }
            }
        }).fail(function(D) {
            console.log(D);
            crs.core.showError(D);
            A = true
        }).always(function() {
            $validateButton.removeClass("disableAndOpaque").removeClass("disabled");
            y.addClass("hidden");
            if (A && B) {
                crs.core.hideUploadRegion(false);
                crs.core.enableUploadHiding(false)
            }
        })
    }
    crs.core.validateSchema = h
});
$(function() {
    var e = crs.core.dataSourcePage.$dataSourceNameInput, c = crs.core.dataSourcePage.$actionPopover, b = crs.core.dataSourcePage.$ftpContainer, n = crs.core.dataSourcePage.$uploadFileDiv, d = crs.core.dataSourcePage.$validateSchemaDiv, j = crs.core.dataSourcePage.$fileListDiv, f = $("#progress-zone"), o = $("#dropzone"), k = o.find("span.browse"), a = f.find(".coral-Progress-label"), g = o.find(".fileUploadProgressText label"), p = f.find(".coral-Progress-status"), l = f.find(".coral-Progress-bar"), r = crs.core.dataSourcePage.$ftpSetupLayer;
    $(document).on("click", ".setup-ftp-account", function() {
        crs.core.showLayer(r, $(this));
        crs.core.initializeFTPSetup()
    });
    $(document).on("click", "#dropzone .coral-Icon--close", function() {
        crs.core.hideUploadRegion(true);
        crs.core.hideDiagram(false)
    });
    $(document).on("click", ".file-list .upload-action", function(s) {
        c.find("> div.coral-Popover-content").height(c.find("> div.coral-Popover-content").find("ul.coral-SelectList").height())
    });
    n.find(".coral-FileUpload").on("fileselected", function() {
        progress = 0;
        q(0);
        crs.core.enableDataSourceSave(false)
    }).on("filerejected", function(s) {
        crs.core.showError(s.message);
        m(false)
    }).on("fileuploadprogress", function(s) {
        q(Math.floor((s.originalEvent.loaded / s.originalEvent.total) * 100))
    }).on("fileuploadcanceled", function(s) {
        crs.core.showError(s.message);
        m(false);
        crs.core.enableDataSourceSave(true)
    }).on("fileuploaderror", function(s) {
        crs.core.showError(s.message);
        m(false);
        crs.core.enableDataSourceSave(true)
    }).on("dropzonedragover", function(s) {
        m(true)
    }).on("dropzonedragleave", function(s) {
        m(false)
    }).on("fileuploaderror", function(s) {
        crs.core.showError(s.message);
        m(false);
        crs.core.enableDataSourceSave(true)
    }).on("fileuploadsuccess", function(u) {
        crs.core.enableDataSourceSave(true);
        $(this).find(".coral-FileUpload-input").val("");
        q(-1);
        m(false);
        if (u.item && u.item.xhr && u.item.xhr.response) {
            var s = JSON.parse(u.item.xhr.response);
            if (s.success == null || s.success == false) {
                var t = null;
                if (s.messages != null && s.messages.length > 0) {
                    t = s.messages[0]
                }
                crs.core.showError(t);
                return
            }
        }
        if (j.hasClass("hidden")) {
            d.removeClass("hidden");
            crs.core.hideUploadRegion(true);
            $(".validate-schema  .validate-schema-action.coral-Button").trigger("click")
        } else {
            crs.core.hideUploadRegion(true);
            crs.core.startDetectionMismatchLoop();
            crs.core.populateUploadFileList()
        }
        crs.core.autoDeleteDataSource = false
    });
    crs.core.showModalError = function(s, t) {
        if (s) {
            if (!t) {
                t = Granite.I18n.get("Unknown error. Please contact your system administrator.", null, "CRS: ")
            }
            s.find(".coral-Alert--error").show().find(".coral-Alert-message").html(t)
        }
    };
    function m(s) {
        if (s) {
            o.css("font-weight", "bold").css("font-size", "1.8rem");
            k.css("margin-left", "30%")
        } else {
            o.removeAttr("style");
            k.removeAttr("style")
        }
    }
    function h(s) {
        if (s) {
            o.find(".coral-Icon--close").removeClass("hidden")
        } else {
            o.find(".coral-Icon--close").addClass("hidden")
        }
    }
    crs.core.enableUploadHiding = h;
    function q(t) {
        var v = "";
        if (t == -1) {
            k.removeClass("hidden");
            f.addClass("hidden");
            a.text(Granite.I18n.get("{0}%", "0", "CRS: percentage of upload."));
            p.css("width", "0%");
            v = "";
            h(true)
        } else {
            if (t || t == 0) {
                k.addClass("hidden");
                f.removeClass("hidden");
                l.removeClass("hidden");
                h(false);
                var u = Granite.I18n.get("{0}%", t.toString(), "CRS: percentage of upload."), s = t + "%";
                v = "";
                if (t >= 99) {
                    m(false);
                    u = "";
                    s = "100%";
                    v = Granite.I18n.get("File uploaded successfully! Please wait while we process the uploaded file on server.", "CRS:")
                }
                a.text(u);
                g.text(v);
                p.css("width", s)
            }
        }
    }
    function i() {
        $createFtpModal.find(".coral-Alert--error").hide();
        $createFtpModal.removeClass("create-mode");
        $createFtpModal.removeClass("view-mode");
        $createFtpModal.removeClass("update-mode")
    }
    crs.core.hideUploadRegion = function(s) {
        if (s) {
            n.addClass("hidden")
        } else {
            n.removeClass("hidden")
        }
    };
    crs.core.populateUploadFileList = function() {
        crs.core.populateDiagramData();
        j.removeClass("hidden");
        d.addClass("hidden");
        j.find(".content ul li.listItem").remove();
        h(true);
        var t = crs.core.crsAPIUrl + ".uploadfilelist.html";
        var s = $(".file-list").find(".wait-container");
        s.removeClass("hidden");
        $.ajax({url: t,type: "GET",data: {dataSourceId: crs.core.dataSourcePage.dataSourceId}}).done(function(u) {
            j.find(".content ul").append(u)
        }).fail(function(u) {
            console.log(u);
            crs.core.showError(u)
        }).always(function() {
            s.addClass("hidden")
        })
    };
    if (crs.core.isEditMode && !j.hasClass("hidden")) {
        crs.core.startDetectionMismatchLoop();
        crs.core.populateUploadFileList()
    }
});
$(function() {
    var d = crs.core.dataSourcePage.$ftpSetupLayer, h = null, b = d.find(".wait-container");
    function g() {
        h = d.find(".ftp-setup-container")
    }
    function c() {
        h.removeClass("update-mode");
        h.removeClass("create-mode");
        h.removeClass("view-mode");
        h.find('input[type="password"]').val("");
        if (crs.core.dataSourcePage.ftpUserName) {
            h.find("form .ftp-username-field .text").text(" " + crs.core.dataSourcePage.ftpUserName);
            h.find("span.ftp-username").text(crs.core.dataSourcePage.ftpUserName)
        }
    }
    crs.core.initializeFTPSetup = function() {
        b.removeClass("hidden");
        d.children(".container").empty();
        var i = crs.core.crsDataSourceAPIUrl + ".ftpsetup.ftpsetupdetails.html";
        $.ajax({url: i,type: "GET"}).done(function(j) {
            d.children(".container").html(j).trigger("cui-contentloaded");
            g()
        }).fail(function(j) {
            console.log(j);
            crs.core.showError(j)
        }).always(function() {
            b.addClass("hidden")
        })
    };
    $(document).on("click", ".layer.ftp-setup-page form .hide", function() {
        c();
        h.addClass("view-mode")
    });
    $(document).on("click", ".ftp-setup-container .validate-schema-action.coral-Button", function(i) {
        crs.core.validateSchema($(i.target))
    });
    $(document).on("click", ".layer.ftp-setup-page .reset-password", function() {
        c();
        h.addClass("update-mode")
    });
    $(document).on("submit", "#create-ftp-account", function(i) {
        i.preventDefault();
        d.find("header .done-ftp-setup").removeClass("disableAndOpaque");
        if (h.hasClass("create-mode")) {
            a(h.find("form"))
        } else {
            if (h.hasClass("update-mode")) {
                e(h.find("form"))
            }
        }
    });
    function a(m) {
        var k = m.find('.fieldRow.ftp-username-field input[type="text"]').val();
        var i = m.find(".fieldRow .ftp-password").val();
        var j = m.find(".fieldRow .ftp-password-confirmation").val();
        if (!k || !i || !j) {
            crs.core.showError(Granite.I18n.get("Fill required fields.", null, "CRS: "));
            return
        }
        if (i != j) {
            crs.core.showError(Granite.I18n.get("Typed passwords does not match.", null, "CRS: "));
            return
        }
        b.removeClass("hidden");
        var l = {};
        l.userName = k;
        l.password = i;
        $.ajax({url: crs.core.crsDataSourceAPIUrl,type: "POST",data: {action: "create_ftp_account",data: JSON.stringify(l),_charset_: "utf-8"}}).done(function(n) {
            if (n.success != null && n.success == true) {
                crs.core.dataSourcePage.ftpUserName = n.response.userName;
                crs.core.autoDeleteDataSource = false;
                f()
            } else {
                if (n.messages != null && n.messages.length > 0) {
                    var o = n.messages[0].content;
                    crs.core.showError(o)
                }
            }
        }).fail(function(n) {
            console.log(n);
            crs.core.showError()
        }).always(function() {
            b.addClass("hidden")
        })
    }
    function f() {
        c();
        h.addClass("view-mode")
    }
    function e(l) {
        var i = l.find(".fieldRow .ftp-password").val();
        var j = l.find(".fieldRow .ftp-password-confirmation").val();
        if (!i || !j) {
            crs.core.showError(Granite.I18n.get("Fill required fields.", null, "CRS: "));
            return
        }
        if (i != j) {
            crs.core.showError(Granite.I18n.get("Typed passwords does not match.", null, "CRS: "));
            return
        }
        b.removeClass("hidden");
        var k = {};
        k["new-password"] = i;
        $.ajax({url: crs.core.crsDataSourceAPIUrl,type: "POST",data: {action: "update_ftp_account",data: JSON.stringify(k),_charset_: "utf-8"}}).done(function(m) {
            if (m.success != null && m.success == true) {
                f()
            } else {
                if (m.messages != null && m.messages.length > 0) {
                    var n = m.messages[0].content;
                    crs.core.showError(n)
                }
            }
        }).fail(function(m) {
            console.log(m);
            crs.core.showError()
        }).always(function() {
            b.addClass("hidden")
        })
    }
});
$(function() {
    var o = "is-new-attribute";
    var r = "from-option";
    var d = [];
    var t = $(".layer.solution-page");
    var e = $(".coral-Button.save-solution");
    var a = 0;
    var k = true;
    var g = false;
    $(document).on("click", "button.add-solution", j);
    $(document).on("click", ".configure-solution-container .add-subcription", j);
    e.on("click", function() {window.location.href="../datasources"});
    $(document).on("change:value", ".solution-selection .coral-Autocomplete", h);
    $(document).on("selected", "#attribute-selection li", function(w) {
        var u = $(this);
        if (u.data("value") === -1) {
            $selectAllCheckbox = u.find("input.select-all");
            if (u.attr("data-isChecked") == "none") {
                $selectAllCheckbox.prop("checked", true);
                u.attr("data-isChecked", "all");
                $("#attribute-selection li.options").each(function() {
                    return crs.core.addItemToAttributeTable($(this), true)
                })
            } else {
                $selectAllCheckbox.removeAttr("checked");
                u.attr("data-isChecked", "none");
                $("#attribute-selection li.options").each(function() {
                    return crs.core.deleteItemFromAttributeTable($(this))
                })
            }
        } else {
            var v = $(".attribute-table");
            if (p(u, v)) {
                crs.core.deleteItemFromAttributeTable(u)
            } else {
                crs.core.addItemToAttributeTable(u, true)
            }
        }
    });
    $(document).on("click", "a.open-analytics-premium", function() {
        var u = $(".attribute-container").data("analytics-premium-url");
        if (u) {
            window.location.href = u
        }
    });
    $(document).on("click", ".attribute-table ul > li .cell.delete-row.coral-Icon--close", function(v) {
        var u = $(this).closest("li");
        crs.core.deleteItemFromAttributeTable(u.data(r))
    });
    $(document).on("itemremoved", ".report-suites.coral-Autocomplete ul.js-coral-Autocomplete-tagList", function(u) {
        s()
    });
    $(document).on("itemadded", ".report-suites.coral-Autocomplete ul.js-coral-Autocomplete-tagList", function(u) {
        s()
    });
    function p(u, v) {
        if (v.find('li div.attribute-name span[data-value="' + u.data("value") + '"]').length > 0) {
            return true
        }
        return false
    }
    crs.core.addItemToAttributeTable = function(v, u) {
        var x = $(".attribute-table");
        if (p(v, x)) {
            return true
        }
        x.removeClass("hidden");
        var y = false;
        if (v.data(o)) {
            y = true
        }
        if (!isNaN(crs.core.attributeLimitLeft) && (a + ((y) ? 1 : 0) > crs.core.attributeLimitLeft)) {
            l();
            v.find("input").removeAttr("checked");
            return false
        }
        if (u) {
            s()
        }
        v.find("input").prop("checked", true);
        var A = (v.data("should-warn")) ? '<i class="coral-Icon coral-Icon--alert coral-Icon--sizeS small warning"></i>' : "", B = (A) ? 'data-init="quicktip" data-quicktip-content="' + Granite.I18n.get("This attribute data has decimals and will be rounded to 2 decimal places.", null, "CRS: ") + '" data-quicktip-type="notice" data-quicktip-arrow="top")' : "";
        $divElement = $("<div/>").addClass("row fixed listHeader").append($('<div class="cell middle delete-row coral-Icon coral-Icon--close coral-Icon--sizeXS center"></div>')).append($('<div class="cell middle attribute-name"><span data-value="' + v.data("value") + '"' + B + ">" + v.data("value") + A + "</span></div>")).append($('<div class="cell middle attribute-title">' + v.data("display-name") + "</div>")).append($('<div class="cell middle attribute-description">' + v.data("description") + "</div>"));
        $("<li/>").data(o, v.data(o)).data(r, v).addClass("listItem").append($divElement).appendTo($(".attribute-table ul"));
        if (y) {
            a++
        }
        var z = x.find("li.listItem").length;
        var C = $("#attribute-selection").find("li.options").length;
        var D = $("#attribute-selection li").find("input.select-all");
        var w = D.parent("li");
        if (z < C) {
            D.prop("indeterminate", true);
            w.attr("data-isChecked", "partial")
        } else {
            if (z === C) {
                D.prop("indeterminate", false);
                D.prop("checked", true);
                w.attr("data-isChecked", "all")
            }
        }
        return true
    };
    crs.core.deleteItemFromAttributeTable = function(u) {
        var v = $('.attribute-table ul li div .attribute-name span[data-value="' + u.data("value") + '"]').closest("li");
        if (v.length != 0) {
            if (!f(v)) {
                c(function() {
                    f(v)
                }, function() {
                    u.find("input").prop("checked", true)
                });
                return false
            }
        }
        return true
    };
    function l() {
        t.find("#attribute-selection").data("selectList").hide();
        var u = $("#attribute-limit-modal");
        u.modal({type: "default",header: Granite.I18n.get("Attribute Subscription Max", null, "CRS: "),content: $("#attribute-model-content").html()}).modal("show")
    }
    function c(x, u) {
        t.find("#attribute-selection").data("selectList").hide();
        var v = $("#remove-attribute-modal");
        var w = "<p>" + Granite.I18n.get("Some features may not work properly if an attribute they need is removed from a subscription. These features include bookmarks, dashboards, scheduled reports, Report Builder data blocks, segments, calculated metrics, and other similar features.", null, "CRS: ") + "</p>";
        v.modal({type: "notice",header: Granite.I18n.get("Warning", null, "CRS: "),content: w,buttons: [{label: Granite.I18n.get("Cancel", null, "CRS: "),click: function() {
                        this.hide();
                        u && typeof u == "function" && u()
                    }}, {label: Granite.I18n.get("Ok", null, "CRS: "),className: "coral-Button--primary",click: function() {
                        this.hide();
                        x && typeof x == "function" && x()
                    }}]});
        v.modal("show")
    }
    function f(u) {
        s();
        var w = u.closest("ul");
        if (u.data(o)) {
            a--
        } else {
            if (g == false) {
                g = true;
                return false
            }
        }
        u.data(r).find("input").removeAttr("checked");
        u.remove();
        if (w.find("li.listItem").length == 0) {
            $(".attribute-table").addClass("hidden");
            var x = $("#attribute-selection li").find("input.select-all");
            var v = x.parent("li");
            x.removeAttr("checked");
            x.prop("indeterminate", false);
            v.attr("data-isChecked", "none")
        } else {
            var x = $("#attribute-selection li").find("input.select-all");
            var v = x.parent("li");
            x.removeAttr("checked");
            x.prop("indeterminate", true);
            v.attr("data-isChecked", "partial")
        }
        return true
    }
    function n() {
        d = [];
        var v = $(".solution-page .solution-container .solution-selection");
        if (v.find('.coral-SelectList li[data-value="' + v.find(".coral-Textfield").val() + '"]').length == 0) {
            d.push(Granite.I18n.get("Please select a valid Solution.", null, "CRS: "));
            return false
        }
        var u = $(".report-suites");
        if (u.find("ul.coral-TagList li").length == 0) {
            d.push(Granite.I18n.get("Please select some valid Report Suite.", null, "CRS: "));
            return false
        }
        if ($(".attribute-table li.listItem").length == 0) {
            d.push(Granite.I18n.get("Please select some valid Attributes.", null, "CRS: "));
            return false
        }
        return true
    }
    function b() {
        var w = {};
        $solutionContainer = $(".solution-page .solution-container");
        w.name = $solutionContainer.find('.coral-SelectList li[data-value="' + $solutionContainer.find(".coral-Textfield").val() + '"]').data("value");
        w.sid = "";
        var z = [];
        var y = $(".attribute-table li.listItem");
        jQuery.each(y, function(A, B) {
            var C = {};
            C.attr_id = $(B).find(".attribute-name span").data("value");
            C.evar_id = "";
            C.title = $(B).find(".attribute-title").html();
            C.description = $(B).find(".attribute-description").html();
            z.push(C)
        });
        suiteDOMList = $(".report-suites ul.coral-TagList li");
        var v = [];
        var u = $(".report-suites select");
        function x(A) {
            var B = {};
            B.rs_id = A.find("input").prop("value");
            B.name = A.find(".coral-TagList-tag-label").text().trim();
            B.attributes = z;
            return B
        }
        if (suiteDOMList.length > 0) {
            jQuery.each(suiteDOMList, function(A, B) {
                v.push(x($(B)))
            })
        }
        w.reportsuites = v;
        return w
    }
    function m(w) {
        if (!n()) {
            crs.core.showError(d[0]);
            return
        }
        var u = t.children(".wait-container").removeClass("hidden");
        q();
        var v = crs.core.crsDataSourceAPIUrl;
        $.ajax({url: v,type: "POST",data: {action: "create_solution",solutionObject: JSON.stringify(b()),shouldOverwriteSolution: k,_charset_: "utf-8"}}).done(function(x) {
            if (x.success != null && x.success == true) {
                crs.core.hideLayer($(w.target));
                crs.core.initializeDataSourcePage("solutionPage")
            } else {
                if (x.messages != null && x.messages.length > 0) {
                    crs.core.showError(x.messages[0])
                }
            }
        }).fail(function(x) {
            console.log(x);
            crs.core.showError(x)
        }).always(function() {
            u.addClass("hidden");
            s()
        })
    }
    function i() {
        var u = $("#attribute-selection").find("li input:checked");
        jQuery.each(u, function(v, w) {
            crs.core.addItemToAttributeTable($(w).closest("li"), false)
        })
    }
    crs.core.initializeSolutionPage = function(y, v) {
        var z = {};
        k = false;
        g = false;
        if (y) {
            k = true;
            z.solutionName = y;
            if (v) {
                z.suiteId = v.suiteId;
                z.suiteName = v.suiteName;
                k = false
            }
        }
        var u = t.children(".wait-container").removeClass("hidden");
        q();
        t.children(".container").empty();
        var x = "crs/configuresolution.solutiondetails.html";
        var w = $(this);
        $.ajax({url: x,type: "GET",data: z}).done(function(B) {
            t.children(".container").html(B).trigger("cui-contentloaded");
            var A = parseInt(t.find(".attribute-table").data("limit-left"));
            crs.core.attributeLimitLeft = (!isNaN(A)) ? A : crs.core.attributeLimit;
            a = 0;
            i()
        }).always(function(A) {
            u.addClass("hidden")
        }).fail(function(A) {
            console.log(A);
            crs.core.showError(A)
        })
    };
    function j(u) {
        crs.core.showLayer(t, $(this));
        crs.core.initializeSolutionPage()
    }
    function s() {
        e.removeClass("disableAndOpaque")
    }
    function q() {
        e.addClass("disableAndOpaque")
    }
    function h(x, y) {
        if ($(this).find(".coral-InputGroup input[disabled]").length != 0) {
            return
        }
        var w = $(this).find('li[data-value="' + y.value + '"]').data("path");
        w = w.substr(1,w.length);
        var v = $(this);
        var u = t.children(".wait-container").removeClass("hidden");
        $.ajax({url: w,type: "GET",data: {folderId: crs.core.dataSourcePage.ftpFolderId}}).done(function(z) {
            $(".select-solution-container").empty().html(z).trigger("cui-contentloaded")
        }).always(function(z) {
            u.addClass("hidden")
        }).fail(function(z) {
            console.log(z);
            crs.core.showError(z)
        })
    }
});
$(function() {
    $(document).on("click", "header.top nav .back", function() {
        crs.core.hideLayer($(this))
    })
});
$(function() {
    var c = crs.core.dataSourcePage.$idLookupLayer, e = c.find(".id-lookup-container"), b = c.find("input.id-lookup-field"), a = c.find(".wait-container"), d = $("#CID-lookup").find("button[type='submit']");
    $(document).on("click", ".id-lookup", function() {
        crs.core.showLayer(c, $(this));
        crs.core.initializeIdLookup()
    });
    b.on("keyup", function(f) {
        if ($(this).val().length >= 1) {
            d.removeAttr("disabled")
        } else {
            d.attr("disabled", true)
        }
    });
    crs.core.initializeIdLookup = function() {
        c.find(".lookup-details").empty();
        d.attr("disabled", true);
        b.val("")
    };
    $(document).on("submit", "#CID-lookup", function(g) {
        g.preventDefault();
        a.removeClass("hidden");
        var f = crs.core.crsDataSourceAPIUrl + ".lookup.idlookupdetails.html";
        $.ajax({url: f,type: "GET",data: {cid: b.val().trim()}}).done(function(h) {
            c.find(".lookup-details").html(h).trigger("cui-contentloaded")
        }).fail(function(h) {
            console.log(h);
            crs.core.showError(h)
        }).always(function() {
            a.addClass("hidden")
        })
    })
});
