ELM.Audiences = {
    init: function(a) {
        console.log("Initializing ELM.Audiences..");
        ELM.Audiences.app = new ELM.Audiences.App(a);
        ELM.Audiences.router = new ELM.Audiences.Router();
        F.options.debug = true;
        Backbone.history.start()
    },
    Templates: {},
    Models: {},
    Collections: {}
};
ELM.Audiences.Router = Backbone.Router.extend({
    routes: {
        "": "showAudienceIndex",
        "new": "showCreateAudienceDialog",
        "edit/:id": "showEditor"
    },
    showAudienceIndex: function() {
        ELM.Audiences.app.index.show();
        ELM.Audiences.app.index.audienceList.updateList()
    },
    showCreateAudienceDialog: function() {
        ELM.Audiences.app.newAudience()
    },
    showEditor: function(a) {
        this.performAction(a, true, function(b) {
            ELM.Audiences.app.editAudience(b)
        })
    },
    performAction: function(c, a, b) {
        return ELM.Audiences.app.performAudienceAction(c.substring(1), a, b)
    }
});
"use strict";
ELM.Audiences.AudienceList = new Class({
    toString: "AudienceList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.Audiences,
    options: {
        defaultParams: {
            pageSize: 100
        }
    },
    construct: function() {
        this.fetchParams = {};
        this.deleteConfirmationDialog = new CUI.Modal({
            element: $("<div />").appendTo(document.body),
            visible: false,
            type: "notice",
            heading: Granite.I18n.get("Confirm delete"),
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: function(a) {
                    a.dialog.hide()
                }.bind(this)
            }, {
                label: Granite.I18n.get("Delete"),
                className: "primary",
                click: function(a) {
                    this.deleteSelected();
                    a.dialog.hide()
                }.bind(this)
            }]
        });
        this.selectedAudiences = [];
        F.on("audienceSorter:change", this.sortAudiences.bind(this))
    },
    ItemTemplate: function() {
        return ELM.Audiences.Templates.AudienceListItem.apply(this, arguments)
    },
    search: function(b, a) {
        this.fetchParams[a] = b;
        this.updateList()
    },
    updateList: function() {
        this.fetch(this.fetchParams)
    },
    showDeleteAudienceConfirmation: function(a) {
        var c = this.getModelFromLi(this.getContainer(a));
        this.selectedAudiences = [c];
        var b = "<p>" + Granite.I18n.get('Are you sure you want to delete the audience "{0}"?', _.escape(c.getTitle())) + "</p><p>" + Granite.I18n.get("Deleted audiences cannot be recovered.") + "</p>";
        this.deleteConfirmationDialog.set({
            content: b
        }).show()
    },
    getContainer: function(a) {
        return $(a.currentTarget).closest(".listItem")
    },
    getAllAudienceContainers: function() {
        return this.view.$(".listItem")
    },
    deleteSelected: function() {
        var c = this.selectedAudiences,
            d = this.getAudienceIds(c),
            a = this.getRemoveAudiencesJSON(d),
            b = this;
        this.bulkRequest(a).done(function(f) {
            if(f.successful.length > 0) {
                b.updateList();
                var e = c[0].getTitle();
                if(e) {
                    F.trigger("successNotification", {
                        message: Granite.I18n.get('Audience "{0}" was deleted.', e)
                    })
                }
            }
            b.notifyAboutNonDeletedAudiences(f.unsuccessful)
        })
    },
    notifyAboutNonDeletedAudiences: function(b) {
        var a;
        if(b.length === 0) {
            return
        }
        if(b.length === 1) {
            a = Granite.I18n.get("Could not delete the audience")
        } else {
            a = Granite.I18n.get("Could not delete some audiences")
        }
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    getRemoveAudiencesJSON: function(a) {
        return this.getBulkJSON("delete", a)
    },
    getBulkJSON: function(a, d, c) {
        var b = {
            action: a,
            resources: d
        };
        if(c) {
            $.extend(b, c)
        }
        return b
    },
    getAudienceIds: function(a) {
        var b = [];
        _.each(a, function(c) {
            b.push("/" + c.get("id"))
        });
        return b
    },
    bulkRequest: function(a) {
        var b = JSON.stringify(a);
        return this.audienceRequest({
            url: this.collection.actionsUrl(),
            type: "POST",
            data: b
        })
    },
    audienceRequest: function(a) {
        return $.ajax({
            url: a.url,
            type: a.type,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: a.data
        })
    },
    sortAudiences: function(b, a) {
        this.setParameter("sortBy", b);
        this.setParameter("sortOrder", a);
        this.updateList()
    },
    setParameter: function(a, b) {
        if(typeof b !== "string" || b === "") {
            delete this.fetchParams[a]
        } else {
            this.fetchParams[a] = b
        }
    }
});
ELM.Audiences.Index = new Class({
    toString: "Index",
    extend: F.Component,
    options: {
        singly: true,
        visible: true
    },
    View: F.View,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.Index,
            component: this
        }).render();
        this.addComponent(new ELM.Searcher({
            el: this.view.$el.find(".audience-search-placeholder")
        }), "searcher").on("search:changed", this.audienceListSearch.bind(this));
        this.addComponent(new ELM.Sorter({
            el: this.view.$el.find(".audience-sorter-placeholder"),
            model: {
                name: "audienceSorter",
                ascending: false,
                options: [{
                    value: "jcr:title",
                    label: Granite.I18n.get("Audience Name")
                }, {
                    value: "jcr:lastModified",
                    label: Granite.I18n.get("Date Modified"),
                    selected: true
                }]
            }
        }), "audienceSorter");
        this.audiencesHeaderEl = this.view.$(".audiencesHeader");
        this.addComponent(new ELM.Audiences.AudienceList({
            el: this.view.$(".audienceList"),
            visible: true,
            events: {
                "click .icon-delete": "showDeleteAudienceConfirmation"
            }
        }), "audienceList").on("collection:loaded", this.updateAudiencesHeader.bind(this));
        F.on("window:resize", this.setScrollableHeightAndWrapperMinHeight.bind(this));
        this._searchQuery = null;
        this.view.$(".scrollable").bind("scroll", this.bind(function(b) {
            this.audienceList.handleScroll(b)
        }))
    },
    destruct: function() {
        F.off("window:resize")
    },
    setSearchQuery: function(a) {
        this._searchQuery = $.trim(a)
    },
    triggerSearchChangeEvent: function(a) {
        this.toggleClearSearchButton(a.currentTarget.value);
        this.triggerSearchAudience(a.currentTarget.value)
    },
    clearSearchResults: function() {
        this.toggleClearSearchButton("");
        this.view.$(".searchField").val("");
        this.triggerSearchAudience("")
    },
    triggerSearchAudience: function(a) {
        F.trigger("audiences:search", a)
    },
    toggleClearSearchButton: function(b) {
        var a = this.view.$(".clearSearch");
        if(b) {
            a.removeClass("hidden")
        } else {
            a.addClass("hidden")
        }
    },
    updateAudiencesHeader: function(a, c) {
        var b = Granite.I18n.get("Audiences ({0})", [a.length || 0]);
        if(this._searchQuery) {
            b = Granite.I18n.get("Audience results ({0})", [a.length || 0])
        }
        if(a.length && c) {
            if(this._searchQuery) {
                b = Granite.I18n.get("Audience results ({0} of {1})", [a.length, c])
            } else {
                b = Granite.I18n.get("Audiences ({0} of {1})", [a.length, c])
            }
        }
        this.audiencesHeaderEl.text(b)
    },
    show: function() {
        this.inherited(arguments);
        this.setScrollableHeightAndWrapperMinHeight()
    },
    setScrollableHeightAndWrapperMinHeight: function() {
        if(this.isVisible()) {
            var a = this.view.$(".scrollable");
            var b = window.innerHeight - a.offset().top;
            a.height(b);
            this.view.$(".wrapper").css("min-height", b)
        }
    },
    audienceListSearch: function(b, a) {
        this._searchQuery = b;
        this.components.audienceList.search(b, a)
    }
});
ELM.Audiences.NewAudience = new Class({
    toString: "NewAudience",
    extend: F.ModelComponent,
    Model: ELM.Models.Audience,
    View: F.View.extend({
        events: {
            "click .closeAudienceEditor": "hideNewAudienceDialog",
            "click .save": "handleSaveClick",
            "click .cancel": "hideNewAudienceDialog",
            "change .audiencename": "handleAudienceNameChange"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.NewAudience,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.renderSubViews();
            this.initializeWidgets()
        })
    },
    renderSubViews: function() {
        this.addComponent(new ELM.Audiences.TargetingWidget({
            el: this.view.$(".targetingcontainer"),
            model: this.model.getTargets(),
            visible: true
        }), "targetingwidget").on("save:enable", this.enableSave.bind(this))
    },
    initializeWidgets: function() {
        this.$audiencename = this.view.$(".audiencename");
        this.$saveButton = this.view.$(".save")
    },
    show: function(a) {
        this.view.rendered = null;
        this.load(a.model);
        this.inherited(arguments);
        this.view.show()
    },
    hideNewAudienceDialog: function(a) {
        a.preventDefault();
        this.view.hide();
        this.trigger("audience:hide")
    },
    handleSaveClick: function() {
        var a = this,
            b = this.components.targetingwidget.getTargetRules();
        if(!this.model.getTitle().length) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("Please enter a valid audience name")
            });
            this.$audiencename.addClass("error").focus();
            return
        }
        if(b.length < this.components.targetingwidget.getNumberOfRules()) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("There are one or more incomplete audience targeting rules. Review the highlighted rules below.")
            });
            return
        }
        this.model.setTargets(b);
        this.model.save(null, {
            success: function(d, c) {
                a.trigger("audience:saved", d);
                F.trigger("successNotification", {
                    message: Granite.I18n.get('Audience : "{0}" saved.', d.getTitle())
                })
            },
            error: function(d, c) {
                var e;
                if(c && c.responseText) {
                    var f = JSON.parse(c.responseText);
                    e = f["error.message"]
                }
                F.trigger("errorNotification", {
                    message: e || Granite.I18n.get("Error saving audience.")
                })
            }
        })
    },
    handleAudienceNameChange: function(a) {
        this.$audiencename.removeClass("error");
        this.model.setTitle(a.target.value)
    },
    enableSave: function(a) {
        if(a === false) {
            this.$saveButton.addClass("disabled")
        } else {
            this.$saveButton.removeClass("disabled")
        }
    }
});
ELM.Audiences.Editor = new Class({
    toString: "Editor",
    extend: F.ModelComponent,
    Model: ELM.Models.Audience,
    View: F.View.extend({
        events: {
            "click .closeAudienceEditor": "closeEditor",
            "click .save": "saveAudience",
            "click .cancel": "closeEditor",
            "change .audiencename": "updateAudienceName"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.Editor,
            component: this
        }).render();
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets();
            this.renderSubViews()
        })
    },
    renderSubViews: function() {
        this.addComponent(new ELM.Audiences.TargetingWidget({
            el: this.view.$(".targetingcontainer"),
            model: this.model.getTargets(),
            visible: true
        }), "targetingwidget").on("save:enable", this.enableSave.bind(this));
        this.targetingwidget.setRules()
    },
    initializeWidgets: function() {
        this.$audiencename = this.view.$(".audiencename");
        this.$saveButton = this.view.$(".save")
    },
    closeEditor: function(a) {
        a.preventDefault();
        this.view.hide();
        this.trigger("audience:hide")
    },
    saveAudience: function() {
        var a = this,
            b = this.components.targetingwidget.getTargetRules();
        if(!this.model.getTitle().length) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("Please enter a valid audience name")
            });
            this.$audiencename.addClass("error").focus();
            return
        }
        if(b.length < this.components.targetingwidget.getNumberOfRules()) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("There are one or more incomplete audience targeting rules. Review the highlighted rules below.")
            });
            return
        }
        this.model.setTargets(b);
        this.model.save(null, {
            success: function(d, c) {
                a.trigger("audience:saved", d);
                F.trigger("successNotification", {
                    message: Granite.I18n.get('Audience : "{0}" saved.', d.getTitle())
                })
            },
            error: function(d, c) {
                var e;
                if(c && c.responseText) {
                    var f = JSON.parse(c.responseText);
                    e = f["error.message"]
                }
                F.trigger("errorNotification", {
                    message: e || Granite.I18n.get("Error saving audience.")
                })
            }
        })
    },
    updateAudienceName: function(a) {
        this.$audiencename.removeClass("error");
        this.model.setTitle(a.target.value)
    },
    enableSave: function(a) {
        if(a === false) {
            this.$saveButton.addClass("disabled")
        } else {
            this.$saveButton.removeClass("disabled")
        }
    },
    showEditor: function(a) {
        if(a.model) {
            this.originalModel = $.extend(true, {}, a.model.toJSON());
            this.load(a.model)
        } else {
            this.originalModel = null
        }
        this.show()
    }
});
"use strict";
ELM.Audiences.Toolbar = new Class({
    toString: "Toolbar",
    extend: F.Component,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this
        })
    },
    toggleToolbar: function(c) {
        var b = this.view.$(".actions");
        var a = c > 1;
        if(a) {
            b.addClass("mode-bulk")
        } else {
            b.removeClass("mode-bulk")
        }
    },
    View: F.View.extend({
        events: {
            "click .bulk-action": "triggerBulkEvent"
        }
    }),
    triggerBulkEvent: function(b) {
        b.preventDefault();
        var a = b.currentTarget.href,
            c = a.substring(a.indexOf("#") + 1);
        this.trigger("toolbar:bulkEvent", c);
        this.toggleToolbar(0)
    }
});
ELM.Audiences.TargetingWidget = new Class({
    toString: "TargetingWidget",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .ruleselector": "handleRuleSelectorChange",
            "click .deleteRuleConfirmationDialog .icon-delete": "deleteRule",
            "click .deleteRuleConfirmationDialog .icon-close": "hideDeleteRuleConfirmationDialog"
        }
    }),
    construct: function(a) {
        this.model = a.model;
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.TargetingWidget,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets()
        });
        this.rulesCount = 0;
        this.targets = []
    },
    getRuleComponent: function(a) {
        var b = {
            BROWSER: ELM.Audiences.Browser,
            OPERATING_SYSTEM: ELM.Audiences.OperatingSystem,
            LIBRARY: ELM.Audiences.TargetLibrary,
            VISITOR_PROFILE: ELM.Audiences.VisitorProfile,
            SITE_PAGE: ELM.Audiences.SitePages,
            TRAFFIC_SOURCES: ELM.Audiences.TrafficSource,
            GEO: ELM.Audiences.Geo,
            MBOX: ELM.Audiences.CustomParameters,
            PROFILE: ELM.Audiences.VisitorProfile,
            USER: ELM.Audiences.VisitorProfile,
            MOBILE: ELM.Audiences.Mobile
        };
        return b[a]
    },
    initWidgets: function() {
        this.$rulescontainer = this.view.$(".rules");
        this.$ruleselector = this.view.$(".ruleselector");
        this.$noRuleMessage = this.view.$(".message");
        this.$deleteRuleConfirmationDialog = this.view.$(".deleteRuleConfirmationDialog");
        this.view.$(".rulesdropdown").dropdown()
    },
    handleRuleSelectorChange: function(a) {
        if(a.target.value != "") {
            this.addRule(a.target.value)
        }
    },
    resetRuleSelector: function() {
        this.$ruleselector.val("").parent().data("dropdown")._update(true)
    },
    addRule: function(b) {
        var a = this.getRuleComponent(b);
        if(!a) {
            return
        }
        this.addComponent(new a({
            el: $('<div class="rule"/>').appendTo(this.$rulescontainer),
            model: this.model[this.rulesCount],
            visible: true
        }), b + this.rulesCount).on("rule:delete", this.showDeleteRuleConfirmationDialog.bind(this));
        this.rulesCount += 1;
        this.setState()
    },
    deleteRule: function() {
        var a = this.$deleteRuleConfirmationDialog.prop("ruleToDelete");
        if(a) {
            this.components[a].destruct();
            this.removeComponent(a);
            this.setState()
        }
        this.hideDeleteRuleConfirmationDialog()
    },
    showDeleteRuleConfirmationDialog: function(c) {
        if(this.$deleteRuleConfirmationDialog.is(":visible") && this.$deleteRuleConfirmationDialog.prop("ruleToDelete") === c) {
            this.hideDeleteRuleConfirmationDialog();
            return
        }
        var a = this.components[c].view.$(".icon-delete"),
            b = a.position().top - a.outerHeight() - this.$deleteRuleConfirmationDialog.outerHeight() - 5;
        this.$deleteRuleConfirmationDialog.css({
            top: b + "px"
        }).fadeIn();
        this.$deleteRuleConfirmationDialog.prop("ruleToDelete", c)
    },
    hideDeleteRuleConfirmationDialog: function() {
        this.$deleteRuleConfirmationDialog.removeProp("ruleToDelete").fadeOut()
    },
    setState: function() {
        if(_.size(this.components) === 0) {
            this.$noRuleMessage.removeClass("hidden");
            this.trigger("save:enable", false)
        } else {
            this.$noRuleMessage.addClass("hidden");
            this.trigger("save:enable", true)
        }
        this.resetRuleSelector()
    },
    getTargetRules: function() {
        this.targets.length = 0;
        _.each(this.components, function(b, a) {
            if(b.isComplete()) {
                this.targets.push(b.getRules())
            }
        }, this);
        return this.targets
    },
    setRules: function() {
        for(var a = 0; a < this.model.length; a++) {
            this.addRule(this.model[a].type)
        }
    },
    getNumberOfRules: function() {
        return _.size(this.components)
    }
});
ELM.Audiences.AudienceRule = new Class({
    toString: "AudienceRule",
    extend: F.ModelComponent,
    View: F.View.extend({
        commonEvents: {
            "click .close": "closeRule",
            "click .icon-delete": "deleteRule",
            "click .icon-edit": "editRule"
        },
        additionalEvents: {
            "change select": "handleDropdownChange",
            "keyup textarea": "handleInputChange"
        },
        events: function() {
            return _.extend({}, this.commonEvents, this.additionalEvents)
        }
    }),
    construct: function(a) {
        this.model = a.model;
        this.steps = [];
        this.curStep = null;
        this.totalSteps = null;
        this.defaultSeparator = " OR ";
        F.on("steps:changed", this.updateTotalSteps.bind(this))
    },
    initWidgets: function() {
        if(this.model) {
            if(this.model.parameter) {
                this.selectParameter(this.model.parameter)
            }
            if(this.model.operator) {
                this.selectOperator(this.model.operator)
            }
            if(this.model.operands) {
                this.selectOperands(this.model.operands)
            }
        }
        if(this.view && this.view.$(".dropdown")) {
            this.view.$(".dropdown").dropdown()
        }
    },
    updateTotalSteps: function(a) {
        this.totalSteps = a
    },
    closeRule: function(a) {
        a.preventDefault();
        this.view.$el.addClass("collapsed")
    },
    deleteRule: function(a) {
        a.preventDefault();
        this.trigger("rule:delete", this.toString())
    },
    editRule: function(a) {
        a.preventDefault();
        this.view.$el.removeClass("collapsed")
    },
    updateRuleOnStepChange: function(a) {
        this.clearIncompleteMark();
        this.curStep = this.steps[a].order
    },
    handleDropdownChange: function(a) {
        if(a.target.value) {
            this.performStepChange(a.target, a.target.name)
        }
    },
    performStepChange: function(b, a) {
        this.updateRuleOnStepChange(a);
        this.updateSummary($(b).find(":selected").text());
        this.showNextStep()
    },
    handleInputChange: function(a) {
        this.updateRuleOnStepChange(a.target.name);
        this.updateSummary(a.target.value.replace(/[\n\r]/g, this.defaultSeparator));
        this.showNextStep()
    },
    showNextStep: function() {
        this.curStep += 1;
        if(this.curStep < this.totalSteps) {
            this.view.$(".step" + this.curStep).removeClass("hidden")
        }
    },
    updateSummary: function(a) {
        this.view.$(this.steps[this.curStep].summaryEl).text(a)
    },
    isComplete: function() {
        var a = this.getRules();
        for(prop in a) {
            var b = a[prop];
            if((typeof b === "string" && b === "") || (typeof b === "object" && _.size(b) === 0)) {
                this.markIncomplete();
                return false
            }
        }
        return true
    },
    markIncomplete: function() {
        this.view.$el.addClass("incomplete")
    },
    clearIncompleteMark: function() {
        this.view.$el.removeClass("incomplete")
    },
    selectParameter: function(e) {
        var b = this.view.$('select[name="0"]');
        var a = b.find("option"),
            d, c;
        a.removeAttr("selected");
        d = a.filter('[value="' + e + '"]');
        c = d.length > 0;
        if(!c) {
            d = a.filter('[value=""]')
        }
        d.attr("selected", true);
        this.performStepChange(b, "0")
    },
    selectOperator: function(e) {
        var b = this.view.$('select[name="2"]');
        var a = b.find("option"),
            d, c;
        a.removeAttr("selected");
        d = a.filter('[value="' + e + '"]');
        c = d.length > 0;
        if(!c) {
            d = a.filter('[value=""]')
        }
        d.attr("selected", true);
        this.performStepChange(b, "2")
    },
    selectOperands: function(a) {
        var c = "";
        for(var b = 0; b < a.length; b++) {
            c = c + a[b];
            if(b != a.length - 1) {
                c += "\n"
            }
        }
        this.view.$("textarea").val(c);
        this.updateSummary(c.replace(/[\n\r]/g, this.defaultSeparator))
    }
});
ELM.Audiences.SitePages = new Class({
    toString: "SitePages",
    extend: ELM.Audiences.AudienceRule,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.SitePages,
            component: this
        }).on("renderComplete", function() {
                this.initWidgets()
            }.bind(this));
        this.steps = [{
            name: "source",
            order: 0,
            summaryEl: ".source"
        }, {
            name: "parameter",
            order: 1,
            summaryEl: ".parameter"
        }, {
            name: "operator",
            order: 2,
            summaryEl: ".operator"
        }, {
            name: "operand",
            order: 3,
            summaryEl: ".operand"
        }];
        this.totalSteps = 4
    },
    getRules: function() {
        var d = this.view.$('select[name="0"]').val(),
            c = this.view.$('select[name="1"]').val(),
            b = this.view.$('select[name="2"]').val(),
            a = this.view.$("textarea").val();
        return {
            type: "SITE_PAGE",
            parameter: (d && c) ? (d + "." + c) : "",
            operator: b,
            operands: _.compact(a.split("\n"))
        }
    },
    selectParameter: function(j) {
        var d = j.split(".");
        var e = this.view.$('select[name="0"]');
        var h = e.find("option"),
            i, b;
        h.removeAttr("selected");
        i = h.filter('[value="' + d[0] + '"]');
        b = i.length > 0;
        if(!b) {
            i = h.filter('[value=""]')
        }
        i.attr("selected", true);
        this.performStepChange(e, "0");
        var c = this.view.$('select[name="1"]');
        var g = c.find("option"),
            f, a;
        g.removeAttr("selected");
        f = g.filter('[value="' + d[1] + '"]');
        a = f.length > 0;
        if(!a) {
            f = g.filter('[value=""]')
        }
        f.attr("selected", true);
        this.performStepChange(c, "1")
    }
});
ELM.Audiences.CustomParameters = new Class({
    toString: "CustomParameters",
    extend: ELM.Audiences.AudienceRule,
    View: ELM.Audiences.AudienceRule.prototype.View.extend({
        additionalEvents: {
            "selected .step": "updateConstraint",
            "change .step": "updateConstraint",
            "selected .input-mbox": "fetchSelectedMboxParameters"
        }
    }),
    construct: function(b) {
        this.model = new ELM.Model(b.model || this.getDefaultRule());
        this.view = new this.View({
            el: b.el,
            template: ELM.Audiences.Templates.CustomParameters,
            model: this.model,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.renderSummary()
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        this.fetchMboxes();
        this.fetchParameters(this.model.get("mbox"));
        var a = this;
        this.steps = [{
            name: "mbox",
            order: 0,
            value: function() {
                return a.view.$(".input-mbox select").val()
            },
            text: function() {
                return a.view.$(".input-mbox").find(":selected").text()
            }
        }, {
            name: "parameter",
            order: 1,
            summaryEl: ".parameter",
            value: function() {
                var c = a.view.$(".input-parameter");
                if(c.prop("tagName") === "INPUT") {
                    return c.val()
                }
                return c.find("select").val()
            },
            text: function() {
                var c = a.view.$(".input-parameter");
                if(c.prop("tagName") === "INPUT") {
                    return c.val()
                }
                return c.find(":selected").text()
            }
        }, {
            name: "operator",
            order: 2,
            summaryEl: ".operator",
            value: function() {
                return a.view.$(".input-operator select").val()
            },
            text: function() {
                return a.view.$(".input-operator").find(":selected").text()
            }
        }, {
            name: "operands",
            order: 3,
            summaryEl: ".operands",
            value: function() {
                var c = a.view.$(".input-operands").val();
                if(c) {
                    return _.compact(c.split("\n"))
                }
            },
            text: function() {
                var c = a.view.$(".input-operands").val();
                if(c) {
                    return c.replace(/[\n\r]/g, a.defaultSeparator)
                }
            }
        }];
        this.totalSteps = 4
    },
    initWidgets: function() {
        this.$invalidValueError = this.view.$(".invalid-value-error");
        this.view.$(".select").select()
    },
    renderSummary: function() {
        var b;
        for(var a = 1; a < this.totalSteps; a++) {
            b = this.steps[a].value() && this.steps[a].text();
            if(b) {
                this.view.$(this.steps[a].summaryEl).text(b)
            }
        }
    },
    getRules: function() {
        var b = this.getDefaultRule(),
            a = _.defaults(this.model.toJSON(), b);
        return _.pick(a, _.keys(b))
    },
    isComplete: function() {
        var a, c, d, b;
        if(!this.$invalidValueError.hasClass("hidden")) {
            this.markIncomplete();
            return false
        }
        for(a = 1; a < this.totalSteps; a++) {
            c = this.view.$('.step[data-order="' + a + '"]');
            if(c.length) {
                d = this.steps[a].name;
                b = this.model.get(d);
                if(!b || (typeof b === "object" && _.size(b) === 0)) {
                    this.markIncomplete();
                    return false
                }
            }
        }
        return true
    },
    validateStep: function(b, d) {
        var c = b.data("pattern"),
            a = b.data("error-alert") || Granite.I18n.get("Please enter valid value."),
            e = true;
        if(c) {
            d = [].concat(d);
            e = _.every(d, function(f) {
                return(new RegExp(c)).test(f)
            });
            if(e) {
                this.$invalidValueError.addClass("hidden")
            } else {
                this.$invalidValueError.text(a).removeClass("hidden")
            }
        }
        return e
    },
    updateConstraint: function(c) {
        var a = $(c.currentTarget),
            b = a.data("order"),
            e = this.steps[b].name,
            d = this.steps[b].value();
        if(this.validateStep(a, d) && d !== this.model.get(e)) {
            if(c.currentTarget.tagName !== "INPUT" || !d) {
                this.resetDependentSteps(b)
            }
            this.model.set(e, d);
            this.clearIncompleteMark()
        }
    },
    resetDependentSteps: function(b) {
        var d = this.getDefaultRule(),
            c, a;
        for(a = b + 1; a < this.totalSteps; a++) {
            c = this.steps[a].name;
            this.model.set(c, d[c])
        }
    },
    fetchSelectedMboxParameters: function(a) {
        this.fetchParameters(a.selected)
    },
    fetchParameters: function(c) {
        var a = this,
            b = [];
        this.model.unset("parameters");
        if(c) {
            this.model.set("loading", true);
            this.fetchRequest("/target/" + ELM.client + "/target/mboxes/" + c + ".parameters.at.json").done(function(d) {
                b = _.filter(d.parameters, function(e) {
                    return e.parameterType === "MBOX"
                });
                a.model.set("parameters", b)
            }).fail(function() {
                a.showErrorNotification(Granite.I18n.get("Failed to fetch mbox parameters from server."))
            }).always(function() {
                a.model.unset("loading")
            })
        }
    },
    fetchMboxes: function() {
        var a = this;
        this.model.set("loading", true);
        this.fetchRequest("/target/" + ELM.client + "/target/mboxes.at.json?pageSize=2000&sortBy=jcr:title&sortOrder=ASCENDING").done(function(b) {
            a.model.set("mboxes", b.items)
        }).fail(function() {
            a.showErrorNotification(Granite.I18n.get("Failed to fetch mboxes from server."))
        }).always(function() {
            a.model.unset("loading")
        })
    },
    fetchRequest: function(a) {
        return $.ajax({
            url: a,
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    getDefaultRule: function() {
        return {
            type: "MBOX",
            mbox: undefined,
            parameter: "",
            operator: "",
            operands: []
        }
    }
});
ELM.Audiences.Browser = new Class({
    toString: "Browser",
    extend: ELM.Audiences.AudienceRule,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.Browser,
            component: this
        }).on("renderComplete", function() {
                this.initWidgets()
            }.bind(this));
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter"
        }, ];
        this.totalSteps = 1
    },
    getRules: function() {
        return {
            type: "BROWSER",
            parameter: this.view.$('select[name="0"]').val()
        }
    }
});
ELM.Audiences.OperatingSystem = new Class({
    toString: "OperatingSystem",
    extend: ELM.Audiences.AudienceRule,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.OperatingSystem,
            component: this
        }).on("renderComplete", function() {
                this.initWidgets()
            }.bind(this));
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter"
        }, ];
        this.totalSteps = 1
    },
    getRules: function() {
        return {
            type: "OPERATING_SYSTEM",
            parameter: this.view.$('select[name="0"]').val()
        }
    }
});
ELM.Audiences.Social = new Class({
    toString: "Social",
    extend: ELM.Audiences.AudienceRule,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.Social,
            component: this
        }).on("renderComplete", function() {
                this.initWidgets()
            }.bind(this));
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter"
        }, ];
        this.totalSteps = 1
    },
    getRules: function() {
        return {
            type: "SOCIAL",
            parameter: this.view.$('select[name="0"]').val()
        }
    }
});
ELM.Audiences.VisitorProfile = new Class({
    toString: "VisitorProfile",
    extend: ELM.Audiences.AudienceRule,
    View: ELM.Audiences.AudienceRule.prototype.View.extend({
        additionalEvents: {
            "selected .step": "updateConstraint",
            "change .step": "updateConstraint",
            "selected .input-parameter": "updateParameterType"
        }
    }),
    construct: function(b) {
        this.model = new ELM.Model(b.model || this.getDefaultRule());
        this.view = new this.View({
            el: b.el,
            template: ELM.Audiences.Templates.VisitorProfile,
            model: this.model,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.renderSummary()
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        this.fetchCustomParameters();
        var a = this;
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter",
            value: function() {
                return a.view.$(".input-parameter select").val()
            },
            text: function() {
                return a.view.$(".input-parameter").find(":selected").text()
            }
        }, {
            name: "operator",
            order: 1,
            summaryEl: ".operator",
            value: function() {
                return a.view.$(".input-operator select").val()
            },
            text: function() {
                return a.view.$(".input-operator").find(":selected").text()
            }
        }, {
            name: "operands",
            order: 2,
            summaryEl: ".operands",
            value: function() {
                var c = a.view.$(".input-operands").val();
                if(c) {
                    return _.compact(c.split("\n"))
                }
            },
            text: function() {
                var c = a.view.$(".input-operands").val();
                if(c) {
                    return c.replace(/[\n\r]/g, a.defaultSeparator)
                }
            }
        }];
        this.totalSteps = 3;
        this.defaultParameterType = "VISITOR_PROFILE"
    },
    initWidgets: function() {
        this.$invalidValueError = this.view.$(".invalid-value-error");
        this.view.$(".select").select()
    },
    renderSummary: function() {
        var b;
        for(var a = 0; a < this.totalSteps; a++) {
            b = this.steps[a].value() && this.steps[a].text();
            if(b) {
                this.view.$(this.steps[a].summaryEl).text(b)
            }
        }
    },
    getRules: function() {
        var b = this.getDefaultRule(),
            a = _.defaults(this.model.toJSON(), b);
        return _.pick(a, _.keys(b))
    },
    isComplete: function() {
        var a, c, d, b;
        if(!this.$invalidValueError.hasClass("hidden")) {
            this.markIncomplete();
            return false
        }
        for(a = 1; a < this.totalSteps; a++) {
            c = this.view.$('.step[data-order="' + a + '"]');
            if(c.length) {
                d = this.steps[a].name;
                b = this.model.get(d);
                if(!b || (typeof b === "object" && _.size(b) === 0)) {
                    this.markIncomplete();
                    return false
                }
            }
        }
        return true
    },
    validateStep: function(b, d) {
        var c = b.data("pattern"),
            a = b.data("error-alert") || Granite.I18n.get("Please enter valid value."),
            e = true;
        if(c) {
            e = _.every([].concat(d), function(f) {
                return(new RegExp(c)).test(f)
            });
            if(e) {
                this.$invalidValueError.addClass("hidden")
            } else {
                this.$invalidValueError.text(a).removeClass("hidden")
            }
        }
        return e
    },
    updateConstraint: function(c) {
        var a = $(c.currentTarget),
            b = a.data("order"),
            e = this.steps[b].name,
            d = this.steps[b].value();
        if(this.validateStep(a, d) && d !== this.model.get(e)) {
            this.resetDependentSteps(b);
            this.model.set(e, d);
            this.clearIncompleteMark()
        }
    },
    updateParameterType: function() {
        var a = this.view.$(".input-parameter").find(":selected").data("type") || this.defaultParameterType;
        this.model.set("type", a)
    },
    resetDependentSteps: function(b) {
        var d = this.getDefaultRule(),
            c, a;
        for(a = b + 1; a < this.totalSteps; a++) {
            c = this.steps[a].name;
            this.model.set(c, d[c])
        }
    },
    fetchCustomParameters: function() {
        var a = this;
        this.model.set("loading", true);
        this.fetchRequest("/target/" + ELM.client + "/target/mboxes.profiles.at.json").done(function(b) {
            var c = _.groupBy(b.attributes, function(d) {
                return d.parameterType
            });
            a.updateParameters(c)
        }).fail(function() {
            a.showErrorNotification(Granite.I18n.get("Failed to fetch custom parameters from server."))
        }).always(function() {
            a.model.unset("loading")
        })
    },
    fetchRequest: function(a) {
        return $.ajax({
            url: a,
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    updateParameters: function(a) {
        this.model.set("parameters", _.extend(this.getBuiltInParameters(), a))
    },
    getBuiltInParameters: function() {
        return {
            BUILT_IN: [{
                name: Granite.I18n.get("New Visitor"),
                value: "New Visitor"
            }, {
                name: Granite.I18n.get("Returning Visitor"),
                value: "Returning Visitor"
            }, {
                name: Granite.I18n.get("In other tests"),
                value: "In other tests"
            }, {
                name: Granite.I18n.get("First page of session"),
                value: "First page of session"
            }, {
                name: Granite.I18n.get("Not in other tests"),
                value: "Not in other tests"
            }, {
                name: Granite.I18n.get("Not first page of session"),
                value: "Not first page of session"
            }]
        }
    },
    getDefaultRule: function() {
        return {
            type: "",
            parameter: "",
            operator: "",
            operands: []
        }
    }
});
ELM.Audiences.TargetLibrary = new Class({
    toString: "TargetLibrary",
    extend: ELM.Audiences.AudienceRule,
    defaultAudiencesModel: ELM.Models.DefaultAudiences,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.TargetLibrary,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        });
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter"
        }];
        this.totalSteps = 1
    },
    initializeWidgets: function() {
        var a = this;
        this.$select = this.view.$("select");
        this.$dropdown = this.view.$(".dropdown");
        new this.defaultAudiencesModel().fetch({
            data: {
                pageSize: 1000
            },
            success: function(b) {
                a.generateAudienceMarkup(b)
            }
        })
    },
    generateAudienceMarkup: function(b) {
        var a = Handlebars.compile(['<option value="">{{i18n "Choose"}}</option>', "{{#each audiences}}", '<option value="{{[jcr:title]}}">{{[jcr:title]}}</option>', "{{/each}}"].join(""));
        this.$select.html(a({
            audiences: b.toJSON()
        }));
        if(this.model) {
            if(this.model.parameter) {
                this.selectParameter(this.model.parameter)
            }
            if(this.model.operator) {
                this.selectOperator(this.model.operator)
            }
        }
        this.$dropdown.dropdown()
    },
    getRules: function() {
        return {
            type: "LIBRARY",
            parameter: this.view.$('select[name="0"]').val()
        }
    }
});
ELM.Audiences.TrafficSource = new Class({
    toString: "TrafficSource",
    extend: ELM.Audiences.AudienceRule,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Audiences.Templates.TrafficSource,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets()
        });
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter"
        }, {
            name: "operator",
            order: 1,
            summaryEl: ".operator"
        }, {
            name: "operand",
            order: 2,
            summaryEl: ".operand"
        }]
    },
    handleDropdownChange: function(a) {
        if(a.currentTarget.name === "0") {
            var b = a.currentTarget.value;
            if(b === "baidu.com" || b === "bing.com" || b === "google.com" || b === "yahoo.com") {
                this.view.$(".step1").addClass("hidden");
                this.view.$(".step2").addClass("hidden");
                this.view.$(".operator").text("");
                this.view.$(".operand").text("");
                F.trigger("steps:changed", 1)
            } else {
                F.trigger("steps:changed", 3)
            }
        }
        if(a.target.value) {
            this.performStepChange(a.target, a.target.name)
        }
    },
    selectParameter: function(e) {
        var b = this.view.$('select[name="0"]');
        var a = b.find("option"),
            d, c;
        a.removeAttr("selected");
        d = a.filter('[value="' + e + '"]');
        c = d.length > 0;
        if(!c) {
            d = a.filter('[value=""]')
        }
        d.attr("selected", true);
        if(e === "baidu.com" || e === "bing.com" || e === "google.com" || e === "yahoo.com") {
            F.trigger("steps:changed", 1)
        } else {
            F.trigger("steps:changed", 3)
        }
        this.performStepChange(b, "0")
    },
    selectOperator: function(e) {
        var b = this.view.$('select[name="1"]');
        var a = b.find("option"),
            d, c;
        a.removeAttr("selected");
        d = a.filter('[value="' + e + '"]');
        c = d.length > 0;
        if(!c) {
            d = a.filter('[value=""]')
        }
        d.attr("selected", true);
        this.performStepChange(b, "1")
    },
    getRules: function() {
        var a = this.view.$('select[name="0"]').val();
        if(a === "baidu.com" || a === "bing.com" || a === "google.com" || a === "yahoo.com") {
            return {
                type: "TRAFFIC_SOURCES",
                parameter: this.view.$('select[name="0"]').val()
            }
        } else {
            return {
                type: "TRAFFIC_SOURCES",
                parameter: this.view.$('select[name="0"]').val(),
                operator: this.view.$('select[name="1"]').val(),
                operands: _.compact(this.view.$("textarea").val().split("\n"))
            }
        }
    }
});
ELM.Audiences.Geo = new Class({
    toString: "Geo",
    extend: ELM.Audiences.AudienceRule,
    View: ELM.Audiences.AudienceRule.prototype.View.extend({
        additionalEvents: {
            "change .parameterSelector": "updateParameter",
            "change .operatorSelector": "updateOperator",
            "change .filters .operandsInput": "updateOperandsFromFilters",
            "change .zipcode": "updateOperandsFromInput",
            "change .latitude": "updateOperandsFromInput",
            "change .longitude": "updateOperandsFromInput"
        }
    }),
    construct: function(b) {
        this.model = new ELM.Model(b.model || this.getDefaultRule());
        this.view = new this.View({
            el: b.el,
            template: ELM.Audiences.Templates.Geo,
            model: this.model,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.renderSummary()
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        var a = this;
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter",
            value: function() {
                var c = a.view.$(".parameterSelector").find(":selected");
                return c.val() ? c.text() : ""
            }
        }, {
            name: "operator",
            order: 1,
            summaryEl: ".operator",
            value: function() {
                var c = a.view.$(".operatorSelector").find(":selected");
                return c.val() ? c.text() : ""
            }
        }, {
            name: "operands",
            order: 2,
            summaryEl: ".operands",
            value: function() {
                var c = a.view.$(".operandsInput").get(0);
                if(c) {
                    if(c.tagName === "SELECT") {
                        return $(c).find(":selected").map(function() {
                            return $(this).val()
                        }).get().join(", ")
                    }
                    if(c.tagName === "TEXTAREA") {
                        return c.value.replace(/[\n\r]/g, a.defaultSeparator)
                    }
                }
                return ""
            }
        }];
        this.totalSteps = 3
    },
    initWidgets: function() {
        this.$invalidOperandsError = this.view.$(".invalidOperandsError");
        this.$countryFilter = this.view.$(".countryLookup");
        this.$stateFilter = this.view.$(".stateLookup");
        this.$cityFilter = this.view.$(".cityLookup");
        this.$metroFilter = this.view.$(".metroLookup");
        if(this.$countryFilter.length) {
            this.initFilter(this.$countryFilter, "countries")
        } else {
            if(this.$stateFilter.length) {
                this.initFilter(this.$stateFilter, "regions")
            } else {
                if(this.$cityFilter.length) {
                    this.initFilter(this.$cityFilter, "cities")
                } else {
                    if(this.$metroFilter.length) {
                        this.initFilter(this.$metroFilter, "metros")
                    }
                }
            }
        }
        this.view.$(".dropdown").dropdown()
    },
    renderSummary: function() {
        for(var a = 0; a < this.totalSteps; a++) {
            this.view.$(this.steps[a].summaryEl).text(this.steps[a].value())
        }
    },
    getRules: function() {
        return this.model.toJSON()
    },
    updateParameter: function(b) {
        var c = b.target.name,
            a = b.target.value;
        this.clearDependentAttributes(this.steps[c].order);
        this.model.set("parameter", a);
        this.updateRuleOnStepChange(c)
    },
    updateOperator: function(b) {
        var c = b.target.name,
            a = b.target.value;
        this.clearDependentAttributes(this.steps[c].order);
        this.model.set("operator", a);
        this.updateRuleOnStepChange(c)
    },
    updateOperandsFromFilters: function(c) {
        var b = $(c.target).closest(".filters"),
            d = b.find("option:selected"),
            a = d.map(function() {
                return $(this).val()
            }).get();
        if(!_.isEqual(a, this.model.get("operands"))) {
            this.model.silentSet("operands", a);
            this.renderSummary();
            this.updateRuleOnStepChange(b.attr("name"))
        }
    },
    updateOperandsFromInput: function(f) {
        var g = $(f.target),
            i = g.data("pattern"),
            a = parseFloat(g.data("min")),
            c = parseFloat(g.data("max")),
            h = _.compact(g.val().split("\n")),
            d = [],
            e = [];
        if(i) {
            _.each(h, function(j) {
                if(j && (new RegExp(i)).test(j)) {
                    e.push(j)
                } else {
                    d.push(j)
                }
            })
        } else {
            if(a && c) {
                _.each(h, function(j) {
                    var k = parseFloat(j);
                    if(k && k >= a && k <= c) {
                        e.push(j)
                    } else {
                        d.push(j)
                    }
                })
            } else {
                e = h
            }
        }
        if(d.length) {
            var b = Granite.I18n.get("Ignored invalid value(s): {0}", d.join(", "));
            this.$invalidOperandsError.text(b).removeClass("hidden")
        } else {
            this.$invalidOperandsError.addClass("hidden")
        }
        g.val(e.join("\n"));
        this.model.silentSet("operands", e);
        this.renderSummary();
        this.updateRuleOnStepChange(f.target.name)
    },
    clearDependentAttributes: function(c) {
        for(var b = c + 1; b < this.totalSteps; b++) {
            var d = this.steps[b].name,
                a = this.getDefaultRule()[d];
            this.model.set(d, a, {
                silent: true
            })
        }
    },
    isComplete: function() {
        for(var b = 0; b < this.totalSteps; b++) {
            if(this.view.$(".step" + b).length) {
                var c = this.steps[b].name;
                var a = this.model.get(c);
                if(!a || (typeof a === "object" && _.size(a) === 0)) {
                    this.markIncomplete();
                    return false
                }
            }
        }
        return true
    },
    initFilter: function(a, c) {
        var b = this;
        this.filter = new CUI.Filters({
            element: a,
            multiple: true,
            infiniteLoad: true,
            options: [],
            autocompleteCallback: function(h, f, g, e) {
                function d() {}
                $.ajax({
                    url: ELM.tntHost + "/admin/rest/v1/geo/" + c,
                    type: "GET",
                    dataType: "jsonp",
                    jsonpCallback: "processResults",
                    jsonp: "jsonpCallback",
                    data: {
                        search: f,
                        callback: "processResults"
                    },
                    success: function(i) {
                        if($.isArray(i)) {
                            h(i)
                        }
                    }
                })
            }
        })
    },
    getDefaultRule: function() {
        return {
            type: "GEO",
            parameter: "",
            operator: "",
            operands: []
        }
    }
});
ELM.Audiences.Mobile = new Class({
    toString: "Mobile",
    extend: ELM.Audiences.AudienceRule,
    View: ELM.Audiences.AudienceRule.prototype.View.extend({
        additionalEvents: {
            "selected .step": "updateConstraint",
            "change .step": "updateConstraint"
        }
    }),
    construct: function(b) {
        var c, a = this;
        this.model = new ELM.Model(b.model || this.getDefaultRule());
        this.view = new this.View({
            el: b.el,
            template: ELM.Audiences.Templates.Mobile,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.renderSummary()
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        this.steps = [{
            name: "parameter",
            order: 0,
            summaryEl: ".parameter",
            value: function() {
                var d = a.view.$(".input-parameter");
                if(d.prop("tagName") === "INPUT") {
                    return d.val()
                }
                return d.find("select").val()
            },
            text: function() {
                var d = a.view.$(".input-parameter");
                if(d.prop("tagName") === "INPUT") {
                    return d.val()
                }
                return d.find(":selected").text()
            }
        }, {
            name: "operator",
            order: 1,
            summaryEl: ".operator",
            value: function() {
                return a.view.$(".input-operator select").val()
            },
            text: function() {
                return a.view.$(".input-operator").find(":selected").text()
            }
        }, {
            name: "operands",
            order: 2,
            summaryEl: ".operands",
            value: function() {
                var d = a.view.$(".input-operands"),
                    e = d.val();
                if(d.hasClass("select")) {
                    e = d.find("select").val()
                }
                if(d.hasClass("lower-value") || d.hasClass("upper-value")) {
                    return [a.view.$(".input-operands.lower-value").val(), a.view.$(".input-operands.upper-value").val()]
                }
                if(typeof e === "string") {
                    e = e.split("\n")
                }
                return _.compact(e)
            },
            text: function() {
                var e = a.view.$(".input-operands"),
                    k = a.view.$(".input-parameter"),
                    h = e.val() || "",
                    g = k.val() || k.find("select").val(),
                    f = ["isMobilePhone", "isTablet", "mobileDevice"].indexOf(g) !== -1,
                    i = g === "mobileOs",
                    d = a.view.$(".input-operands.lower-value").val(),
                    j = a.view.$(".input-operands.upper-value").val();
                if(e.hasClass("select")) {
                    h = e.find("select").val()
                }
                if(e.hasClass("lower-value") || e.hasClass("upper-value")) {
                    h = "";
                    if(d && j) {
                        h = d + Granite.I18n.get(" and ") + j
                    }
                    return h
                }
                if(i) {
                    _.each(h, function(l, m) {
                        h[m] = Handlebars.helpers.getOSValue.call(null, l)
                    })
                } else {
                    if(f && h) {
                        h = (h === "1") ? "true" : "false"
                    }
                }
                if(_.isArray(h)) {
                    return h.join(Granite.I18n.get(" or "))
                }
                return h.replace(/[\n\r]/g, a.defaultSeparator)
            }
        }];
        this.totalSteps = 3;
        c = this.model.get("parameter");
        if(c !== "") {
            this.updateInputOperands(c)
        }
    },
    initWidgets: function() {
        this.$osFilter = this.view.$(".osLookup");
        this.$modelFilter = this.view.$(".modelLookup");
        this.$vendorFilter = this.view.$(".vendorLookup");
        this.$invalidValueError = this.view.$(".invalid-value-error");
        this.view.$(".select").select();
        if(this.$osFilter.length) {
            this.$osFilter.filters()
        } else {
            if(this.$modelFilter.length) {
                this.initFilter(this.$modelFilter, "model")
            } else {
                if(this.$vendorFilter.length) {
                    this.initFilter(this.$vendorFilter, "vendor")
                }
            }
        }
    },
    initFilter: function(a, b) {
        this.filter = new CUI.Filters({
            element: a,
            infiniteLoad: true,
            options: [],
            highlight: true,
            autocompleteCallback: function(f, d, e, c) {
                $.ajax({
                    url: "/apps/mac/target/tnt/search/mobile.at.json?tenantId=" + ELM.client + "&paramName=" + b + "&term=" + d + "&searchType=containsIgnoreCase&limit=100",
                    type: "GET",
                    dataType: "json",
                    success: function(h) {
                        var i = h.results || [],
                            j, g;
                        if(b === "model") {
                            i = _.filter(i, function(k) {
                                k = k.toLowerCase();
                                j = k.indexOf("iphone") === 0;
                                g = k.indexOf("blackberry") !== -1;
                                return k === "iphone" || (!j && !g)
                            })
                        }
                        f(i)
                    }
                })
            }
        })
    },
    renderSummary: function() {
        var b;
        for(var a = 0; a < this.totalSteps; a++) {
            b = this.steps[a].value() && this.steps[a].text();
            if(b) {
                this.view.$(this.steps[a].summaryEl).text(b)
            }
        }
    },
    getRules: function() {
        var b = this.getDefaultRule(),
            a = _.defaults(this.model.toJSON(), b);
        return _.pick(a, _.keys(b))
    },
    isComplete: function() {
        var a, c, d, b;
        if(!this.$invalidValueError.hasClass("hidden")) {
            this.markIncomplete();
            return false
        }
        for(a = 0; a < this.totalSteps; a++) {
            c = this.view.$('.step[data-order="' + a + '"]');
            if(c.length) {
                d = this.steps[a].name;
                b = this.model.get(d);
                if(!b || (typeof b === "object" && _.size(b) === 0)) {
                    this.markIncomplete();
                    return false
                }
            }
        }
        return true
    },
    validateStep: function(c, e) {
        var d = c.data("pattern"),
            b = c.data("error-alert") || Granite.I18n.get("Please enter valid value."),
            f = true,
            a = this.view.$(".input-operands.lower-value").val(),
            g = this.view.$(".input-operands.upper-value").val();
        if(d) {
            e = [].concat(e);
            e = c.hasClass("lower-value") ? [a] : e;
            e = c.hasClass("upper-value") ? [g] : e;
            f = _.every(e, function(h) {
                return(new RegExp(d)).test(h)
            });
            if(a && g && Number(a) >= Number(g)) {
                f = false;
                b = Granite.I18n.get("Please enter a valid range of values")
            }
            if(f) {
                this.$invalidValueError.addClass("hidden")
            } else {
                this.$invalidValueError.text(b).removeClass("hidden")
            }
        }
        return f
    },
    updateConstraint: function(c) {
        var a = $(c.currentTarget),
            b = a.data("order"),
            e = this.steps[b].name,
            d = this.steps[b].value();
        if(d !== this.model.get(e) && this.validateStep(a, d)) {
            if(c.currentTarget.tagName !== "INPUT" || !d) {
                this.resetDependentSteps(b)
            }
            if(e === "parameter") {
                this.updateInputOperands(d);
                this.updateOperator(d)
            }
            this.model.set(e, d);
            this.clearIncompleteMark()
        }
    },
    resetDependentSteps: function(b) {
        var d = this.getDefaultRule(),
            c, a;
        for(a = b + 1; a < this.totalSteps; a++) {
            c = this.steps[a].name;
            this.model.set(c, d[c])
        }
    },
    updateOperator: function(b) {
        var a = ["mobileDevice", "isMobilePhone", "isTablet"];
        if(a.indexOf(b) !== -1) {
            this.model.silentSet("operator", "equals")
        }
    },
    updateInputOperands: function(b) {
        var a = this.getInputOperands(b);
        this.model.unset("inputOperands", {
            silent: true
        });
        if(b) {
            this.model.silentSet("inputOperands", a)
        }
    },
    getInputOperands: function(b) {
        var a = {
            mobileOs: ["osAndroid", "osOsx", "osWindows", "osLinux", "osProprietary", "osRim", "osSymbian"],
            mobileDevice: ["1", "0"],
            isMobilePhone: ["1", "0"],
            isTablet: ["1", "0"]
        };
        return a[b] || ""
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    getDefaultRule: function() {
        return {
            type: "MOBILE",
            parameter: "",
            operator: "",
            operands: []
        }
    }
});
ELM.Audiences.App = new Class({
    toString: "Audiences",
    extend: F.Component,
    options: {
        singly: true,
        visible: true
    },
    View: F.View.extend({
        events: {
            "click .foundation-admin-rail-toggle": "toggleRail",
            "click .createAudience": "createAudience"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            component: this,
            el: a.el,
            template: ELM.Audiences.Templates.App
        }).render();
        this.addComponent(new ELM.Audiences.Index({
            el: this.view.$(".index")
        }), "index");
        this.addComponent(new ELM.Audiences.NewAudience({
            el: this.view.$(".newaudiencedialog"),
            visible: false
        }), "newaudience").on("audience:hide", this.hideAudienceEditor.bind(this)).on("audience:saved", this.updateAudienceList.bind(this));
        this.addComponent(new ELM.Audiences.Editor({
            el: this.view.$(".audienceEditor")
        }), "editor").on("audience:hide", this.hideAudienceEditor.bind(this)).on("audience:saved", this.updateAudienceList.bind(this));
        this.addComponent(new ELM.Notification({
            el: this.view.$("#notification")
        }), "notification");
        this.resizeTimer = null;
        $(window).on("resize", this.handleWindowResize.bind(this))
    },
    createAudience: function(a) {
        ELM.Audiences.router.navigate("#new", {
            trigger: true
        })
    },
    newAudience: function() {
        this.components.newaudience.show({
            model: new ELM.Models.Audience()
        })
    },
    toggleRail: function(b) {
        var a = $(b.currentTarget).data("target");
        $(a).toggle(), content = $("#content");
        content.toggleClass("expand");
        content.hasClass("expand") ? $(b.currentTarget).attr("title", Granite.I18n.get("Open left panel")) : $(b.currentTarget).attr("title", Granite.I18n.get("Close left panel"))
    },
    updateAudienceList: function(a) {
        ELM.Audiences.router.navigate("", {
            trigger: true
        });
        this.index.audienceList.updateList()
    },
    hideAudienceEditor: function() {
        ELM.Audiences.router.navigate("", {
            trigger: true
        })
    },
    performAudienceAction: function(d, b, c) {
        var a;
        if(b) {
            a = new ELM.Models.Audience({
                id: d
            });
            this.fetchAudience(a, c)
        } else {
            a = this.index.audienceList.collection.get(d);
            if(typeof a === "undefined") {
                a = new ELM.Models.Audience({
                    id: d
                });
                this.fetchAudience(a, c)
            } else {
                c(a)
            }
        }
    },
    fetchAudience: function(b, c) {
        var a = this;
        b.fetch({
            success: function(d) {
                c(d)
            },
            error: function() {
                var d = Granite.I18n.get("Audience not shown due to network error.");
                a.index.showAudiencesErrorNotification(d)
            }
        })
    },
    editAudience: function(a) {
        this.editor.showEditor({
            model: a
        })
    },
    handleWindowResize: function(a) {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(this.triggerWindowResizeEvent, 100)
    },
    triggerWindowResizeEvent: function() {
        F.trigger("window:resize")
    }
});
ELM.Notification = new Class({
    toString: "Notification",
    extend: F.Component,
    View: F.View.extend({
        events: {
            "click .close": "hideNotification"
        }
    }),
    construct: function(a) {
        $(document.body).append(a.el);
        this.view = new this.View({
            component: this,
            el: a.el,
            template: ELM.Templates.Notification
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        });
        this.registerVars();
        this.registerBinders();
        this.registerGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.showInfoAlert);
        this.bind(this.showErrorAlert);
        this.bind(this.showNoticeAlert);
        this.bind(this.showSuccessAlert);
        this.bind(this.showHelpAlert);
        this.bind(this.showWaitAlert)
    },
    initializeWidgets: function() {
        this.$notificationAlert = this.view.$(".notificationAlert");
        this.$header = this.$notificationAlert.find(".notificationHeader");
        this.$notification = this.$notificationAlert.find(".notificationMessage")
    },
    registerVars: function() {
        this.updateInfoProcessId = null
    },
    registerGlobalTriggers: function() {
        F.on("infoNotification", this.showInfoAlert);
        F.on("errorNotification", this.showErrorAlert);
        F.on("noticeNotification", this.showNoticeAlert);
        F.on("successNotification", this.showSuccessAlert);
        F.on("helpNotification", this.showHelpAlert);
        F.on("waitNotification", this.showWaitAlert)
    },
    showInfoAlert: function(a) {
        this.showAlert("info", a)
    },
    showErrorAlert: function(a) {
        this.showAlert("error", a)
    },
    showNoticeAlert: function(a) {
        this.showAlert("notice", a)
    },
    showSuccessAlert: function(a) {
        this.showAlert("success", a)
    },
    showHelpAlert: function(a) {
        this.showAlert("help", a)
    },
    showWaitAlert: function(a) {
        this.showAlert("waiting", a)
    },
    showAlert: function(d, b) {
        var f = b.message,
            h = b.heading || "",
            c = b.className || "",
            g = b.duration || 5000,
            a, e = this;
        if(!f) {
            return
        }
        this.view.show();
        a = this.$notificationAlert.attr("data-class") || "";
        this.$notificationAlert.removeClass(a).addClass(c).attr("data-class", c);
        if(!this.$notificationAlert.hasClass(d)) {
            this.$notificationAlert.removeClass("success error notice info help waiting").addClass(d)
        }
        this.$header.text(h);
        this.$notification.empty().html(ELM.Util.escape(f));
        if(!this.updateInfoProcessId) {
            this.$notificationAlert.fadeIn()
        } else {
            if(this.$notificationAlert.is(":visible")) {
                this.$notification.hide().fadeIn()
            } else {
                this.$notificationAlert.fadeIn()
            }
            clearTimeout(this.updateInfoProcessId);
            this.updateInfoProcessId = null
        }
        if(typeof g === "number") {
            this.updateInfoProcessId = setTimeout(function() {
                e.$notificationAlert.fadeOut(function() {
                    e.updateInfoProcessId = null
                })
            }, g)
        }
    },
    hideNotification: function(a) {
        a.stopPropagation();
        this.view.hide()
    }
});
ELM.Sorter = new Class({
    extend: F.Component,
    options: {
        visible: true
    },
    View: F.View.extend({
        events: {
            "change select": "triggerSortEvent",
            "click .sortButton": "changeSortOrientation"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            model: a.model,
            component: this,
            template: ELM.Templates.Sorter
        }).render();
        this.view.$("select").dropdown()
    },
    getSortBy: function() {
        return this.view.$el.find("select").val()
    },
    getSortOrder: function() {
        if(this.getSortBy() === "jcr:title") {
            return this.view.$el.find(".sortButton").hasClass("icon-arrowup") ? ELM.SortOrderEnum.DESCENDING : ELM.SortOrderEnum.ASCENDING
        }
        return this.view.$el.find(".sortButton").hasClass("icon-arrowup") ? ELM.SortOrderEnum.ASCENDING : ELM.SortOrderEnum.DESCENDING
    },
    changeSortOrientation: function(a) {
        $(a.currentTarget).toggleClass("icon-arrowdown icon-arrowup");
        $(a.currentTarget).hasClass("icon-arrowup") ? $(a.currentTarget).attr("title", Granite.I18n.get("Ascending")) : $(a.currentTarget).attr("title", Granite.I18n.get("Descending"));
        this.triggerSortEvent()
    },
    triggerSortEvent: function() {
        F.trigger(this.view.$("select").attr("name") + ":change", this.getSortBy(), this.getSortOrder())
    }
});
ELM.Searcher = new Class({
    toString: "searcher",
    extend: F.Component,
    View: F.View.extend({
        events: {
            "keyup .searchField": "triggerSearchEvent",
            "click .clearSearch": "clear",
            "click li": "updateSearchByAndTriggerSearch"
        }
    }),
    options: {
        visible: true,
        searchTimeout: 300
    },
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            model: a.model,
            template: ELM.Templates.Searcher
        }).render();
        this.registerVars();
        if(a.model) {
            this.initWidgetAndSetPlaceholderText(a.model.options)
        }
    },
    registerVars: function() {
        this.$clearSearchElement = this.view.$(".clearSearch");
        this.$searchInputElement = this.view.$(".searchField");
        this.$pulldown = this.view.$(".pulldown");
        this.searchProcessId = null;
        this.searchBy = "search"
    },
    initWidgets: function() {
        this.$pulldown.pulldown()
    },
    initWidgetAndSetPlaceholderText: function(b) {
        this.initWidgets();
        var a = b.length;
        while(--a >= 0) {
            if(b[a].selected) {
                break
            }
        }
        if(a >= 0) {
            this.updateInputElementPlaceholderText(a)
        }
    },
    triggerSearchEvent: function(a) {
        var b = 27;
        if(this.searchProcessId) {
            clearTimeout(this.searchProcessId)
        }
        if(a.keyCode === b || a.which === b) {
            $(a.currentTarget).blur();
            a.currentTarget.value = ""
        }
        this.searchProcessId = setTimeout(this.bind(function() {
            this.triggerChangeSearchEvent(a.currentTarget.value)
        }), this.options.searchTimeout)
    },
    updateClearElement: function(a) {
        if(a) {
            this.showClearElement()
        } else {
            this.hideClearElement()
        }
    },
    showClearElement: function() {
        this.$clearSearchElement.removeClass("hidden")
    },
    hideClearElement: function() {
        this.$clearSearchElement.addClass("hidden")
    },
    clear: function() {
        this.hideClearElement();
        this.$searchInputElement.val("");
        this.triggerChangeSearchEvent("")
    },
    triggerChangeSearchEvent: function(b) {
        var a = b.replace(/^\s+|\s+$/g, "");
        this.updateClearElement(a);
        this.trigger("search:changed", a, this.searchBy)
    },
    updateSearchByAndTriggerSearch: function(b) {
        b.stopPropagation();
        var c = $(b.currentTarget),
            a = this.$searchInputElement.val();
        this.view.$el.find(".selected").removeClass("selected");
        c.addClass("selected");
        this.searchBy = c.data("search-param");
        this.$pulldown.data("pulldown").togglePopover();
        this.updateInputElementPlaceholderText(this.getSearchOptionRow(b).index());
        if(a) {
            this.triggerChangeSearchEvent(a)
        }
    },
    updateInputElementPlaceholderText: function(b) {
        var a = this.view.model.options[b].placeholder,
            c = this.view.model.options[b].value;
        if(a) {
            this.$searchInputElement.attr("placeholder", a)
        }
        if(c) {
            this.searchBy = c
        }
    },
    getSearchOptionRow: function(a) {
        return $(a.currentTarget).closest("li")
    }
});
ELM.ModalPicker = new Class({
    toString: "ModalPicker",
    extend: F.Component,
    Template: Handlebars.compile(['<div class="modal-header">', "<h2>{{heading}}</h2>", '<button type="button" class="close" data-dismiss="modal">&times;</button>', "</div>", '<div class="modal-body">', '<ul class="list modal-picker-list">', "{{#if isGrouped}}", "{{#each items}}", '<li class="list-item-header">{{toUpperCase group}}</li>', "{{#each items}}", '<li class="list-item {{#hasValue ../../defaultSelected id}}selected{{/hasValue}}" data-type="{{type}}" data-id="{{id}}" data-source="{{source}}">{{[jcr:title]}}</li>', "{{/each}}", "{{/each}}", "{{else}}", "{{#each items}}", '<li class="list-item {{#hasValue ../defaultSelected id}}selected{{/hasValue}}" data-type="{{type}}" data-id="{{id}}" data-source="{{source}}">{{[jcr:title]}}</li>', "{{/each}}", "{{/if}}", "</ul>", "</div>", '<div class="modal-footer">', '<button data-dismiss="modal" class="cancel-button">{{cancelButtonName}}</button>', '<button data-dismiss="modal" class="primary disabled done-button" disabled>{{selectButtonName}}</button>', "</div>"].join("")),
    View: F.View.extend({
        events: {
            "click .list-item": "updateSelectedItem",
            beforehide: "handleModalDismissal",
            "click .done-button": "triggerEventForItemsSelected"
        }
    }),
    construct: function(a) {
        a = a || {};
        this.viewTemplate = a.Template || this.Template;
        this.multiSelectMode = a.multiSelectMode || false;
        this.model = new ELM.Model(_.extend({}, this.getDefaultModelData(), a.data));
        this.view = new this.View({
            component: this,
            el: a.el,
            template: this.viewTemplate,
            model: this.model
        }).render();
        this.listenTo(this.view, "renderComplete", function() {
            this.trigger("picker:rendered")
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        this.on("items:loaded", this.setItems.bind(this))
    },
    getDefaultModelData: function() {
        return {
            heading: Granite.I18n.get("Select an item"),
            items: [],
            cancelButtonName: Granite.I18n.get("Cancel"),
            selectButtonName: Granite.I18n.get("Select"),
            isGrouped: false
        }
    },
    setItems: function(a) {
        this.model.set("items", a)
    },
    updateSelectedItem: function(a) {
        var c = $(a.currentTarget),
            b = this.getAllSelectedItems();
        if(!this.multiSelectMode) {
            b.removeClass("selected")
        }
        c.toggleClass("selected");
        b = this.getAllSelectedItems();
        if(b.length > 0) {
            this.view.$(".done-button").removeClass("disabled");
            this.view.$(".done-button").prop("disabled", false)
        } else {
            this.view.$(".done-button").addClass("disabled");
            this.view.$(".done-button").prop("disabled", true)
        }
        this.trigger("item:clicked", c.data("id"))
    },
    getAllSelectedItems: function() {
        return this.view.$("li.selected")
    },
    triggerEventForItemsSelected: function(a) {
        var b = this.view.$("li.selected"),
            c = [];
        c = _.map(b, function(d) {
            return $(d).data("id")
        });
        this.model.silentSet("selectedItemsIds", c);
        this.trigger("items:selected", this.multiSelectMode ? c : c[0])
    },
    handleModalDismissal: function(a) {
        var c = this.model.get("selectedItemsIds") || this.model.get("defaultSelected"),
            b = this;
        setTimeout(function() {
            b.resetSelectedItems(c)
        }, 1000)
    },
    resetSelectedItems: function(a) {
        this.getAllSelectedItems().removeClass("selected");
        _.each(a, function(b) {
            this.view.$("li[data-id=" + b + "]").addClass("selected")
        }, this)
    }
});
ELM.ReportSuitePicker = new Class({
    toString: "ReportSuitePicker",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "selected .select": "triggerReportSuiteSelectedEvent"
        }
    }),
    Model: ELM.Model.extend({
        url: "/apps/mac/target/sc/rs.at.json?path=dms&depth=1"
    }),
    construct: function(a) {
        this.model = new this.Model({
            url: this.url,
            selectedReportSuite: a.selected
        });
        this.view = new this.View({
            el: a.el,
            component: this,
            model: this.model,
            template: ELM.Activities.Templates.ReportSuitePicker
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        });
        this.listenTo(this.model, "change", this.render.bind(this));
        this.fetchReportSuites()
    },
    initializeWidgets: function() {
        this.view.$(".select").select()
    },
    updateSelection: function(a) {
        this.model.set("selectedReportSuite", a)
    },
    fetchReportSuites: function() {
        var a = this,
            b;
        this.model.fetch({
            success: function(d, c) {
                if(c.errmsg) {
                    b = c.errmsg || "";
                    a.showErrorNotification(Granite.I18n.get("Unable to load report suites from Adobe Analytics. {0}", b))
                } else {
                    a.updateReportSuites(c)
                }
            },
            error: function(c, d) {
                b = JSON.parse(d.responseText)["error.message"] || "";
                a.showErrorNotification(Granite.I18n.get("Unable to load report suites from Adobe Analytics. {0}", b))
            }
        })
    },
    triggerReportSuiteSelectedEvent: function(a) {
        this.trigger("reportSuite:selected", a.selected)
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a
        })
    },
    updateReportSuites: function(a) {
        this.model.set("reportSuites", a)
    }
});
ELM.ProgressBar = new Class({
    toString: "ProgressBar",
    extend: F.Component,
    View: F.View,
    Template: Handlebars.compile(['<div class="progress">', '<div class="bar"></div>', "</div>"].join("")),
    construct: function(a) {
        this.view = new this.View({
            component: this,
            el: a.el,
            template: this.Template
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        })
    },
    initializeWidgets: function() {
        this.$progressBar = this.view.$(".bar")
    },
    start: function(a) {
        this.stop(true);
        this.animate(a)
    },
    stop: function(a) {
        if(a) {
            this.$progressBar.stop().width(0)
        } else {
            this.$progressBar.stop();
            this.animate(500)
        }
    },
    animate: function(b) {
        var a = this;
        this.$progressBar.animate({
            width: "100%"
        }, {
            duration: b,
            complete: function() {
                a.triggerCompleteEvent()
            }
        })
    },
    triggerCompleteEvent: function() {
        this.trigger("complete")
    },
});
ELM.SlidingPanel = new Class({
    toString: "SlidingPanel",
    defaults: {
        backdrop: "static",
        visible: true,
        attachToBody: true
    },
    Template: Handlebars.compile(['<div class="sliding-panel">', '<div class="sliding-panel-header"></div>', '<div class="sliding-panel-body"></div>', "</div>"].join("")),
    construct: function(a) {
        this.options = $.extend(true, this.defaults, a);
        if(!a.el || a.el.children().length === 0) {
            a.el = $(this.Template())
        }
        this.$element = a.el;
        this.$element.addClass("sliding-panel");
        this.header = this.$element.find(".sliding-panel-header");
        this.body = this.$element.find(".sliding-panel-body");
        this.previousFocus = $();
        this.backdrop = $("<div/>", {
            "class": "sliding-panel-backdrop",
            style: "display: none;"
        }).fipo("tap", "click", function(b) {
            if(this.options.backdrop !== "static") {
                this.hide()
            }
        }.bind(this));
        if(this.options.visible) {
            this.options.visible = false;
            this.show()
        }
        this.$element.fipo("tap", "click", '[data-dismiss="sliding-panel"]', this.hide.bind(this));
        this.makeAccessible()
    },
    makeAccessible: function() {
        var a = this,
            b = "sliding-panel-header" + new Date().getTime() + "-";
        this.$element.attr({
            role: "dialog",
            "aria-hidden": !this.options.visible,
            "aria-labelledby": b + "label",
            "aria-describedby": b + "message",
            tabindex: -1
        });
        this.header.attr({
            id: b + "label",
            tabindex: 0
        });
        this.body.attr({
            id: b + "message",
            role: "document",
            tabindex: 0
        });
        this.$element.on("keydown", ":focusable", function(e) {
            var d = $(e.currentTarget),
                c = a.$element.find(":tabbable"),
                f;
            switch(e.which) {
                case 9:
                    if(e.shiftKey && e.currentTarget === c[0]) {
                        f = c.last()
                    } else {
                        if(!e.shiftKey && e.currentTarget === c[c.length - 1]) {
                            f = c.first()
                        }
                    }
                    break
            }
            if(f) {
                e.preventDefault();
                f.trigger("focus")
            }
        })
    },
    show: function() {
        var a = $("body"),
            c, b = this;
        this.previousFocus = $(":focus");
        this.previousFocus.trigger("blur");
        a.addClass("sliding-panel-open");
        this.toggleBackdrop(true);
        if(this.options.attachToBody) {
            if(this.$element.parent("body").length === 0) {
                this.$element.appendTo(a)
            }
            this.$element.siblings("[aria-hidden]").each(function(d, e) {
                $(e).data("aria-hidden", $(e).attr("aria-hidden"))
            });
            this.$element.siblings().not("script, link, style").attr("aria-hidden", this.options.visible)
        }
        this.$element.attr("aria-hidden", !this.options.visible);
        this.$element.removeClass("vertical-slide-left").addClass("vertical-slide-right");
        this.$element.show();
        this.$element.find(":tabbable:not(.modal-header .close):first").focus();
        this.options.visible = true;
        $(document).on("keydown.sliding-panel-escape", this.escapeKeyHandler.bind(this));
        return this
    },
    hide: function() {
        $("body").removeClass("sliding-panel-open");
        $(document).off("keydown.sliding-panel-escape");
        this.toggleBackdrop(false);
        this.$element.attr("aria-hidden", !this.options.visible);
        this.$element.siblings().removeAttr("aria-hidden").filter(':data("aria-hidden")').each(function(a, b) {
            $(b).attr("aria-hidden", $(b).data("aria-hidden")).removeData("aria-hidden")
        });
        this.$element.removeClass("vertical-slide-right").addClass("vertical-slide-left");
        setTimeout(function() {
            this.$element.hide();
            this.$element.trigger("sliding-panel:hidden")
        }.bind(this), 480);
        this.previousFocus.trigger("focus");
        this.options.visible = false;
        return this
    },
    toggleBackdrop: function(b) {
        if(!this.options.backdrop) {
            return
        }
        var a = $("body");
        if((b || this.backdrop.is(":hidden")) && b !== false) {
            this.backdrop.appendTo(a).fadeIn()
        } else {
            this.backdrop.fadeOut(600, function() {
                $(this).detach()
            })
        }
    },
    escapeKeyHandler: function(a) {
        if(a.which === 27) {
            this.$element.trigger("keypressed:escape")
        }
    }
});
ELM.Util = {
    PANEL_MESSAGE_POSITION: "pos-l-34-imp pos-t-3-1",
    clone: function(d) {
        var e, c, b;
        if(null == d || "object" != typeof d) {
            return d
        }
        if(d instanceof Date) {
            e = new Date();
            e.setTime(d.getTime());
            return e
        }
        if(d instanceof Array) {
            e = [];
            b = d.length;
            for(c = 0; c < b; c += 1) {
                e[c] = this.clone(d[c])
            }
            return e
        }
        if(d instanceof Object) {
            e = {};
            for(var a in d) {
                if(d.hasOwnProperty(a)) {
                    e[a] = this.clone(d[a])
                }
            }
            return e
        }
        throw new Error("Unable to copy obj! Its type isn't supported.")
    },
    addProtocolToUrl: function(a) {
        var b = /^(https?:\/\/)/;
        if(a && !b.test(a)) {
            a = "http://" + a
        }
        return a
    },
    isUrlValid: function(c, a) {
        var b = c.val().trim();
        if(!b || (a.length)) {
            return false
        }
        return true
    },
    UrlValidationRegex: new RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))?)(?::\\d{2,5})?(?:/[^\\s]*)?$", "i"),
    UrlValidationWithoutProtocolRegex: new RegExp("^(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))?)(?::\\d{2,5})?(?:/[^\\s]*)?$", "i"),
    getActualCSS: function(b, c) {
        var d = b.clone().attr("id", false),
            a;
        d.css({
            visibility: "hidden",
            display: "block",
            position: "absolute"
        }).appendTo("body");
        a = d.css(c);
        d.remove();
        return a
    },
    getCompleteResourcePath: function(a) {
        return "/target/" + ELM.client + "/target" + a
    },
    sendGETRequest: function(a) {
        return $.ajax({
            url: a.url,
            async: (typeof a.async == "undefined") ? true : a.async,
            type: "GET"
        })
    },
    isInteger: function(a) {
        return a.match(/^\d+$/)
    },
    isFloat: function(a) {
        return a.match(/^\d*.?\d+$/)
    },
    showConfirmationDialog: function(a, b) {
        a.set({
            heading: b.heading,
            content: b.message,
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: function(c) {
                    c.dialog.hide()
                }.bind(this)
            }, {
                label: b.label,
                className: "primary",
                click: function(c) {
                    b.callback();
                    c.dialog.hide()
                }.bind(this)
            }]
        }).show()
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a.message,
            heading: a.heading || Granite.I18n.get("ERROR"),
            className: a.className
        })
    },
    showSuccessNotification: function(a) {
        F.trigger("successNotification", {
            message: a.message,
            heading: a.heading,
            className: a.className
        })
    },
    showNoticeNotification: function(a) {
        F.trigger("noticeNotification", {
            message: a.message,
            heading: a.heading,
            className: a.className
        })
    },
    showInfoNotification: function(a) {
        F.trigger("infoNotification", {
            message: a.message,
            heading: a.heading,
            className: a.className
        })
    },
    hasArrayDuplicates: function(a) {
        return _.unique(a).length !== a.length
    },
    trimArrayValues: function(b) {
        var c = [],
            a = 0;
        if(!_.isArray(b)) {
            return b
        }
        _.each(b, function(d) {
            if(d.trim()) {
                c[a++] = d
            }
        });
        return c
    },
    hasStringWhiteSpaces: function(a) {
        return(_.isString(a) && /\s/g.test(a))
    },
    getFragment: function(d) {
        var a = document.createElement("div"),
            b = document.createDocumentFragment(),
            c;
        a.innerHTML = d;
        for(c = a.childNodes.length - 1; c >= 0; c -= 1) {
            b.insertBefore(a.childNodes[c], b.firstChild)
        }
        return b
    },
    hasChanged: function(e, d, b) {
        var a, c;
        b = b || {};
        b.ignoreKeys = b.ignoreKeys || [];
        b.ignoreKeysOfArrayElements = b.ignoreKeysOfArrayElements || {};
        b.ignoreKeysOfObjectElements = b.ignoreKeysOfObjectElements || {};
        if(_.isObject(d)) {
            _.each(b.ignoreKeys, function(f) {
                d[f] = e.get(f)
            });
            _.each(b.ignoreKeysOfArrayElements, function(g, f) {
                a = e.get(f) || [];
                _.each(a, function(h, i) {
                    _.each(g, function(j) {
                        if(h.hasOwnProperty(j) && d[f] && d[f][i]) {
                            d[f][i][j] = a[i][j]
                        }
                    })
                })
            });
            _.each(b.ignoreKeysOfObjectElements, function(g, f) {
                c = e.get(f) || {};
                _.each(g, function(h) {
                    if(c.hasOwnProperty(h) && d[f]) {
                        d[f][h] = c[h]
                    }
                })
            });
            return !_.isEqual(d, e.toJSON())
        }
        return true
    },
    updateSelectWidget: function(a, b) {
        if(b) {
            a.find("select").val(b)
        }
        a.find("ul").remove();
        a.removeData("select").select()
    },
    escape: function(a) {
        return Handlebars.Utils.escapeExpression(a)
    },
    compareURLs: function(d, c, b) {
        var b = b || {},
            a = function(e) {
                var f = e[e.length - 1];
                while(["/", "#"].indexOf(f) !== -1) {
                    e = e.substring(0, e.length - 1);
                    f = e[e.length - 1]
                }
                return e
            };
        if(b.strict) {
            return d === c
        }
        if(b.similar) {
            return a(d) === a(c)
        }
        return d == c
    },
    escapeHTMLAttributes: function(a) {
        a = a || "";
        return a.replace(/(\?|=|#|:|\.|\[|\]|\/)/g, "\\$1")
    },
    convertCurrencyStringToInteger: function(b) {
        var a = /[^0-9]+/g;
        return Number(b.replace(a, ""))
    },
    getResolutionFromDates: function(a, d) {
        var f = 86400000,
            b = (moment(d) - moment(a)) / f,
            e = 3,
            c = 100;
        if(b <= e) {
            return "hour"
        }
        if(b <= c) {
            return "day"
        }
        return "week"
    }
};
(function(a) {
    a.IndexedName = function b(e) {
        var d;

        function c(f) {
            if(!f || typeof f !== "string") {
                return void 0
            }
            return new RegExp(f + "(\\d+)$")
        }
        if(e) {
            d = c(e)
        }
        return {
            toString: function() {
                return "IndexedName"
            },
            setPrefix: function(f) {
                d = c(f)
            },
            getLastUsedIndex: function(g) {
                var f = [0];
                if(_.isUndefined(d)) {
                    throw new TypeError(this.toString() + ": regexp is not set")
                }
                if(!_.isArray(g)) {
                    throw new TypeError(this.toString() + ": param provided is not an Array object")
                }
                _.each(g, function h(i) {
                    if(i.match(d)) {
                        f.push(parseInt(i.replace(d, "$1"), 10))
                    }
                });
                return Math.max.apply(null, f)
            }
        }
    }
})(ELM.Strategy);
ELM.EditableLabel = new Class({
    toString: "EditableLabel",
    extend: F.ModelComponent,
    Template: Handlebars.compile(['<div class="editable-label-container">', "<span>{{#if title}}{{title}}{{else}}{{placeholder}}{{/if}}</span>", '<input type="text" {{#if placeholder}}placeholder="{{placeholder}}"{{/if}} value="{{title}}" maxlength="{{maxlength}}" {{#equals isViewMode true}}disabled{{/equals}}/>', '{{#notEquals isViewMode true}}<button type="button" class="icon-edit"></button>{{/notEquals}}', "</div>"].join("")),
    View: F.View.extend({
        events: {
            "click .icon-edit": "switchToEditMode",
            "click span": "switchToEditMode",
            "focusin input": "removeError",
            "focusout input": "switchToReadOnlyMode",
            "keyup input": "switchToReadOnlyMode"
        }
    }),
    construct: function(a) {
        if(a.model && typeof a.model.required === "undefined") {
            a.model.required = true
        }
        this.loadModel(a.model);
        this.initView(a);
        this.registerListeners();
        this.render();
        this.registerBinders()
    },
    loadModel: function(a) {
        this.load(new ELM.Model(a || this.defaultLabelModel()))
    },
    initView: function(a) {
        var b = a.Template || this.Template;
        this.view = new this.View({
            component: this,
            el: a.el,
            model: this.model,
            template: b
        })
    },
    registerBinders: function() {
        this.bind(this.handleRenderComplete)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete)
    },
    handleRenderComplete: function() {
        this.cacheSelectors()
    },
    cacheSelectors: function() {
        this.$input = this.view.$("input");
        this.$labelContainer = this.view.$(".editable-label-container")
    },
    switchToEditMode: function(a) {
        if(this.model.get("isViewMode")) {
            return
        }
        this.$labelContainer.addClass("edit-mode");
        this.$input.focus()
    },
    switchToReadOnlyMode: function(b) {
        var c = 13,
            a = this.model.get("required"),
            d = b.target.value.trim();
        if(b.type == "keyup" && !(b.keyCode === c)) {
            return
        }
        this.trigger("change", {
            value: d
        });
        if(a && !d) {
            this.addError();
            return
        }
        this.removeError();
        this.$labelContainer.removeClass("edit-mode");
        this.model.set("title", d)
    },
    removeError: function() {
        this.$input.removeClass("error")
    },
    addError: function() {
        this.$input.addClass("error")
    },
    defaultLabelModel: function() {
        return {
            title: Granite.I18n.get("Untitled"),
            required: true,
            maxlength: 250
        }
    }
});
ELM.DropDownList = new Class({
    toString: "DropDownList",
    extend: CUI.DropdownList,
    _render: function() {
        var b = this.options.options,
            e;
        if(b.length === 0) {
            return
        }
        var d = $("<ul></ul>");
        if(this.options.cssClass) {
            d.addClass(this.options.cssClass)
        }
        $.each(b, function(h, j) {
            var i = (this.options.optionRenderer) ? this.options.optionRenderer(h, j) : $("<span>" + j.toString() + "</span>");
            var f = $('<li data-id="' + h + '">');
            if(h === this.currentIndex) {
                f.addClass("selected")
            }
            var g = this.options.getOptionClassAttribute ? this.options.getOptionClassAttribute(h) : undefined;
            if(g) {
                f.addClass(g)
            }
            f.append(i);
            d.append(f)
        }.bind(this));
        d.on("click", "li:not(.loading-indicator)", function(f) {
            f.preventDefault();
            this._triggerSelect($(f.target).closest("li").attr("data-id"), f)
        }.bind(this));
        var c = (this.options.positioningElement) ? this.options.positioningElement : this.$element;
        var a = $('<div class="dropdown-list target-dropdown">');
        a.append(d);
        this.listElement = d = a;
        d.css({
            top: 0,
            left: 0,
            visibility: "hidden",
            display: "block"
        }).appendTo(c.parent(".dropdown-container"));
        if(!this.options.noWidth) {
            d.css("width", c.outerWidth(false) + "px")
        }
        e = this._calcPosition();
        d.css({
            top: e.top + "px",
            left: e.left + "px",
            visibility: "visible"
        });
        this.containerElement.addClass("dropdown-visible");
        d.on("scroll", "", function(f) {
            this._listScrolled()
        }.bind(this));
        d.on("mousedown", "", function(f) {
            f.preventDefault();
            f.stopPropagation()
        }.bind(this));
        d.on("focusin", "", function(f) {
            this.preventHiding = true
        }.bind(this));
        d.on("focusout", "", function(f) {
            this.preventHiding = false;
            this.$element.trigger("blur")
        }.bind(this));
        this.options.visible = true
    },
    _calcPosition: function() {
        var e = (this.options.positioningElement) ? this.options.positioningElement : this.$element,
            b = e.offset().top,
            d = e.offset().top - this.listElement.outerHeight(),
            h = {
                left: e.offset().left,
                top: b
            },
            a = b + this.listElement.outerHeight() - $(window).scrollTop() < $(window).height(),
            c = d > $(window).scrollTop(),
            f = b + this.listElement.outerHeight() < $(document).height(),
            g = d > 0;
        h.top = (this.options.position === "above") ? d : b;
        if(this.options.autoPosition) {
            if(this.options.position === "above" && !c) {
                h.top = (a || (!g && f)) ? b : d
            } else {
                if(this.options.position === "below" && !a) {
                    h.top = (c || (!f && g)) ? d : b
                }
            }
        }
        return h
    }
});
ELM.AutoComplete = new Class({
    toString: "AutoComplete",
    extend: CUI.Filters,
    construct: function(a) {
        this.selectedIndices = [];
        this.createdIndices = [];
        if(!this.options.autocompleteCallback) {
            this.options.autocompleteCallback = this._defaultAutocompleteCallback.bind(this)
        } else {
            this.usingExternalData = true
        }
        if(!this.options.optionRenderer) {
            this.options.optionRenderer = CUI.Filters.defaultOptionRenderer
        }
        this._readDataFromMarkup();
        if(this.options.stacking) {
            this.options.multiple = true
        }
        this._render();
        if(this.options.optionDisplayStrings.length > this.options.options.length) {
            this.options.optionDisplayStrings = this.options.optionDisplayStrings.slice(0, this.options.options.length)
        }
        while(this.options.optionDisplayStrings.length < this.options.options.length) {
            this.options.optionDisplayStrings.push(this.options.options[this.options.optionDisplayStrings.length])
        }
        this.dropdownList = new ELM.DropDownList({
            element: this.inputElement,
            positioningElement: (this.options.stacking) ? this.$element : this.inputElement,
            position: this.options.position,
            autoPosition: this.options.autoPosition,
            cssClass: "autocomplete-results"
        });
        this._addEventListeners()
    },
    _render: function() {
        var a;
        if(this.$element.get(0).tagName === "SELECT") {
            a = $("<div></div>");
            this.$element.after(a);
            this.$element.detach();
            a.append(this.$element);
            this.$element = a
        }
        if(this.$element.get(0).tagName === "INPUT") {
            a = $("<div></div>");
            this.$element.after(a);
            this.$element.detach();
            a.prepend(this.$element);
            this.$element = a
        }
        if(this.$element.find("select option").length > 0 && this.options.options.length === 0) {
            this.options.options = [];
            this.options.optionDisplayStrings = [];
            this.$element.find("select option").each(function(b, c) {
                this.options.options.push($(c).val());
                this.options.optionDisplayStrings.push($.trim($(c).text()));
                if($(c).attr("selected")) {
                    this.selectedIndices.push(b);
                    this.selectedIndex = b
                }
            }.bind(this))
        }
        this._createMissingElements();
        this.syncSelectElement = this.$element.find("select");
        this.inputElement = this.$element.find("input");
        this.$element.addClass("filters");
        this.$element.addClass("target-filters");
        this.$element.removeClass("focus");
        if(!this.options.placeholder) {
            this.options.placeholder = this.inputElement.attr("placeholder")
        }
        if(this.options.name) {
            this.syncSelectElement.attr("name", this.options.name)
        }
        if(this.options.stacking) {
            this.$element.addClass("stacking")
        } else {
            this.$element.removeClass("stacking")
        }
        this._update()
    },
    _showAutocompleter: function(c) {
        this.dropdownList.hide();
        if(!this.inputElement.is(":focus")) {
            return
        }
        if(this.options.multiple) {
            var b = [];
            $.each(c, function(e, d) {
                var f = $.inArray(d, this.options.options);
                if(this.selectedIndices.indexOf(f) >= 0) {
                    return
                }
                b.push(d)
            }.bind(this));
            c = b
        }
        if(c.length === 0) {
            return
        }
        var a = function(d, e) {
            return(this.options.optionRenderer.bind(this))(d, e, this.options.highlight, !$.isEmptyObject(this.options.icons))
        };
        this.dropdownList.set("optionRenderer", a.bind(this));
        this.dropdownList.set("options", c);
        this.dropdownList.show()
    }
});
ELM.Search = ELM.Search || {};
ELM.Search.Editor = new Class({
    toString: "Editor",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .create-item": "saveModelAndCloseEditor",
            "click .close-editor": "closeEditor"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.registerVars(a)
    },
    registerBinders: function() {
        this.bind(this.updateTitle);
        this.bind(this.updateView);
        this.bind(this.escapeKeyHandler)
    },
    registerVars: function(a) {
        a = a || {};
        this.slidingPanelMode = !_.isUndefined(a.slidingPanelMode) ? a.slidingPanelMode : true
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.$waitOverlay = this.view.$(".overlay");
            this.initWidgets();
            this.addSubComponents();
            this.updateView()
        })
    },
    initWidgets: function() {
        if(this.slidingPanelMode && !this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            });
            this.slidingPanel.$element.on("keypressed:escape", this.escapeKeyHandler)
        }
        this.view.$(".select").select()
    },
    addSubComponents: function() {},
    refreshAttributesIfRequired: function(a, b) {
        var c = this;
        if(a.selected === "REFRESH_ATTRIBUTES") {
            ELM.Recommendation.Util.refreshEntityAttributes({
                targetElem: a.target,
                success: function(d) {
                    if(d) {
                        c.model.set("entityAttributes", d, {
                            silent: true
                        })
                    }
                    c.model.trigger("change")
                }
            });
            return
        }
        b.call()
    },
    updateView: function() {},
    escapeKeyHandler: function() {
        this.closeEditor()
    },
    updateTitle: function(b) {
        var a = b.value;
        if(a != this.model.getTitle()) {
            this.model.setTitle(a)
        }
    },
    showSlidingPanel: function() {
        this.show({
            silent: true
        });
        this.slidingPanel.show()
    },
    hideSlidingPanel: function() {
        this.slidingPanelMode ? this.slidingPanel.hide() : this.hide()
    },
    saveModelAndCloseEditor: function() {
        var a = this;
        if(!this.model.isValid()) {
            this.showErrorNotification(this.model.getValidationError());
            return
        }
        this.model.save(this.model.getModifiedAttributesToSave(), {
            silent: true,
            wait: true,
            success: function(b) {
                a.hideSlidingPanel();
                a.trigger(ELM.evtNamespace + ":created", b)
            },
            error: function(b, c) {
                if(typeof a.model.handleSaveFailure === "function") {
                    a.model.handleSaveFailure(JSON.parse(c.responseText));
                    a.showErrorNotification()
                } else {
                    a.showErrorNotification(JSON.parse(c.responseText)["error.message"])
                }
            }
        })
    },
    closeEditor: function() {
        this.hideSlidingPanel();
        this.trigger(ELM.evtNamespace + "-editor:closed")
    },
    showErrorNotification: function(a) {
        ELM.Util.showErrorNotification({
            message: a,
            heading: Granite.I18n.get("ERROR"),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        })
    }
});
ELM.Search.SearchEditor = new Class({
    toString: "SearchEditor",
    extend: ELM.Search.Editor,
    View: F.View.extend({
        events: _.extend({
            "list:updateListFailed": "hideOverlay"
        }, ELM.Search.Editor.prototype.View.prototype.events)
    }),
    construct: function(a) {
        this.registerBinders();
        this.registerVars(a)
    },
    registerBinders: function() {
        ELM.Search.Editor.prototype.registerBinders.apply(this);
        this.bind(this.handleCollectionLoaded);
        this.bind(this.adjustScrollableWidth);
        this.bind(this.adjustToAvailableSpace);
        this.bind(this.handleScroll);
        this.bind(this.searchProducts);
        this.bind(this.showProductDetail);
        this.bind(this.updateTotalResultCount);
        this.bind(this.cancelSearch);
        this.bind(this.clearSearchResults);
        this.bind(this.handleProductDeletion);
        this.bind(this.handleProductDetailsClose);
        this.bind(this.saveModelAndCloseEditor);
        this.bind(this.addSearchComponents);
        this.bind(this.setActiveColumns);
        this.bind(this.updateEntityAttributes);
        this.bind(this.showOverlay);
        this.bind(this.hideOverlay)
    },
    registerVars: function(a) {
        this.inherited(arguments);
        this.confirmationDialog = new CUI.Modal({
            element: $('<div class="-e2e-deleteProductDialog"></div>').appendTo(document.body),
            visible: false,
            type: "notice"
        });
        this.environmentId = a.environmentId
    },
    addSearchComponents: function(a) {
        this.addProductListHeader();
        this.addProductList();
        this.addAdvancedSearchEditor(a)
    },
    addProductListHeader: function() {
        var a = this.model.getActiveColumns();
        if(!a) {
            a = ELM.Recommendation.Util.getActiveColumns()
        }
        this.addComponent(new ELM.Search.ProductSearchListHeader({
            el: this.view.$(".search-list-header"),
            model: new ELM.Model({
                activeColumns: a
            }),
            visible: true
        }), "searchListHeader")
    },
    addProductList: function() {
        this.addComponent(new ELM.Search.ProductSearchList({
            el: this.view.$(".search-list"),
            visible: true
        }), "searchList").on("updateTotalResultCount", this.updateTotalResultCount).on("collection:loaded", this.handleCollectionLoaded).on("list:itemDeleted", this.handleProductDeletion).on("list:itemSelected", this.showProductDetail);
        this.components.searchList.collection.columns = this.model.get("columns");
        this.components.searchList.collection.activeColumns = this.model.getActiveColumns();
        this.view.$(".lists-container").bind("scroll", this.handleScroll.bind(this));
        this.clearSearchResults();
        if(this.model.isRulesValid()) {
            this.searchProducts({
                rules: this.model.getRules()
            })
        }
    },
    addAdvancedSearchEditor: function(a) {
        var b = new ELM.Models.ProductSearch(),
            c;
        b.setRules(this.model.getRules());
        b.setEntityAttributes(this.model.get("entityAttributes"));
        b.attributes.componentName = a;
        if(ELM.isHaloProductSearchEnabled) {
            c = this.addComponent(new ELM.Search.ProductAdvancedHALOSearchEditor({
                el: this.view.$(".advanced-search-editor"),
                model: b,
                environmentId: this.environmentId,
                visible: true
            }), "advancedSearchEditor")
        } else {
            this.model.attributes.componentName = a;
            c = this.addComponent(new ELM.Search.ProductAdvancedSearchEditor({
                el: this.view.$(".advanced-search-editor"),
                model: this.model,
                environmentId: this.environmentId,
                visible: true
            }), "advancedSearchEditor")
        }
        c.on("searchProducts", this.searchProducts).on("refreshEntityAttributes", this.updateEntityAttributes).on("clearSearchResults", this.clearSearchResults).on("renderComplete", this.adjustToAvailableSpace)
    },
    showProductDetail: function(a) {
        var c = this.components.productDetail,
            b = ELM.Util.clone(a.model.toJSON());
        delete b.columns;
        delete b.activeColumns;
        c && c.destruct();
        $(a.listItem).addClass("selected");
        this.addComponent(new ELM.Search.ProductDetail({
            el: $('<div class="product-detail"></div>').appendTo(this.view.$(".product-detail-wrapper")),
            model: b,
            visible: true
        }), "productDetail").on("deleteProduct", this.handleProductDeletion).on("closed", this.handleProductDetailsClose)
    },
    updateEntityAttributes: function() {
        var a = this;
        this.showOverlay();
        ELM.Recommendation.Util.fetchEntityAttributes(function(c) {
            var b;
            if(c) {
                b = ELM.Recommendation.Util.getProductSearchModel(c);
                a.entityAttributes = c;
                a.load(b);
                a.components.searchListColumnFilter.updateModel(b);
                a.components.searchList.collection.columns = b.columns;
                a.components.searchList.collection.activeColumns = b.activeColumns;
                a.components.searchListHeader.model.set("activeColumns", b.activeColumns)
            }
            a.components.advancedSearchEditor.updateEntityAttributes(c);
            a.hideOverlay()
        })
    },
    handleProductDeletion: function(b) {
        var a = this;
        ELM.Util.showConfirmationDialog(this.confirmationDialog, {
            heading: Granite.I18n.get("Confirm Delete"),
            message: "<p>" + Granite.I18n.get('Are you sure you want to delete the product "{0}"?', b.name) + "</p><p>" + Granite.I18n.get("A deleted product must be separately deleted from feeds.") + "</p>",
            label: Granite.I18n.get("Delete"),
            callback: function() {
                var c = [b.id];
                a.showOverlay();
                a.actionRequest(a.actionsUrl(), {
                    action: "delete",
                    resources: c
                }).done(function(e) {
                    var d = a.components.searchList,
                        f = d.getNextItem();
                    if(e.successful.length === 1) {
                        d.view.collection.remove(b);
                        d.view.collection.totalSearchCount--;
                        d.render();
                        a.view.$(".result-count").text(d.view.collection.length);
                        if(a.components.productDetail && a.components.productDetail.isVisible()) {
                            if(f) {
                                d.trigger("list:itemSelected", {
                                    listItem: d.view.$("#" + ELM.Util.escapeHTMLAttributes(f.id)).parent(),
                                    model: f
                                })
                            } else {
                                a.components.productDetail.closeProductDetail()
                            }
                        }
                        ELM.Util.showSuccessNotification({
                            message: Granite.I18n.get('Product "{0}" was deleted.', b.name)
                        })
                    } else {
                        ELM.Util.showErrorNotification({
                            message: Granite.I18n.get('Failed to delete product "{0}".', b.name)
                        })
                    }
                }).error(function() {
                    ELM.Util.showErrorNotification({
                        message: Granite.I18n.get('Failed to delete product "{0}".', b.name)
                    })
                }).always(function() {
                    a.handleCollectionLoaded(a.components.searchList.view.collection)
                })
            }
        })
    },
    handleProductDetailsClose: function() {
        this.components.searchList.trigger("detailViewClosed")
    },
    saveModelAndCloseEditor: function() {
        this.model.setRules(this.components.advancedSearchEditor.model.getRules(), true);
        this.model.setProductCount(this.components.searchList.collection.totalSearchCount, true);
        ELM.Search.Editor.prototype.saveModelAndCloseEditor.apply(this)
    },
    clearSearchResults: function() {
        var a = this.components.searchList;
        this.setActiveColumns();
        this.cancelSearch();
        this.view.$(".list").addClass("no-search-item");
        a.resetList();
        this.view.$(".result-count").text(a.collection.totalSearchCount);
        a.render();
        this.adjustScrollableWidth()
    },
    cancelSearch: function() {
        var a = this.components.searchList;
        if(!a) {
            return
        }
        a.collection.searchCancelled = true;
        a.page = 0;
        this.hideOverlay()
    },
    handleCollectionLoaded: function(a) {
        this.view.$(".total-count").text("");
        if(ELM.isHaloProductSearchEnabled) {
            this.view.$(".result-count").text(a.totalSearchCount);
            this.updateTotalResultCount(a.totalResultCount)
        } else {
            this.view.$(".result-count").text(a.length)
        }
        if(a.length === 0) {
            this.view.$(".list").addClass("no-search-item")
        } else {
            this.view.$(".list").removeClass("no-search-item");
            this.adjustToAvailableSpace()
        }
        this.adjustScrollableWidth();
        this.hideOverlay()
    },
    searchProducts: function(c) {
        var b = this.components.searchList,
            a = this.components.productDetail && this.components.productDetail.isVisible();
        this.setActiveColumns(c);
        this.model.setRules(c.rules, true);
        if(!a) {
            b.collection.searchCancelled = false;
            $(document).on("keydown", this.handleKeyDown);
            this.showOverlay();
            b.updateSearchQuery(JSON.stringify(c));
            b.updateSearchEnvironment({
                id: this.environmentId
            });
            b.updateList()
        }
    },
    adjustToAvailableSpace: function() {
        var d = this.view.$(".listItem"),
            f = $(d[0]).outerHeight(true),
            e = window.innerHeight - this.view.$(".lists-container").offset().top,
            b = e - this.view.$(".title-bar").outerHeight(true),
            c = this.view.$(".lists-container").height(),
            a = e - f * d.length > 0;
        if(a) {
            this.view.$(".lists-container").css("height", b + "px");
            this.components.searchList.fetchAvailablePage()
        } else {
            if(c !== b) {
                this.view.$(".lists-container").css("height", Math.max(b, 400) + "px")
            }
        }
    },
    adjustScrollableWidth: function() {
        var a = this.view.$(".header .row"),
            c = this.view.$(".search-list"),
            b;
        a.removeClass("display-inline-block");
        a.parent().removeAttr("style");
        b = a.width();
        if(this.view.$el.width() > b) {
            a.addClass("display-inline-block");
            a.parent().css("width", "auto");
            c.css("width", "auto")
        } else {
            a.parent().width(b - 2);
            c.width(b)
        }
    },
    handleScroll: function(a) {
        this.components.searchList.handleScroll(a)
    },
    updateTotalResultCount: function(a) {
        if(a) {
            this.view.$(".total-count").text(Granite.I18n.get(" of ") + a)
        }
        this.hideOverlay()
    },
    hideOverlay: function() {
        this.$waitOverlay.addClass("display-none")
    },
    showOverlay: function() {
        this.$waitOverlay.removeClass("display-none")
    },
    actionRequest: function(a, b) {
        return this.productRequest({
            url: a,
            type: "POST",
            data: JSON.stringify(b)
        })
    },
    actionsUrl: function() {
        return ELM.baseURI + "/products.action." + ELM.bullseyeSelector + ".json"
    },
    productRequest: function(a) {
        return $.ajax({
            url: a.url,
            type: a.type,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: a.data
        })
    },
    actionsUrl: function() {
        return ELM.baseURI + "/products.action." + ELM.bullseyeSelector + ".json"
    },
    setActiveColumns: function(b) {
        var a;
        if(b) {
            a = ELM.Recommendation.Util.getActiveColumns(b.rules)
        } else {
            a = ELM.Recommendation.Util.SEARCH_DEFAULT_ACTIVE_COLUMNS
        }
        this.components.searchListHeader.model.set("activeColumns", a);
        this.model.setActiveColumnsNames(a, true);
        this.components.searchList.collection.activeColumns = a
    }
});
ELM.Search.ProductSearchListHeader = new Class({
    toString: "ProductSearchListHeader",
    extend: F.ModelComponent,
    View: F.View,
    construct: function(a) {
        this.initView(a.el);
        this.load(a.model)
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Search.Templates.ProductSearchListHeader
        })
    }
});
ELM.Search.ProductSearchList = new Class({
    toString: "ProductSearchList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.ProductSearchList,
    options: {
        defaultParams: {
            pageSize: 10,
            page: 1,
            query: ""
        }
    },
    ItemView: F.ListComponent.prototype.ItemView.extend({
        events: {
            "click li a": "preventItemSelection",
            "click .action-bar a": "triggerProductDelete"
        }
    }),
    construct: function() {
        this.registerBinders();
        this.registerListeners();
        this.registerVars();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.handleKeyDown)
    },
    registerListeners: function() {
        this.listenTo(this, "detailViewClosed", function() {
            this.view.$(".selected").removeClass("selected")
        })
    },
    registerGlobalTriggers: function() {
        $(document).on("keydown", this.handleKeyDown)
    },
    registerVars: function() {
        this.collectionLoaded = true
    },
    unRegisterGlobalTriggers: function() {
        $(document).off("keydown", this.handleKeyDown)
    },
    ItemTemplate: function() {
        return ELM.Search.Templates.ProductSearchRow.apply(this, arguments)
    },
    ListEmptyTemplate: function() {
        return ELM.Search.Templates.ProductSearchRow.NoSearchResultProducts.apply(this, arguments)
    },
    NoResultsTemplate: function() {
        return ELM.Search.Templates.ProductSearchRow.NoSearchResultProducts.apply(this, arguments)
    },
    updateSearchQuery: function(a) {
        this.options.defaultParams.query = a
    },
    updateSearchEnvironment: function(a) {
        this.options.defaultParams.environmentId = a.id;
        this.updateTotalCount(a)
    },
    updateTotalCount: function(a) {
        var b = this,
            c = ELM.isHaloSearchFacetsEnabled ? '&query={"facets":["category", "brand"]}' : '&query={"facets":[]}';
        if(!ELM.isHaloProductSearchEnabled) {
            this.trigger("list:updateCountFailed");
            return
        }
        $.ajax({
            url: "/target/" + ELM.client + "/target/products/productSearch.halototalcount.at.json?environmentId=" + this.options.defaultParams.environmentId + c,
            type: "GET",
            async: _.isUndefined(a.async) ? true : a.async,
            success: function(d) {
                b.collection.totalResultCount = d.total;
                b.trigger("updateTotalResultCount", d.total);
                if(d.facets.length !== 0) {
                    b.trigger("updateFacets", d.facets)
                }
            },
            error: function() {
                b.trigger("list:updateCountFailed");
                ELM.Util.showErrorNotification({
                    message: Granite.I18n.get("Failed to fetch total product count for the host group.")
                })
            }
        })
    },
    resetList: function() {
        this.collection.reset();
        this.totalNumberOfPagesToLoad = 0;
        this.currentPage = 0;
        this.collection.totalSearchCount = 0
    },
    updateList: function() {
        var a = this;
        this.fetch({}, function(b) {
            var d = Granite.I18n.get("Failed to obtain the search query results."),
                c, e;
            if(b.status && b.status !== 200) {
                c = b.responseText.match(/error.message/) ? JSON.parse(b.responseText) : {};
                if(c["error.message"].match(/Search term too general. Too many entities match criteria/)) {
                    d = Granite.I18n.get("Search term too general. Too many entities match criteria.")
                } else {
                    if(e = c["error.message"].match(/undefined field:? (.*)/)) {
                        d = Granite.I18n.get("{0} is a new attribute that needs to be indexed before it is searchable.", e[1])
                    }
                }
                ELM.Util.showErrorNotification({
                    message: d
                });
                a.trigger("list:updateListFailed")
            }
        })
    },
    handleKeyDown: function(a) {
        var c = this.view.$(".selected"),
            b;
        if(c.length === 0) {
            return
        }
        b = c.data("viewIndex");
        if(a.keyCode === ELM.keycodes.LEFT_ARROW_KEY || a.keyCode === ELM.keycodes.UP_ARROW_KEY) {
            if(b > 0) {
                this.triggerItemSelected(c, b - 1)
            }
        } else {
            if(a.keyCode === ELM.keycodes.RIGHT_ARROW_KEY || a.keyCode === ELM.keycodes.DOWN_ARROW_KEY) {
                if(b < this.collection.length - 1) {
                    this.triggerItemSelected(c, b + 1)
                }
            }
        }
    },
    triggerItemSelected: function(c, b) {
        var a = this.collection.models[b];
        c.removeClass("selected");
        this.trigger("list:itemSelected", {
            listItem: this.view.$("#" + ELM.Util.escapeHTMLAttributes(a.id)).parent(),
            model: a
        })
    },
    triggerProductDelete: function(c) {
        var b = $(c.target).data("product-id"),
            a = this.collection.get(b);
        this.trigger("list:itemDeleted", a.toJSON())
    },
    preventItemSelection: function(a) {
        a.stopPropagation()
    },
    getNextItem: function() {
        var a = this.view.$(".selected").data("viewIndex");
        if(a < this.collection.length - 1) {
            return this.collection.models[a + 1]
        } else {
            if(a > 0) {
                return this.collection.models[a - 1]
            }
        }
    },
    setActiveColumns: function(a) {
        this.collection.activeColumns = a;
        _.each(this.collection.models, function(b) {
            b.set("activeColumns", a);
            b.trigger("change")
        })
    }
});
ELM.Search.ProductAdvancedSearchEditor = new Class({
    toString: "ProductAdvancedSearchEditor",
    extend: F.ModelComponent,
    Model: ELM.Models.ProductSearch,
    View: F.View.extend({
        commonEvents: {
            "selected .attributeName": "updateRuleAttributeName",
            "selected .operator": "updateRuleOperator",
            "click #add-rule": "addNewRule",
            "click .delete-rule": "deleteRule",
            "click .advancedSearch": "searchProducts",
            "click .reset": "resetSearchRules",
            "click .simpleSearch": "showSimpleSearch"
        },
        additionalEvents: {
            "change .filters": "updateRuleOperands"
        },
        events: function() {
            return _.extend({}, this.commonEvents, this.additionalEvents)
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.load(a.model);
        this.registerListeners();
        this.registerVars(a)
    },
    registerBinders: function() {
        this.bind(this.handleKeyDown)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.trigger("renderComplete")
        })
    },
    registerVars: function(a) {
        this.environmentId = a.environmentId
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Search.Templates.ProductAdvancedSearchEditor
        })
    },
    initWidgets: function() {
        this.view.$(".select").select();
        this.view.$("input").on("keydown", this.handleKeyDown)
    },
    updateSearchEnvironment: function(a) {
        this.environmentId = a
    },
    updateRuleAttributeName: function(a) {
        var b = this.getSearchRuleIndex($(a.target)),
            c;
        if(a.selected === "REFRESH_ATTRIBUTES") {
            c = $(a.target).find("button");
            c.attr("disabled", "disabled");
            c.text(Granite.I18n.get("Refreshing List..."));
            this.trigger("refreshEntityAttributes");
            return
        }
        this.model.setAttributeName(a.selected, b)
    },
    updateEntityAttributes: function(a) {
        if(a) {
            this.model.set("entityAttributes", a, {
                silent: true
            })
        }
        this.model.trigger("change")
    },
    updateRuleOperator: function(b) {
        var c = this.getSearchRuleIndex($(b.target)),
            a = ["isValuePresent", "isValueNotPresent"];
        if(a.indexOf(b.selected) !== -1) {
            this.model.setOperands([], c)
        }
        this.model.setOperator(b.selected, c)
    },
    updateRuleOperands: function(a, d) {
        var c = this.getSearchRuleIndex($(a.target)),
            g = $(a.target).val() || "",
            f = true,
            b = ELM.Recommendation.Util.getOperandsFromInputString(g),
            e = this.model.getRule(c).operands;
        if(_.isEqual(e, b)) {
            return
        }
        if(!$(a.target).is("select")) {
            f = false
        }
        f = _.isUndefined(d) ? f : d;
        this.model.setOperands(b, c);
        if(b.length !== 0) {
            if(f) {
                this.searchProducts()
            }
        } else {
            if(this.model.getRules().length === 1) {
                this.trigger("clearSearchResults")
            }
        }
        this.view.$(".rule").removeClass("incomplete-rule")
    },
    addNewRule: function() {
        this.model.addDefaultRule()
    },
    deleteRule: function(a) {
        var b = this.getSearchRuleIndex($(a.target));
        this.model.deleteRule(b);
        if(this.model.getRules().length > 0) {
            this.searchProducts()
        }
    },
    handleKeyDown: function(a) {
        if(a.keyCode === ELM.keycodes.ENTER) {
            if($(a.target).is("input")) {
                this.updateRuleOperands(a, true)
            } else {
                this.searchProducts()
            }
        }
    },
    searchProducts: function() {
        var a = this;
        _.each(this.view.$(".rule input"), function(b) {
            a.updateRuleOperands({
                target: b
            }, false)
        });
        if(!this.model.isRulesValid()) {
            this.showErrorNotification();
            return false
        }
        this.view.$(".no-search-result").remove();
        this.trigger("searchProducts", this.getSearchQuery())
    },
    getSearchQuery: function() {
        return {
            rules: this.model.getRules()
        }
    },
    resetSearchRules: function() {
        this.view.$(".rule").removeClass("incomplete-rule");
        this.model.setRules([this.model.getDefaultRule()]);
        this.trigger("clearSearchResults")
    },
    getSearchRuleIndex: function(a) {
        return a.closest(".rule").data("index")
    },
    showSimpleSearch: function() {
        this.trigger("showSimpleSearch")
    },
    showErrorNotification: function() {
        var b = this.model.getValidationError(),
            a = b.indexes,
            e, d;
        ELM.Util.showErrorNotification({
            message: b.message,
            heading: Granite.I18n.get("ERROR")
        });
        if(b.fieldName === "rules") {
            e = this.view.$el.find(".rule");
            d = a.length;
            for(var c = 0; c < d; c++) {
                e[a[c]].className += " incomplete-rule"
            }
        }
    }
});
ELM.Search.ProductAdvancedHALOSearchEditor = new Class({
    toString: "ProductAdvancedHALOSearchEditor",
    extend: ELM.Search.ProductAdvancedSearchEditor,
    View: ELM.Search.ProductAdvancedSearchEditor.prototype.View.extend({
        additionalEvents: {
            "change .filters select": "updateRuleOperands"
        }
    }),
    registerVars: function(a) {
        this.autocompleteSearchString = "";
        this.environmentId = a.environmentId
    },
    initWidgets: function() {
        var a = this;
        this.view.$(".select").select();
        _.each(this.model.getRules(), function(d, b) {
            var c = a.view.$("." + ELM.Util.escapeHTMLAttributes(d.attributeName) + "Lookup" + b);
            if(c.length === 1) {
                a.initFilter(c, d.attributeName)
            }
        });
        this.view.$("input").on("keydown", this.handleKeyDown)
    },
    initFilter: function(a, c) {
        var b = this;
        this.filter = new CUI.Filters({
            element: a,
            infiniteLoad: true,
            options: [],
            highlight: true,
            autocompleteCallback: function(e, d, f) {
                if(d && d.length !== 0 && f === 0 && b.autocompleteSearchString !== d) {
                    b.autocompleteSearchString = d;
                    $.ajax({
                        url: "/target/" + ELM.client + "/target/products/productSearch.halotermsearch.at.json?environmentId=" + b.environmentId + "&attributes=" + c + "&query=" + d + "&maximumTerms=100",
                        type: "GET",
                        success: function(h) {
                            var g = [];
                            if(h.search.query === b.autocompleteSearchString) {
                                _.each(h.results[c], function(i) {
                                    g.push(i.value)
                                });
                                e(g)
                            }
                        }
                    })
                } else {
                    e([])
                }
            }
        })
    },
    getSearchQuery: function() {
        return {
            sort: "name",
            sortDirection: "ascending",
            fields: [],
            facets: [],
            rules: this.model.getRules()
        }
    },
    updateRuleOperands: function(a, d) {
        var c = this.getSearchRuleIndex($(a.target)),
            g = $(a.target).val() || "",
            b, f = false,
            e = this.model.getRule(c).operands,
            h = ELM.Recommendation.Util.getOperandsFromInputString(g);
        if(!$(a.target).is("select")) {
            b = _.union(_.clone(e), h)
        } else {
            this.autocompleteSearchString = "";
            if(this.filter) {
                this.filter.dropdownList.hide()
            }
            b = h;
            f = true
        }
        if(_.isEqual(e, b)) {
            $(a.target).val("");
            return
        }
        f = _.isUndefined(d) ? f : d;
        this.model.setOperands(b, c);
        if(b.length !== 0) {
            if(f) {
                this.searchProducts()
            }
        } else {
            if(this.model.getRules().length === 1) {
                this.trigger("clearSearchResults")
            }
        }
        this.view.$(".rule").removeClass("incomplete-rule")
    }
});
ELM.Search.ProductDetail = new Class({
    toString: "ProductDetail",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .close": "closeProductDetail",
            "click .delete-product": "triggerDeleteProduct"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.registerListeners();
        this.registerVars(a.scrollPosition);
        this.load(a.model);
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerGlobalTriggers: function() {
        $(document).on("keydown", this.handleKeyDown)
    },
    unRegisterGlobalTriggers: function() {
        $(document).off("keydown", this.handleKeyDown)
    },
    registerBinders: function() {
        this.bind(this.handleKeyDown);
        this.bind(this.closeProductDetail)
    },
    registerListeners: function() {
        var a = this;
        this.listenTo(this.view, "renderComplete", function() {
            var b = a.view.$(".scrollable");
            b.on("scroll", function() {
                a.scrollPosition = b.scrollTop()
            });
            b.scrollTop(a.scrollPosition)
        })
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Search.Templates.ProductDetail
        })
    },
    registerVars: function(a) {
        this.scrollPosition = a || 0
    },
    handleKeyDown: function(a) {
        if(a.keyCode === ELM.keycodes.ESCAPE) {
            this.closeProductDetail()
        }
    },
    closeProductDetail: function() {
        this.hide();
        this.trigger("closed");
        this.destruct()
    },
    getScrollPosition: function() {
        return this.scrollPosition
    },
    triggerDeleteProduct: function() {
        this.trigger("deleteProduct", this.model.toJSON())
    }
});
ELM.ActionTracker = new Class({
    extend: F.Component,
    toolbar: null,
    actions: [],
    vtPointer: -1,
    actionsStack: [],
    stackPointer: -1,
    options: {},
    construct: function() {},
    _updatePointers: function() {
        var a = this.actions.length - this.vtPointer - 1;
        this.actions.length = this.vtPointer + 1;
        this.actionsStack.length = this.actionsStack.length - a;
        this.stackPointer = this.actionsStack.length;
        this.trigger("action:updateUndoRedoIcons")
    },
    addAction: function(c, d, b) {
        var a = {
            undoAction: c,
            redoAction: d
        };
        this._updatePointers();
        if(!b) {
            b = "DEFAULT_ACTION"
        }
        this.actionsStack.push(b);
        this.vtPointer = this.actions.length;
        this.actions.push(a)
    },
    undoAction: function() {
        if(this.stackPointer > -1) {
            this.actions[this.vtPointer].undoAction();
            this.vtPointer--;
            this.stackPointer--;
            this.trigger("action:updateUndoRedoIcons")
        }
    },
    redoAction: function() {
        if(this.stackPointer + 1 < this.actionsStack.length) {
            this.stackPointer++;
            this.vtPointer++;
            this.actions[this.vtPointer].redoAction();
            this.trigger("action:updateUndoRedoIcons")
        }
    }
});
ELM.Activities = {
    init: function(a) {
        console.log("Initializing ELM.Activities...");
        ELM.Activities.status = {
            ARCHIVED: "ARCHIVED",
            DRAFT: "DRAFT",
            SAVED: "SAVED",
            STOPPED: "STOPPED",
            APPROVED: "APPROVED",
            DEACTIVATED: "DEACTIVATED",
            ENDED: "ENDED",
            LIVE: "LIVE",
            SCHEDULED: "SCHEDULED",
            READY: "READY",
            INACTIVE: "INACTIVE",
            DEACTIVATING: "DEACTIVATING",
            ACTIVATING: "ACTIVATING",
            SYNCING: "SYNCING"
        };
        ELM.Activities.displayStatus = {
            ARCHIVED: Granite.I18n.get("Archived"),
            DRAFT: Granite.I18n.get("Draft"),
            SAVED: Granite.I18n.get("Saved"),
            STOPPED: Granite.I18n.get("Stopped"),
            APPROVED: Granite.I18n.get("Approved"),
            DEACTIVATED: Granite.I18n.get("Deactivated"),
            ENDED: Granite.I18n.get("Ended"),
            LIVE: Granite.I18n.get("Live"),
            SCHEDULED: Granite.I18n.get("Scheduled"),
            READY: Granite.I18n.get("Ready"),
            INACTIVE: Granite.I18n.get("Inactive"),
            DEACTIVATING: Granite.I18n.get("Deactivating"),
            ACTIVATING: Granite.I18n.get("Activating"),
            SYNCING: Granite.I18n.get("Syncing")
        };
        ELM.Activities.privilege = {
            APPROVER: "approver",
            WRITE: "write",
            READ: "read"
        };
        ELM.Activities.activityTypesExperienceEditorModesMap = {
            "A-B": "edit",
            AB_ANALYTICS: "edit",
            "1-1": "1-1",
            recommendation: "recommendation",
            experienceTargeting: "experienceTargeting"
        };
        ELM.Activities.activityTypes = {
            AB_TEST: "A-B",
            AB_ANALYTICS: "A-B-analytics",
            ONE_TO_ONE: "1-1",
            EXPERIENCE_TARGETING: "Experience-Targeting",
            RECOMMENDATION: "recommendation",
            MVT: "MVT"
        };
        ELM.Activities.activityDisplayTypes = {
            "A-B": {
                longText: Granite.I18n.get("A/B Test"),
                shortText: "A/B"
            },
            "A-B-analytics": {
                longText: Granite.I18n.get("A/B Test with Analytics"),
                shortText: "A/B"
            },
            "1-1": {
                longText: Granite.I18n.get("Automated Personalization"),
                shortText: "AP"
            },
            "Experience-Targeting": {
                longText: Granite.I18n.get("Experience Targeting"),
                shortText: "XT"
            },
            recommendation: {
                longText: Granite.I18n.get("Recommendations"),
                shortText: "REC"
            },
            MVT: {
                longText: Granite.I18n.get("Multivariate Test"),
                shortText: "MVT"
            }
        };
        ELM.Activities.reportingEngine = {
            TRANSITIONAL: "transitional",
            ANALYTICS: "analytics",
            TARGET: "target"
        };
        ELM.ReportMetrics = {
            conversionRate: Granite.I18n.get("Conversion Rate"),
            rpv: Granite.I18n.get("Revenue per Visitor (RPV)"),
            orders: Granite.I18n.get("Order Rate"),
            aov: Granite.I18n.get("Average Order Value (AOV)"),
            sales: Granite.I18n.get("Revenue"),
            pageScore: Granite.I18n.get("Page Score"),
            pageViews: Granite.I18n.get("Page Views"),
            timeOnSite: Granite.I18n.get("Time on Site"),
            customScoring: Granite.I18n.get("Page Score"),
            engagement: Granite.I18n.get("Engagement")
        };
        ELM.A4TQueryVariables = {
            conversionRate: "targetconversion/targetentry",
            rpv: "targetconversionoptional/targetentry",
            aov: "targetconversionoptional/targetconversion",
            sales: "targetconversionoptional",
            pageScore: null,
            pageViews: "pageviews",
            timeOnSite: "averagetimespentonsite"
        };
        ELM.ExperienceEditorActions = {
            MOVE: "move",
            REARRANGE: "rearrange",
            RESIZE: "resize",
            SET_ATTRIBUTE: "setAttribute",
            INSERT_ELEMENT: "insertElement",
            APPEND_CONTENT: "appendContent",
            PREPEND_CONTENT: "prependContent",
            REMOVE_FROM_DOM: "removeFromDOM",
            SET_CONTENT: "setContent",
            SET_STYLE: "setStyle",
            INSERT_AFTER: "insertAfter",
            INSERT_BEFORE: "insertBefore"
        };
        ELM.keycodes = {
            ENTER: 13,
            ESCAPE: 27,
            LEFT_ARROW_KEY: 37,
            UP_ARROW_KEY: 38,
            RIGHT_ARROW_KEY: 39,
            DOWN_ARROW_KEY: 40,
            Z: 90,
            Y: 89
        };
        ELM.CurrencySymbol = {
            en_GB: "£",
            en_IE: "€",
            fi_FI: "€",
            fr_FR: "€",
            de_DE: "€",
            zh_TW: "NT$",
            ja_JP: "￥",
            zh_CN: "￥",
            ko_KR: "￦"
        }, ELM.Algorithm = {
            key: {
                CURRENT_ITEM: "currentItem",
                CURRENT_CATEGORY: "currentCategory",
                CUSTOM_PROFILE_ATTRIBUTE: "customProfileAttribute",
                LAST_PURCHASED_ITEM: "lastPurchasedItem",
                LAST_VIEWED_ITEM: "lastViewedItem",
                MOST_VIEWED_ITEM: "mostViewedItem",
                FAVORITE_CATEGORY: "favoriteCategory",
                POPULARITY: "popularity",
                RECENTLY_VIEWED: "recentlyViewed"
            },
            displayKey: {
                currentItem: Granite.I18n.get("Current Item"),
                currentCategory: Granite.I18n.get("Current Category"),
                customProfileAttribute: Granite.I18n.get("Custom Attribute"),
                lastViewedItem: Granite.I18n.get("Last Viewed Item"),
                lastPurchasedItem: Granite.I18n.get("Last Purchased Item"),
                mostViewedItem: Granite.I18n.get("Most Viewed Item"),
                favoriteCategory: Granite.I18n.get("Favorite Category"),
                popularity: Granite.I18n.get("Popularity"),
                recentlyViewed: Granite.I18n.get("Recently Viewed Items")
            },
            displayType: {
                "boughtBought-CF": Granite.I18n.get("Bought/Bought"),
                "viewedViewed-CF": Granite.I18n.get("Viewed/Viewed"),
                "viewedBought-CF": Granite.I18n.get("Viewed/Bought"),
                fullDataOptimizing: Granite.I18n.get("Site Affinity"),
                topSellers: Granite.I18n.get("Top Sellers"),
                categoryBought: Granite.I18n.get("Top Sellers"),
                topViewed: Granite.I18n.get("Most Viewed"),
                categoryViewed: Granite.I18n.get("Most Viewed")
            },
            daysCount: {
                "0": "oneDay",
                "1": "twoDays",
                "2": "oneWeek",
                "3": "twoWeeks",
                "4": "oneMonth",
                "5": "twoMonths"
            },
            daysCountText: {
                oneDay: Granite.I18n.get("1 day of data"),
                twoDays: Granite.I18n.get("2 days of data"),
                oneWeek: Granite.I18n.get("1 week of data"),
                twoWeeks: Granite.I18n.get("2 weeks of data"),
                oneMonth: Granite.I18n.get("1 month of data"),
                twoMonths: Granite.I18n.get("2 months of data")
            },
            productConfidence: {
                "0": "veryWeak",
                "1": "weak",
                "2": "moderate",
                "3": "strong",
                "4": "veryStrong"
            },
            productConfidenceText: {
                veryWeak: Granite.I18n.get("Very weak connection strength"),
                weak: Granite.I18n.get("Weak connection strength"),
                moderate: Granite.I18n.get("Moderate connection strength"),
                strong: Granite.I18n.get("Strong connection strength"),
                veryStrong: Granite.I18n.get("Very strong connection strength")
            },
            pageTypeText: {
                homePage: Granite.I18n.get("on Home Page"),
                category: Granite.I18n.get("on Category Page"),
                product: Granite.I18n.get("on Product Page"),
                cart: Granite.I18n.get("on Cart Page"),
                landingPage: Granite.I18n.get("on Landing Page"),
                searchResults: Granite.I18n.get("on Search Results Page"),
                thankYou: Granite.I18n.get("on Thank You Page"),
                signup: Granite.I18n.get("on Sign Up Page"),
                prodSolutionService: Granite.I18n.get("on Product/Solution/Service Page"),
                article: Granite.I18n.get("on Article Page"),
                slideshow: Granite.I18n.get("on Slideshow Page"),
                videoPlayer: Granite.I18n.get("on Video Player Page"),
                other: Granite.I18n.get("on Other Page")
            }
        };
        ELM.RECOMMENDATION_PARAM = {
            ENTITY_ID: "entity.id",
            CATEGORY_ID: "entity.categoryId"
        };
        ELM.INDUSTRY_PAGE_MAP = {
            RETAIL_ECOMMERCE: ["cart", "category", "homePage", "landingPage", "product", "searchResults", "thankYou", "other"],
            LEAD_GEN_B2B_FINANCIAL: ["homePage", "prodSolutionService", "signup", "searchResults", "thankYou", "other"],
            MEDIA_PUBLISHING: ["article", "category", "homePage", "slideshow", "videoPlayer", "searchResults", "other"]
        }, ELM.PageType = {
            homePage: Granite.I18n.get("Home Page"),
            category: Granite.I18n.get("Category Page"),
            product: Granite.I18n.get("Product Page"),
            cart: Granite.I18n.get("Cart Page"),
            landingPage: Granite.I18n.get("Landing Page"),
            searchResults: Granite.I18n.get("Search Results Page"),
            thankYou: Granite.I18n.get("Thank You Page"),
            signup: Granite.I18n.get("Sign Up Page"),
            prodSolutionService: Granite.I18n.get("Product/Solution/Service Page"),
            article: Granite.I18n.get("Article Page"),
            slideshow: Granite.I18n.get("Slideshow Page"),
            videoPlayer: Granite.I18n.get("Video Player Page"),
            other: Granite.I18n.get("Other Page")
        }, ELM.IndustryType = {
            RETAIL_ECOMMERCE: Granite.I18n.get("Retail / Ecommerce"),
            LEAD_GEN_B2B_FINANCIAL: Granite.I18n.get("Lead Generation / B2B / Financial Services"),
            MEDIA_PUBLISHING: Granite.I18n.get("Media / Publishing")
        }, ELM.evtNamespace = "";
        ELM.Activities.app = new ELM.Activities.App(a);
        ELM.Activities.rail = new ELM.Activities.Rail({
            el: $("#rail")
        });
        ELM.Activities.router = new ELM.Activities.Router();
        Backbone.history.start();
        F.options.debug = true
    },
    Templates: {},
    Models: {},
    Collections: {}
};
ELM.Activities.Router = Backbone.Router.extend({
    routes: {
        "": "showIndex",
        "edit/:type/:id": "showEditor",
        "new(/:activityType)": "showEditorNewActivity",
        "reports/:type/:id": "showReports",
        "reports-contribution/:type/:id": "showContributionReports",
        "collision/:type/:id": "showCollision",
        "activitydetails/:type/:id": "showActivityDetails"
    },
    initialize: function() {
        this.bind("all", this.storeRoutes);
        this.currentUrl = ""
    },
    storeRoutes: function(a) {
        if(a === "route") {
            this.previousUrl = this.currentUrl;
            this.currentUrl = Backbone.history.fragment
        }
    },
    resetUrl: function(a) {
        a = a || false;
        this.navigate(this.currentUrl, {
            trigger: a
        })
    },
    showIndex: function() {
        if(ELM.Activities.app.isEditorOpenAndActivityChanged()) {
            ELM.Activities.app.confirmEditorSave()
        }
        ELM.Activities.app.index.show();
        ELM.Activities.app.index.activities.updateList()
    },
    showEditorNewActivity: function(a) {
        ELM.Activities.app.newActivity(a)
    },
    showEditor: function(a, b) {
        this.performAction(a, b, function(c) {
            ELM.Activities.app.editActivity(c)
        })
    },
    showActivityDetails: function(a, b) {
        this.performAction(a, b, function(c) {
            ELM.Activities.app.showActivityDetails(c)
        })
    },
    showReports: function(a, b) {
        this.performAction(a, b, function(c) {
            ELM.Activities.app.showReports(c)
        })
    },
    showContributionReports: function(a, b) {
        this.performAction(a, b, function(c) {
            ELM.Activities.app.showContributionReports(c)
        })
    },
    showCollision: function(a, b) {
        this.performAction(a, b, function(c) {
            ELM.Activities.app.showCollision(c)
        })
    },
    performAction: function(b, d, c) {
        var a = 1;
        if(d.indexOf("__") == 0) {
            a = 2
        }
        return ELM.Activities.app.performActivityAction(b, d.substring(a), c)
    },
    navigateToPreviousPage: function() {
        this.navigate(this.previousUrl, {
            trigger: true
        })
    }
});
ELM.Activities.ActivityList = new Class({
    toString: "ActivityList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.Activities,
    ItemTemplate: function() {
        return ELM.Activities.Templates.ActivityListItem.apply(this, arguments)
    },
    ListEmptyTemplate: function() {
        return ELM.Activities.Templates.ActivityList.NoSavedActivities.apply(this, arguments)
    },
    NoResultsTemplate: function() {
        return ELM.Activities.Templates.ActivityList.NoSearchResultActivities.apply(this, arguments)
    },
    NoResultsView: F.ListComponent.prototype.ItemView.extend({
        events: {
            "click .clearAll": "triggerClearSearchResultsEvent"
        }
    }),
    ListView: F.ListComponent.prototype.ListView.extend({
        events: {
            "click .activityListRow": "handleActivityRowClick",
            "click .activityListRow a": "preventActivityRowSelection",
            "mouseenter .activityListRow .tooltipTrigger": "showTooltip",
            "mouseleave .activityListRow .tooltipTrigger": "hideTooltip",
            "click #quickaction a": "triggerActivityActionEvent"
        }
    }),
    construct: function() {
        this.fetchParams = {};
        this.listenTo(this.view, "renderComplete", function() {
            this.triggerActivitiesLoadedEvent();
            this.initEmptyListDefaultText();
            this.fillAvailableSpace()
        });
        this.busyRetrivingFreshActivities = false;
        this.on("collection:loaded", this.renderActivitiesActions.bind(this));
        this.registerBinders();
        this.registerGlobalTriggers();
        this.collection.on("change", function() {}.bind(this));
        this.activityActions = [{
            action: "edit",
            isAllowed: function() {
                return true
            }
        }, {
            action: "activate",
            criteria: [ELM.Activities.status.STOPPED, ELM.Activities.status.INACTIVE],
            isAllowed: function(a) {
                return a.isUserApprover()
            }
        }, {
            action: "deactivate",
            criteria: [ELM.Activities.status.LIVE, ELM.Activities.status.SCHEDULED, ELM.Activities.status.ENDED],
            isAllowed: function(a) {
                return a.isUserApprover()
            }
        }, {
            action: "copy",
            isAllowed: function(a) {
                return !a.isUserObserver()
            }
        }, {
            action: "delete",
            criteria: [ELM.Activities.status.DRAFT, ELM.Activities.status.INACTIVE, ELM.Activities.status.ARCHIVED],
            isAllowed: function(a) {
                return a.isUserApprover() || (a.isUserEditor() && (a.getStatus().toUpperCase() === ELM.Activities.status.DRAFT))
            }
        }];
        this.confirmationDialog = new CUI.Modal({
            element: $('<div class="-e2e-deleteActivityDialog"></div>').appendTo(document.body),
            visible: false,
            type: "notice"
        })
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.searchActivities);
        this.bind(this.searchByParentCampaignName);
        this.bind(this.filterActivities);
        this.bind(this.sortActivities);
        this.bind(this.fillAvailableSpace);
        this.bind(this.activateActivity);
        this.bind(this.deactivateActivity);
        this.bind(this.copyActivity);
        this.bind(this.deleteActivity)
    },
    registerGlobalTriggers: function() {
        F.on("rail:search", this.searchActivities);
        F.on("rail:parentCampaignSearch", this.searchByParentCampaignName);
        F.on("rail:filter", this.filterActivities);
        F.on("activitySorter:change", this.sortActivities);
        F.on("window:resize", this.fillAvailableSpace)
    },
    unregisterGlobalTriggers: function() {
        F.off("rail:search", this.searchActivities);
        F.off("rail:parentCampaignSearch", this.searchByParentCampaignName);
        F.off("rail:filter", this.filterActivities);
        F.off("activitySorter:change", this.sortActivities);
        F.off("window:resize", this.fillAvailableSpace)
    },
    renderActivitiesActions: function() {
        _.each(this.getAllActivities(), function(a) {
            this.renderActions(a)
        }, this)
    },
    renderActions: function(b) {
        var a = this.getActivityRow(b),
            d, c;
        if(a.length) {
            _.each(this.activityActions, function(e) {
                d = a.find("." + e.action + "Action");
                c = e.isAllowed(b) && (!e.criteria || this.isStatusCriteriaFollowed(b, e.criteria));
                if(c) {
                    d.removeClass("hidden")
                } else {
                    d.addClass("hidden")
                }
            }, this)
        }
    },
    initEmptyListDefaultText: function() {
        this.view.$(".emptyListDefaultText").parent(".listItem").removeClass("listItem").addClass("emptyListDefaultTextContainer");
        if(CUI.util.isTouch || this.collection.isUserObserver()) {
            this.view.$(".create-activity-link").addClass("hidden")
        }
    },
    isStatusCriteriaFollowed: function(b, c) {
        var a = _.find(c, function(d) {
            return d.toLowerCase() === b.getStatus().toLowerCase()
        });
        if(a === undefined) {
            return false
        }
        return true
    },
    showTooltip: function(e) {
        var b = $(e.target),
            a = $(b.data("tooltip-id")),
            d = b.position().left - (a.outerWidth() / 2) + 2,
            c = b.position().top + (a.outerHeight() / 2) + 5;
        a.css({
            left: d + "px",
            top: c + "px"
        }).show()
    },
    hideTooltip: function(a) {
        $($(a.target).data("tooltip-id")).hide()
    },
    updateActivities: function() {
        var d = this,
            e, c = [ELM.Activities.status.SYNCING, ELM.Activities.status.ACTIVATING, ELM.Activities.status.DEACTIVATING];
        if(!this.view.$el.is(":visible") || this.busyRetrivingFreshActivities) {
            return
        }
        e = _.some(this.getAllActivities(), function(f) {
            return f.getSyncPendingStatus() || (c.indexOf(f.getStatus()) !== -1)
        });
        if(!e) {
            return
        }
        this.busyRetrivingFreshActivities = true;
        var b = new ELM.Collections.Activities(),
            a = $.extend({
                success: function(f) {
                    _.each(f.models, function(o) {
                        var j = o.getStatus(),
                            g = o.getSyncStatus(),
                            q = o.getSyncPendingStatus(),
                            n = o.getBestOpportunity(),
                            m = d.collection.get(o.getId()),
                            i, k, l, p, h;
                        if(m) {
                            i = m.getStatus();
                            k = m.getSyncStatus();
                            l = m.getSyncPendingStatus();
                            p = m.getBestOpportunity();
                            if(i !== j || k !== g || l !== q || (ELM.isProjectedEarningsEnabled && p !== n)) {
                                m.setStatus(j);
                                m.setSyncStatus(g);
                                m.setSyncPendingStatus(q);
                                m.setCallToAction(o.getCallToAction());
                                m.setBestOpportunity(n);
                                h = d.getActivityRow(m);
                                d.highlightUpdatedActivity(h);
                                d.getViewFromLi(h).render();
                                d.renderActions(m)
                            }
                        }
                    });
                    d.busyRetrivingFreshActivities = false
                }
            }, this.fetchParams);
        b.fetch(a)
    },
    highlightUpdatedActivity: function(a) {
        var b = 5000;
        a.addClass("updated");
        setTimeout(function() {
            a.removeClass("updated")
        }, b)
    },
    getActivityRow: function(a) {
        return this.view.$el.find('[name="activityId"][value="' + a.getId() + '"]').closest(".listItem")
    },
    searchByParentCampaignName: function(a) {
        this.setParameter("searchParent", a).updateList()
    },
    searchActivities: function(b, a) {
        this.setParameter(a, b).updateList()
    },
    setParameter: function(a, b) {
        if(typeof b !== "string" || b === "") {
            delete this.fetchParams[a]
        } else {
            this.fetchParams[a] = b
        }
        return this
    },
    filterActivities: function(a) {
        this.setParameter(a.name, a.values);
        this.updateList()
    },
    sortActivities: function(b, a) {
        this.setParameter("sortBy", b);
        this.setParameter("sortOrder", a);
        this.updateList()
    },
    updateList: function() {
        this.fetch(this.fetchParams)
    },
    handleActivityRowClick: function(b) {
        var d = this.getContainer(b),
            c = this.getModelFromLi(d),
            a = "#activitydetails/" + c.getActivityType() + "/:" + c.getId();
        ELM.Activities.router.navigate(a, {
            trigger: true
        })
    },
    preventActivityRowSelection: function(a) {
        a.stopPropagation()
    },
    getContainer: function(a) {
        return $(a.currentTarget).closest(".listItem")
    },
    triggerActivitiesLoadedEvent: function() {
        F.trigger("activities:loaded", this.collection)
    },
    getAllActivityContainers: function() {
        return this.view.$(".listItem")
    },
    getAllActivities: function() {
        return this.collection.models
    },
    activateActivity: function(a) {
        var b = this.collection.get(a.getId()) || a;
        this.updateStatus([b], ELM.Activities.status.APPROVED, ELM.Activities.status.ACTIVATING)
    },
    deactivateActivity: function(a) {
        var b = this.collection.get(a.getId()) || a;
        this.updateStatus([b], ELM.Activities.status.STOPPED, ELM.Activities.status.DEACTIVATING)
    },
    copyActivity: function(e) {
        var d = this,
            b = ["/" + e.id],
            a = e.getTitle(),
            c = Granite.I18n.get("Activity {0} was copied.", a);
        this.actionRequest("copy", b).done(function(f) {
            var g = (f.successful.length) ? f.successful[0]["jcr:title"] : undefined;
            d.updateList();
            d.collection.incrementTotalActivities();
            if(g) {
                c = Granite.I18n.get("Activity {0} was copied as {1}.", [a, g])
            }
            F.trigger("successNotification", {
                message: c
            })
        })
    },
    deleteActivity: function(c) {
        var a = this,
            b = c.getTitle();
        ELM.Util.showConfirmationDialog(this.confirmationDialog, {
            heading: Granite.I18n.get("Confirm delete"),
            message: "<p>" + Granite.I18n.get('Are you sure you want to delete the activity "{0}"?', ELM.Util.escape(b)) + "</p><p>" + Granite.I18n.get("Deleted activities cannot be recovered.") + "</p>",
            label: Granite.I18n.get("Delete"),
            callback: function() {
                var d = ["/" + c.id];
                a.actionRequest("delete", d).done(function() {
                    a.updateList();
                    a.initEmptyListDefaultText();
                    a.collection.decrementTotalActivities();
                    F.trigger("successNotification", {
                        message: Granite.I18n.get('Activity "{0}" was deleted.', b)
                    })
                })
            }
        })
    },
    updateStatus: function(f, d, c) {
        if(f.length === 0) {
            return
        }
        var b = this,
            a = this.getActivityIds(f),
            e = this.getUpdateStatusJSON(a, d);
        this.bulkRequest(e).done(function() {
            b.updateDisplayStatus(f, c);
            b.triggerActivityStatusUpdatedEvent(f)
        }).fail(function(h, k, i) {
            var j = JSON.parse(h.responseText);
            var g = j["error.message"] || i;
            F.trigger("errorNotification", {
                message: g
            })
        });
        this.trigger("updateStatus")
    },
    getUpdateStatusJSON: function(b, a) {
        return this.getBulkJSON("UPDATE", b, {
            status: a
        })
    },
    getBulkJSON: function(b, a, d) {
        var c = {
            op: b,
            resources: a
        };
        if(d) {
            $.extend(c, d)
        }
        return c
    },
    triggerActivityStatusUpdatedEvent: function(a) {
        _.each(a, function(b) {
            F.trigger(b.getActivityType() + ":activityStatus:updated", b)
        }, this)
    },
    bulkRequest: function(a) {
        var b = JSON.stringify(a);
        return this.activityRequest({
            url: this.collection.bulkUrl(),
            type: "POST",
            data: b
        })
    },
    actionRequest: function(c, a) {
        var b = JSON.stringify({
            action: c,
            resources: a
        });
        return this.activityRequest({
            url: this.collection.actionsUrl(),
            type: "POST",
            data: b
        })
    },
    activityRequest: function(a) {
        return $.ajax({
            url: a.url,
            type: a.type,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: a.data
        })
    },
    getActivityIds: function(b) {
        var a = [];
        _.each(b, function(c) {
            a.push("/" + c.get("id"))
        });
        return a
    },
    updateDisplayStatus: function(b, a) {
        _.each(b, function(c) {
            c.setStatus(a);
            this.renderActions(c)
        }, this)
    },
    fillAvailableSpace: function() {
        if(!this.view.$el.is(":visible") || this.collection.isEmpty()) {
            return
        }
        var c = this.getAllActivityContainers(),
            b = $(c[0]).outerHeight(true),
            d = this.getSiblingsHeight(),
            e = window.innerHeight - this.view.$el.closest(".scrollable").offset().top - d,
            a = e - b * c.length > 0;
        if(a) {
            this.fetchAvailablePage()
        }
    },
    triggerActivityActionEvent: function(a) {
        var b = $(a.currentTarget);
        F.trigger("activity:action:requested", {
            action: b.data("action-id"),
            model: this.collection.get(b.data("activity-id"))
        })
    },
    triggerClearSearchResultsEvent: function() {
        F.trigger("activities:clearSearchResults")
    },
    getSiblingsHeight: function() {
        return _.reduce(this.view.$el.siblings(), function(a, b) {
            return a + $(b).outerHeight(true)
        }, 0)
    }
});
ELM.Activities.Filters = new Class({
    toString: "ActivityList",
    extend: F.Component,
    visible: true,
    View: F.View.extend({
        events: {
            'change .activity-filter input[type="checkbox"]': "applyFilters",
            'change input[name="activityParentCampaign"]': "triggerParentCampaignSearchEvent"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerListeners();
        this.render()
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            model: this.getFilters(),
            template: ELM.Activities.Templates.Filters
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.view.$(".accordion").accordion()
        });
        F.on("activities:clearSearchResults", this.clearAllFilters.bind(this))
    },
    getFilters: function() {
        var a = {
            status: [ELM.Activities.status.LIVE, ELM.Activities.status.DRAFT, ELM.Activities.status.SCHEDULED, ELM.Activities.status.INACTIVE, ELM.Activities.status.ENDED],
            activityType: [ELM.Activities.activityTypes.AB_TEST, ELM.Activities.activityTypes.AB_ANALYTICS, ELM.Activities.activityTypes.ONE_TO_ONE, ELM.Activities.activityTypes.EXPERIENCE_TARGETING, ELM.Activities.activityTypes.MVT]
        };
        if(ELM.isRecsEnabled) {
            a.activityType.push(ELM.Activities.activityTypes.RECOMMENDATION)
        }
        return a
    },
    applyFilters: function(a) {
        var b = a.currentTarget,
            c = [],
            d = [];
        this.view.$('input[name="' + b.name + '"]:checked').each(function() {
            c.push(this.value);
            d.push($(this).next("span").text())
        });
        this.triggerFilterEvent(b.name, c, d)
    },
    triggerParentCampaignSearchEvent: function(a) {
        F.trigger("rail:parentCampaignSearch", a.currentTarget.value)
    },
    clearAllFilters: function() {
        this.view.$('.activity-filter input[type="checkbox"]').prop("checked", false);
        _.each(_.keys(this.getFilters()), function(a) {
            this.triggerFilterEvent(a, [], [])
        }, this)
    },
    triggerFilterEvent: function(a, b, c) {
        F.trigger("rail:filter", {
            name: a,
            values: b.join(","),
            displayValues: c.join(", ")
        })
    }
});
ELM.Activities.Index = new Class({
    toString: "Index",
    extend: F.Component,
    View: F.View.extend({
        events: {
            "tap .estimated-lift .icon-help-circle": "toggleTooltip",
            "click .create-one-to-one": "handleCreateOneToOneActivity",
            "click .create-recs": "handleCreateRecsActivity",
            "click .create-mvt": "handleCreateMvtActivity"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.addSubComponents();
        this.listenTo(this, "component:shown", function() {
            this.startActivitiesWatcher()
        });
        this.bindScrollEventToScrollableArea()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.setSearchQuery);
        this.bind(this.setFilterActivities);
        this.bind(this.clearSearchResults);
        this.bind(this.setScrollableHeightAndWrapperMinHeight);
        this.bind(this.stopActivitiesWatcher);
        this.bind(this.updateActivitiesHeader);
        this.bind(this.activityListSearch);
        this.bind(this.handleScroll)
    },
    registerGlobalTriggers: function() {
        F.on("rail:search", this.setSearchQuery);
        F.on("rail:filter", this.setFilterActivities);
        F.on("activities:clearSearchResults", this.clearSearchResults);
        F.on("window:resize", this.setScrollableHeightAndWrapperMinHeight)
    },
    unregisterGlobalTriggers: function() {
        F.off("rail:search", this.setSearchQuery);
        F.off("rail:filter", this.setFilterActivities);
        F.off("activities:clearSearchResults", this.clearSearchResults);
        F.off("window:resize", this.setScrollableHeightAndWrapperMinHeight)
    },
    initView: function(c) {
        var b = (ELM.reportingEngine === "transitional") && ELM.scEnabled,
            a = (ELM.reportingEngine === "analytics") && ELM.scEnabled;
        this.view = new this.View({
            el: c,
            template: ELM.Activities.Templates.Index,
            model: {
                ABandA4TEnabled: b,
                oneToOneEnabled: ELM.isAbtEnabled,
                recsEnabled: ELM.isRecsEnabled,
                A4TEnabledOnly: a,
                MvtEnabled: ELM.isMvtEnabled
            },
            component: this
        }).render()
    },
    registerVars: function() {
        this.searchQuery = null;
        this.filters = {};
        this.defaultNewActivityDialogOptions = {
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: function(a) {
                    a.dialog.hide()
                }
            }, {
                label: Granite.I18n.get("Create Activity"),
                className: "primary",
                disabled: "disabled"
            }]
        }
    },
    addSubComponents: function() {
        this.addSorter();
        this.addActivityList();
        this.addSearcher();
        this.addNewActivityDialog()
    },
    addSorter: function() {
        this.addComponent(new ELM.Sorter({
            el: this.view.$(".activity-sorter-placeholder"),
            model: {
                name: "activitySorter",
                ascending: false,
                options: [{
                    value: "status",
                    label: Granite.I18n.get("Status")
                }, {
                    value: "jcr:title",
                    label: Granite.I18n.get("Activity Name")
                }, {
                    value: "jcr:lastModified",
                    label: Granite.I18n.get("Last Updated"),
                    selected: true
                }, {
                    value: "activityUrl",
                    label: Granite.I18n.get("Activity URL")
                }, {
                    value: "activityType",
                    label: Granite.I18n.get("Activity Type")
                }]
            }
        }), "activitySorter")
    },
    addActivityList: function() {
        var a = this;
        this.addComponent(new ELM.Activities.ActivityList({
            el: this.view.$(".activities"),
            visible: true
        }), "activities").on("collection:loaded", this.updateActivitiesHeader).on("updateStatus", function() {
            a.startActivitiesWatcher()
        })
    },
    addSearcher: function() {
        this.addComponent(new ELM.Searcher({
            el: this.view.$el.find(".activity-search-placeholder"),
            model: {
                options: [{
                    value: "search",
                    label: Granite.I18n.get("Activity Name"),
                    placeholder: Granite.I18n.get("Search Activity Name"),
                    selected: true
                }, {
                    value: "searchUrl",
                    label: Granite.I18n.get("URL"),
                    placeholder: Granite.I18n.get("Search URL")
                }]
            }
        }), "searcher").on("search:changed", this.activityListSearch)
    },
    addNewActivityDialog: function() {
        this.addComponent(new ELM.Activities.NewActivityDialogStandard({
            el: this.view.$("#new-activity-dialog").appendTo("body")
        }), "newActivityDialog")
    },
    startActivitiesWatcher: function() {
        var a = 5000;
        var c = 1000 * 60 * 7;
        var b = this.components.activities;
        this.stopActivitiesWatcher();
        this.activitiesWatchProcessId = setInterval(function() {
            b.updateActivities()
        }, a);
        this.stopWatchActivitiesProcessId = setTimeout(this.stopActivitiesWatcher, c)
    },
    stopActivitiesWatcher: function() {
        if(this.activitiesWatchProcessId) {
            clearTimeout(this.activitiesWatchProcessId)
        }
        if(this.stopWatchActivitiesProcessId) {
            clearTimeout(this.stopWatchActivitiesProcessId)
        }
    },
    setSearchQuery: function(a) {
        this.searchQuery = a
    },
    setFilterActivities: function(a) {
        this.filters[a.name] = a.displayValues
    },
    updateActivitiesHeader: function(a, b) {
        var d = a.length,
            c = Granite.I18n.get("Activities ({0})", [d || 0]),
            f = [],
            g = "",
            e;
        if(this.searchQuery) {
            c = Granite.I18n.get("Activity results ({0})", [d || 0])
        }
        if(d && b) {
            if(this.searchQuery) {
                c = Granite.I18n.get("Activity results ({0} of {1})", [d, b])
            } else {
                c = Granite.I18n.get("Activities ({0} of {1})", [d, b])
            }
        }
        _.each(this.filters, function(h) {
            if(h) {
                f.push(h)
            }
        });
        e = f.join(", ");
        if(e) {
            g = Granite.I18n.get(", showing {0}", [e], ", showing Draft,Archived");
            c += g
        }
        this.view.$(".activitiesHeader").text(c);
        if(!CUI.util.isTouch) {
            this.view.$(".create-activity-button").prop("disabled", false).parent().attr("data-toggle", "popover")
        }
    },
    clearSearchResults: function() {
        this.components.searcher.clear()
    },
    show: function() {
        this.inherited(arguments);
        this.setScrollableHeightAndWrapperMinHeight()
    },
    setScrollableHeightAndWrapperMinHeight: function() {
        if(this.isVisible()) {
            var a = this.view.$(".scrollable"),
                b = window.innerHeight - a.offset().top;
            a.height(b);
            this.view.$(".wrapper").css("min-height", b)
        }
    },
    bindScrollEventToScrollableArea: function() {
        this.view.$(".scrollable").bind("scroll", this.handleScroll)
    },
    handleScroll: function(a) {
        this.activities.handleScroll(a)
    },
    activityListSearch: function(b, a) {
        this.setSearchQuery(b);
        if(this.searchBy && this.searchBy !== a) {
            this.components.activities.setParameter(this.searchBy, "")
        }
        this.searchBy = a;
        this.components.activities.searchActivities(b, a)
    },
    toggleTooltip: function(a) {
        a.stopPropagation();
        $(a.currentTarget).siblings(".tooltip").toggle()
    },
    validateUrlAndNavigate: function(a, b) {
        var c = a.dialog.$element.find("#urlField"),
            d = c.val().trim();
        if(!ELM.Util.UrlValidationRegex.test(d)) {
            c.addClass("error");
            return
        }
        a.dialog.hide();
        F.trigger("new:activity", {
            url: d
        });
        ELM.Activities.router.navigate(b, {
            trigger: true
        })
    },
    handleCreateOneToOneActivity: function() {
        var a = this;
        this.defaultNewActivityDialogOptions.buttons[1].click = function(b) {
            a.validateUrlAndNavigate(b, "#new/1-1")
        };
        F.trigger("activity-creation:select-url-dialog", {
            newActivityDialogOptions: this.defaultNewActivityDialogOptions,
            activityType: ELM.Activities.activityTypes.ONE_TO_ONE
        })
    },
    handleCreateRecsActivity: function() {
        var a = this;
        this.defaultNewActivityDialogOptions.buttons[1].click = function(b) {
            a.validateUrlAndNavigate(b, "#new/recommendation")
        };
        F.trigger("activity-creation:select-url-dialog", {
            newActivityDialogOptions: this.defaultNewActivityDialogOptions,
            activityType: ELM.Activities.activityTypes.RECOMMENDATION
        })
    },
    handleCreateMvtActivity: function() {
        var a = this;
        this.defaultNewActivityDialogOptions.buttons[1].click = function(b) {
            a.validateUrlAndNavigate(b, "#new/MVT")
        };
        F.trigger("activity-creation:select-url-dialog", {
            newActivityDialogOptions: this.defaultNewActivityDialogOptions,
            activityType: ELM.Activities.activityTypes.MVT
        })
    }
});
ELM.Activities.Details = new Class({
    toString: "Details",
    extend: F.Component,
    TABS: {
        OVERVIEW: 0,
        REPORTS: 1,
        COLLISIONS: 2
    },
    View: F.View.extend({
        events: {
            "click .tabs nav a.tab-header": "updateLocationHash",
            "tap .tabs nav a.tab-header": "updateLocationHash",
            "click .syncErrorIcon": "showSyncErrorMessage",
            "click .syncErrorNotifier .close": "hideSyncNotifier",
            "tap .estimated-lift .morelink": "toggleTooltip",
            "mouseenter .estimated-lift .morelink": "updateTooltipLeftPosition"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.registerListeners();
        this.registerGlobalTriggers()
    },
    handleRenderComplete: function() {
        this.addHeader();
        this.addOverview();
        this.registerVars();
        this.startPollingForUpdates();
        this.showStatusTooltipIfRequired();
        this.initializeWidgets();
        this.disableElements();
        this.updateSharedLinksInfo();
        this.resetReportInitialization()
    },
    initializeWidgets: function() {
        this.cuiTabs = new CUI.Tabs({
            element: this.view.$(".tabs")
        })
    },
    registerVars: function() {
        this.activityStatusBar = this.view.$(".activityStatusRow");
        this.collisionInitialized = false
    },
    disableElements: function() {
        this.view.$(".disable-in-details-view").attr("disabled", "disabled")
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.updateActivity);
        this.bind(this.navigateToRoot);
        this.bind(this.shareTartanCard);
        this.bind(this.triggerActivityActionEvent);
        this.bind(this.updateActivityDetails);
        this.bind(this.updateActivityStatusBar);
        this.bind(this.updateRetrievingCollisionData)
    },
    initView: function(a) {
        $(document.body).append(a);
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.ActivityDetails
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.handleRenderComplete()
        })
    },
    registerGlobalTriggers: function() {
        F.on("A-B:activityStatus:updated A-B-analytics:activityStatus:updated Experience-Targeting:activityStatus:updated", this.updateActivityDetails);
        F.on("A-B:reportSummary:fetched Experience-Targeting:reportSummary:fetched", this.updateActivityStatusBar);
        if(ELM.isActivityCollisionEnabled) {
            F.on("A-B:collision:noData A-B-analytics:collision:noData Experience-Targeting:collision:noData", this.updateRetrievingCollisionData)
        }
    },
    unRegisterGlobalTriggers: function() {
        F.off("A-B:activityStatus:updated A-B-analytics:activityStatus:updated Experience-Targeting:activityStatus:updated", this.updateActivityDetails);
        F.off("A-B:reportSummary:fetched Experience-Targeting:reportSummary:fetched", this.updateActivityStatusBar);
        F.off("A-B:collision:noData A-B-analytics:collision:noData Experience-Targeting:collision:noData", this.updateRetrievingCollisionData)
    },
    resetReportInitialization: function() {
        this.reportsInitialized = false
    },
    addHeader: function() {
        this.addComponent(new ELM.Activities.DetailsHeader({
            el: this.view.$(".detailsHeader"),
            model: new ELM.Model(this.getHeaderModel()),
            visible: true
        }), "activityDetailsHeader").on("activityAction", this.triggerActivityActionEvent).on("backPressed", this.navigateToRoot).on("cardShared", this.shareTartanCard)
    },
    getHeaderModel: function() {
        return {
            id: this.model.getId(),
            "jcr:title": this.model.getTitle(),
            status: this.model.getStatus(),
            activityType: this.model.getActivityType(),
            isUserApprover: this.model.isUserApprover() ? true : false
        }
    },
    addOverview: function() {
        this.addComponent(new ELM.Activities.Overview({
            el: this.view.$(".activityOverview"),
            activityModel: this.model
        }), "activityOverview")
    },
    getSharedLinksMarkup: function() {
        var d = this.model.getTargetId(),
            f = this.model.getExperiences(),
            a = this.model.getActivityUrl(),
            b = this.model.getActivityType(),
            e, c = "";
        _.each(f, function(h) {
            var g, i = ELM.Util.escape(h["jcr:title"]);
            c += "<li>";
            if(b === ELM.Activities.activityTypes.EXPERIENCE_TARGETING && h["ref:audiences"][0]) {
                e = this.model.getAudienceDataFromRef(h["ref:audiences"][0]);
                g = ELM.Util.escape(e["jcr:title"]);
                c += "<span>" + g + "</span>";
                c += "&nbsp;-&nbsp;"
            }
            if(h.excluded) {
                c += '<span class="color-afafaf">' + i + " (" + Granite.I18n.get("Excluded") + ")</span>"
            } else {
                c += '<a href="' + ELM.tntHost + "/onsite/admin?campaignId=" + d + "&recipeName=" + h.targetName + "&siteAction=redirect&clientCode=" + ELM.tntClientCode + "&open=campaignPreview&externalPreview=true&redirect=" + encodeURIComponent(a) + '&hideOnsite=true" target="_blank">' + i + "</a>"
            }
            c += "</li>"
        }, this);
        return c
    },
    updateSharedLinksInfo: function() {
        var a = this.getSharedLinksMarkup();
        this.view.$("#previewLinksList").html(a)
    },
    updateRetrievingCollisionData: function() {
        this.view.$(".activityCollisions").find(".retrieving").toggleClass("retrieving retrieving-done")
    },
    startPollingForUpdates: function() {
        var a = 5000;
        setInterval(this.updateActivity, a);
        this.busyRetrivingActivityUpdate = false;
        if(ELM.isProjectedEarningsEnabled) {
            this.listenTo(this.model, "change:bestOpportunity", function() {
                this.renderEstimatedLiftUpdate()
            })
        }
    },
    updateActivity: function() {
        if(!this.view.$el.is(":visible") || this.busyRetrivingActivityUpdate) {
            return
        }
        var d = this,
            a = this.model.getStatus(),
            e = this.model.getSyncStatus(),
            b = this.model.getSyncPendingStatus(),
            c = [ELM.Activities.status.SYNCING, ELM.Activities.status.ACTIVATING, ELM.Activities.status.DEACTIVATING];
        if(!this.model.getSyncPendingStatus() && c.indexOf(a) === -1) {
            return
        }
        this.busyRetrivingActivityUpdate = true;
        this.model.fetch({
            success: function(f) {
                if(a !== f.getStatus() || e !== f.getSyncStatus() || b !== f.getSyncPendingStatus()) {
                    d.previousActivityStatus = a;
                    d.renderActivityStatusAndSyncUpdates();
                    d.updateSharedLinksInfo()
                }
                d.busyRetrivingActivityUpdate = false
            }
        })
    },
    renderActivityStatusAndSyncUpdates: function() {
        var b = this.model.getStatus(),
            c = this.model.getSyncStatus(),
            e = this.model.getSyncPendingStatus(),
            d = this.getActivityStatusColumnMarkup(),
            f = d(this.model.toJSON()),
            a = this.getActivityUpdateNotificationMessage();
        if(b && b.length) {
            b = ELM.Activities.displayStatus[b]
        }
        this.view.$(".activityStatus").text(b);
        this.activityStatusBar.find(".status").remove().end().prepend(f);
        if(!e) {
            if(c) {
                this.showSyncErrorMessage()
            } else {
                this.hideSyncErrorMessage();
                if(a) {
                    F.trigger("successNotification", {
                        message: a
                    })
                }
            }
        }
        this.updateToolbar()
    },
    renderEstimatedLiftUpdate: function() {
        var a = this.getEstimatedLiftColumnMarkup(),
            b = a(this.model.toJSON());
        this.activityStatusBar.find(".estimated-lift").html(b)
    },
    getActivityStatusColumnMarkup: function() {
        return Handlebars.compile(['<div class="cell middle status container-relative {{#activitySyncFailed sync.root}}inactive{{/activitySyncFailed}}">', '{{#activitySyncFailed sync.root}}<i class="icon-alert small red syncErrorIcon"></i>{{/activitySyncFailed}}', '<span class="activityStatus">{{readGlobalVar "ELM.Activities.displayStatus" status}}</span>', '{{#activitySyncFailed sync.root}}<span>({{i18n "sync error"}})</span>{{/activitySyncFailed}}', '{{#isActivityUpdating status sync.root.targetSyncPending}}<span class="wait"></span>{{/isActivityUpdating}}', '{{#equals status "LIVE"}}&nbsp;({{getDate activatedDate format="MMM DD YYYY" comment="Date format pattern for moment.js. e.g. Nov 13 2013 (http://momentjs.com/docs)"}}&nbsp;-&nbsp;{{i18n "Present"}}){{/equals}}', "</div>"].join(""))
    },
    getEstimatedLiftColumnMarkup: function() {
        return Handlebars.compile(["{{#if bestOpportunity}}", '<i class="icon-graphtrend small"></i>', '<span class="morelink">', '&nbsp;{{i18n "Predicted Revenue for Winner"}}:&nbsp;{{formatEstimatedValue bestOpportunity 1}}', '<span class="tooltip arrow-left">', '{{i18n "Predicted increase in revenue if 100% of your audience sees the winning experience."}}&nbsp;', '<a href="http://microsite.omniture.com/t2/help/en_US/target/#target-Reports" target="_blank">{{i18n "Learn more"}}</a>', "</span>", "</span>", "{{/if}}"].join(""))
    },
    showSyncErrorMessage: function() {
        $(".notificationAlert").hide();
        this.view.$(".syncErrorNotifier").removeClass("hidden").show();
        this.view.$(".syncFailureReason").text(this.model.getCallToAction())
    },
    hideSyncErrorMessage: function() {
        this.view.$(".syncErrorNotifier").addClass("hidden")
    },
    getActivityUpdateNotificationMessage: function() {
        var a = this.model.getStatus().toUpperCase();
        switch(a) {
            case ELM.Activities.status.LIVE:
                return Granite.I18n.get("Your activity is now LIVE");
            case ELM.Activities.status.INACTIVE:
                if(this.previousActivityStatus && this.previousActivityStatus.toUpperCase() === ELM.Activities.status.SYNCING) {
                    return Granite.I18n.get("Your activity is now ready to ACTIVATE")
                } else {
                    return Granite.I18n.get("Your activity is now INACTIVE")
                }
            case ELM.Activities.status.SCHEDULED:
                return Granite.I18n.get("Your activity is now SCHEDULED to go live");
            default:
                return ""
        }
    },
    updateLocationHash: function(b) {
        var a = b.currentTarget.hash;
        if(a && a !== window.location.hash) {
            window.location.hash = a;
            this.hideAllSubComponents(["activityOverview", "activityDetailsHeader"])
        }
    },
    initReports: function() {
        var a = this.model.getStatus(),
            b = this.view.$el.find(".activityReports .alert"),
            c = a === ELM.Activities.status.DRAFT || a === ELM.Activities.status.SYNCING;
        if(this.reportsInitialized || c) {
            b.removeClass("hidden");
            this.components.activityReport.show({
                silent: true
            });
            this.components.activityReport.components.reportChart.renderGraph();
            return
        }
        this.reportsInitialized = true;
        this.addReport()
    },
    addReport: function() {
        var a = {};
        a[ELM.Activities.activityTypes.AB_TEST] = this.addABReport.bind(this);
        a[ELM.Activities.activityTypes.AB_ANALYTICS] = this.addA4TReport.bind(this);
        a[ELM.Activities.activityTypes.EXPERIENCE_TARGETING] = this.addExperienceTargetingReport.bind(this);
        a[this.model.getActivityType()]()
    },
    addABReport: function() {
        var a = this.getReportModelFromActivityData();
        this.addComponent(new ELM.Activities.ReportsAB({
            el: this.view.$(".activityReports"),
            model: a
        }), "activityReport")
    },
    addA4TReport: function() {
        var a = this.getReportModelFromActivityData();
        a.targetId = this.model.getTargetId();
        a.reportSuite = this.model.getReportSuite();
        this.addComponent(new ELM.Activities.ReportsA4T({
            el: this.view.$(".activityReports"),
            model: a
        }), "activityReport")
    },
    addExperienceTargetingReport: function() {
        var a = this.getReportModelFromActivityData();
        this.addComponent(new ELM.Activities.ReportsExperienceTargeting({
            el: this.view.$(".activityReports"),
            model: a
        }), "activityReport")
    },
    getReportModelFromActivityData: function() {
        var a = this.model.getMetrics();
        return {
            id: this.model.getId(),
            activityType: this.model.getActivityType(),
            startDate: this.model.getStartDate() || this.model.getActivatedDate(),
            endDate: this.model.getEndDate() || this.model.getDeactivatedDate(),
            experiences: this.model.getExperiences(),
            controlExperienceId: this.model.getControlExperienceId(),
            controlExperience: this.model.getControlExperience(),
            metrics: a,
            successMetric: a[0],
            reportingAudiences: this.model.getReportingAudiences(),
            extremeOrders: true,
            calculationMode: "cumulative"
        }
    },
    initCollision: function() {
        if(this.collisionInitialized) {
            this.components.activityCollision.show({
                silent: true
            });
            return
        }
        this.collisionInitialized = true;
        this.addCollisionComponent()
    },
    addCollisionComponent: function() {
        this.addComponent(new ELM.Activities.Collision({
            el: this.view.$(".activityCollisions"),
            activityId: this.model.getId()
        }), "activityCollision")
    },
    shareTartanCard: function() {
        tartan.shareCard(this.getShareOptions())
    },
    getShareOptions: function() {
        return {
            url: "/target/" + ELM.client + "/target/activities.html#activitydetails/" + this.model.getActivityType() + "/:" + this.model.getId(),
            title: this.model.getTitle(),
            subtitle: this.model.getDescription(),
            product: "Target",
            type: "experiment-result",
            data: {
                dataURL: this.getSharedSummaryUrl(),
                chartType: "abntest"
            }
        }
    },
    getSharedSummaryUrl: function() {
        var b = "/target/" + ELM.client + "/target/reports/activities/" + this.model.getId(),
            a = this.model.getActivityType() === ELM.Activities.activityTypes.RECOMMENDATION;
        return a ? b + "/sharedSummary.recommendations.at.json?ims=1" : b + "/sharedSummary.at.json?ims=1"
    },
    viewShouldBeRerendered: function(b) {
        var a = 1000,
            d = 60 * a,
            c = 10;
        if(this.model.getId() !== b.getId() || this.model.getLastModified() < b.getLastModified() || this.view.age() / d > c) {
            return true
        }
        return false
    },
    show: function(b) {
        if(b && typeof b.model === "undefined") {
            throw new Error(this.toString() + ": has no model defined")
        }
        if(!this.model || this.viewShouldBeRerendered(b.model)) {
            this.model = b.model;
            for(var a in this.components) {
                this.components[a].destruct()
            }
            this.view.rendered = null
        } else {
            this.updateModelBeforeRerender(b.model)
        }
        this.inherited(arguments)
    },
    updateModelBeforeRerender: function(a) {
        var b = a.getBestOpportunity();
        if(this.model.getBestOpportunity() !== b) {
            this.model.setBestOpportunity(b)
        }
        this.updateWinnerExperience(a.getExperiences())
    },
    showReports: function(a) {
        this.show(a);
        this.cuiTabs.set("active", this.TABS.REPORTS);
        this.initReports()
    },
    showCollision: function(a) {
        this.show(a);
        this.cuiTabs.set("active", this.TABS.COLLISIONS);
        this.initCollision()
    },
    navigateToRoot: function() {
        this.view.hide();
        ELM.Activities.router.navigate("", {
            trigger: true
        })
    },
    updateToolbar: function() {
        this.components.activityDetailsHeader.updateStatus(this.model.getStatus())
    },
    showStatusTooltipIfRequired: function() {
        if(ELM.Activities.status.SYNCING === this.model.getStatus() && this.model.hasLotsOfExperiences && this.model.hasLotsOfExperiences()) {
            var a = $(['<div class="tooltip info arrow-left container-absolute margin-0 margin-l-1 min-width-23 pos-t-0-25">', Granite.I18n.get("Sync may take longer due to the number of experiences."), "</div>"].join("")).appendTo(this.view.$(".status")).tooltip();
            setTimeout(function() {
                a.fadeOut()
            }, 5000)
        }
    },
    updateTooltipLeftPosition: function() {
        var a = this.activityStatusBar.find(".morelink").width();
        this.activityStatusBar.find(".tooltip").css({
            left: a
        })
    },
    toggleTooltip: function(a) {
        a.stopPropagation();
        this.updateTooltipLeftPosition();
        $(a.currentTarget).find(".tooltip").toggle()
    },
    updateActivityDetails: function(d) {
        if(!this.model || !this.options.visible) {
            return
        }
        var e = this.model.getId(),
            b = this.model.getStatus(),
            c = d.getId(),
            a = d.getStatus();
        if((this.model && e === c) && (b !== a)) {
            this.model.setStatus(a);
            this.renderActivityStatusAndSyncUpdates()
        }
    },
    triggerActivityActionEvent: function(a) {
        F.trigger("activity:action:requested", {
            action: a,
            model: this.model
        })
    },
    updateActivityStatusBar: function(b) {
        var c, a;
        if(this.model.getMetrics()[0]["jcr:title"] !== b.reportFilter.successMetric) {
            return
        }
        c = _.filter(b.experiences, function(d) {
            return !d.deleted
        });
        this.updateWinnerExperience(c);
        a = b.projectedRevenues && b.projectedRevenues["bestOpportunity"];
        if(a !== this.model.getBestOpportunity()) {
            this.model.setBestOpportunity(a)
        }
    },
    updateWinnerExperience: function(d) {
        var a = this.model.getExperiences(),
            b = a.length,
            c = false;
        while(--b >= 0) {
            if(a[b].winner !== d[b].winner) {
                a[b].winner = d[b].winner;
                c = true
            }
        }
    },
    hideSyncNotifier: function(a) {
        a.stopPropagation();
        this.hideSyncErrorMessage()
    }
});
ELM.Activities.DetailsHeader = new Class({
    toString: "DetailsHeader",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .icon-back": "triggerEvent",
            "click .icon-pinoff": "triggerEvent",
            "click .activity-action-button": "triggerActivityAction"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.load(a.model)
    },
    registerBinders: function() {
        this.bind(this.triggerEvent)
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.ActivityDetailsHeader
        })
    },
    triggerEvent: function(b) {
        var a = $(b.currentTarget).data("trigger-event");
        this.trigger(a)
    },
    triggerActivityAction: function(a) {
        var b = $(a.currentTarget).data("action-id");
        this.trigger("activityAction", b)
    },
    updateStatus: function(a) {
        this.model.set("status", a)
    }
});
ELM.Activities.OneToOneDetails = new Class({
    toString: "OneToOneDetails",
    extend: ELM.Activities.Details,
    show: function() {
        this.inherited(arguments);
        this.fetchAlgorithms()
    },
    registerGlobalTriggers: function() {
        F.on("1-1:activityStatus:updated", this.updateActivityDetails);
        if(ELM.isActivityCollisionEnabled) {
            F.on("1-1:collision:noData", this.updateRetrievingCollisionData)
        }
    },
    unRegisterGlobalTriggers: function() {
        F.off("1-1:activityStatus:updated", this.updateActivityDetails);
        F.off("1-1:collision:noData", this.updateRetrievingCollisionData)
    },
    addOverview: function() {
        this.addComponent(new ELM.Activities.OneToOneOverview({
            el: this.view.$(".activityOverview"),
            activityModel: this.model
        }), "activityOverview")
    },
    addReport: function() {
        var a = this.getReportModelFromActivityData();
        this.addComponent(new ELM.Activities.ReportsOneToOne({
            el: this.view.$(".activityReports"),
            model: a
        }), "activityReport")
    },
    getReportModelFromActivityData: function() {
        var a = this.model.getMetrics();
        return {
            id: this.model.getId(),
            activityType: this.model.getActivityType(),
            startDate: this.model.getStartDate() || this.model.getActivatedDate(),
            endDate: this.model.getEndDate() || this.model.getDeactivatedDate(),
            controlExperience: this.model.getControlExperience(),
            metrics: a,
            successMetric: a[0],
            reportingAudiences: this.model.getReportingAudiences(),
            extremeOrders: true,
            calculationMode: "cumulative"
        }
    },
    fetchAlgorithms: function() {
        var a = this;
        new ELM.Models.ProfileTargetedAlgorithms().fetch({
            success: function(c, b) {
                a.model.setAlgorithms(b.items)
            }
        })
    },
    updateSharedLinksInfo: function() {},
    updateModelBeforeRerender: function() {},
    updateWinnerExperience: function() {}
});
ELM.Activities.MVTDetails = new Class({
    toString: "MvtDetails",
    extend: ELM.Activities.Details,
    TABS: {
        OVERVIEW: 0,
        CONTRIBUTIONREPORTS: 1,
        REPORTS: 2,
        COLLISIONS: 3
    },
    View: F.View.extend({
        events: _.extend({
            "click [data-reportId]": "syncDateSettings"
        }, ELM.Activities.Details.prototype.View.prototype.events)
    }),
    syncDateSettings: function(d) {
        var a, b = d.currentTarget,
            c = b.getAttribute("data-reportId");
        if(_.isUndefined(this.components[c]) || _.isUndefined(this._sharedSettings) || this._sharedSettings.setBy === c || _.isUndefined(this._sharedSettings.date)) {
            return
        }
        a = this.components[c];
        a.updateDateSettings(this._sharedSettings.date);
        this._sharedSettings = void 0
    },
    registerGlobalTriggers: function() {
        F.on("MVT:activityStatus:updated", this.updateActivityDetails);
        if(ELM.isActivityCollisionEnabled) {
            F.on("MVT:collision:noData", this.updateRetrievingCollisionData)
        }
    },
    unRegisterGlobalTriggers: function() {
        F.off("MVT:activityStatus:updated", this.updateActivityDetails);
        F.off("MVT:collision:noData", this.updateRetrievingCollisionData)
    },
    registerBinders: function() {
        this.inherited(arguments);
        this.bind(this.shareLocationContributionReportDateRange);
        this.bind(this.shareExperiencePerformanceReportDateRange)
    },
    addOverview: function() {
        this.addComponent(new ELM.Activities.OneToOneOverview({
            el: this.view.$(".activityOverview"),
            activityModel: this.model
        }), "activityOverview")
    },
    addReport: function() {
        var a = this.getReportModelFromActivityData();
        this.addComponent(new ELM.Activities.ReportsOneToOne({
            el: this.view.$(".activityReports"),
            model: a
        }), "activityReport")
    },
    resetReportInitialization: function() {
        this.reportsInitialized = false;
        this.elementContributionReportInitialized = false
    },
    getReportModelFromActivityData: function() {
        var b = this.model.getMetrics(),
            c = this.model.getExperiences(),
            a = this.model.getControlExperienceId();
        return {
            id: this.model.getId(),
            activityType: this.model.getActivityType(),
            startDate: this.reportStartDate || this.model.getStartDate() || this.model.getActivatedDate(),
            endDate: this.reportEndDate || this.model.getEndDate() || this.model.getDeactivatedDate(),
            experiences: c,
            controlExperience: c[a],
            controlExperienceId: a,
            metrics: b,
            successMetric: b[0],
            reportingAudiences: this.model.getReportingAudiences(),
            extremeOrders: true,
            reportSuite: this.model.getReportSuite(),
            targetId: this.model.getTargetId(),
            activityUrl: this.model.getActivityUrl(),
            bestWorstFilterSetting: "best",
            calculationMode: "cumulative"
        }
    },
    initContributionReports: function() {
        var a = this.model.getStatus(),
            b = this.view.$el.find(".activity-contribution-report .alert"),
            c = a === ELM.Activities.status.DRAFT || a === ELM.Activities.status.SYNCING;
        if(this.elementContributionReportInitialized || c) {
            b.removeClass("hidden");
            this.components.locationContributionReport.show({
                silent: true
            });
            return
        }
        this.elementContributionReportInitialized = true;
        this.addContributionReport()
    },
    addReport: function() {
        var b = this.getReportModelFromActivityData(),
            a = ELM.Activities.ReportsMVT;
        if(b.reportSuite) {
            a = ELM.Activities.ReportsA4T
        }
        this.addComponent(new a({
            el: this.view.$(".activityReports"),
            model: b
        }), "activityReport").on("reportDateSettings:change", this.shareExperiencePerformanceReportDateRange)
    },
    addContributionReport: function() {
        var a = this.getReportModelFromActivityData();
        this.addComponent(new ELM.Activities.ReportsMVTElementContribution({
            el: this.view.$(".activity-contribution-report"),
            model: a
        }), "locationContributionReport").on("reportDateSettings:change", this.shareLocationContributionReportDateRange)
    },
    shareExperiencePerformanceReportDateRange: function(a) {
        this.shareDateRange("activityReport", a)
    },
    shareLocationContributionReportDateRange: function(a) {
        this.shareDateRange("locationContributionReport", a)
    },
    shareDateRange: function(a, b) {
        this._sharedSettings = {
            setBy: a,
            date: b
        };
        this.reportStartDate = b.startDate;
        this.reportEndDate = b.endDate
    },
    showContributionReports: function(a) {
        this.show(a);
        this.cuiTabs.set("active", this.TABS.CONTRIBUTIONREPORTS);
        this.initContributionReports()
    },
    updateModelBeforeRerender: function() {},
    updateWinnerExperience: function() {}
});
ELM.Activities.NewActivityDialog = new Class({
    toString: "NewActivityDialog",
    extend: F.Component,
    cacheSelectors: function() {
        this.$urlInput = this.view.$("#urlField");
        this.$createButton = this.view.$(".primary")
    },
    clearFields: function() {
        this.setUrlInputValue("")
    },
    setUrlInputValue: function(a) {
        this.$urlInput.val(a)
    },
    getUrlInputValue: function() {
        return $.trim(this.$urlInput[0].value)
    },
    setActivityType: function(a) {
        this.activityType = a
    },
    getActivityType: function() {
        return this.activityType
    },
    getExperienceEditorModeForActivityType: function() {
        return ELM.Activities.activityTypesExperienceEditorModesMap[this.getActivityType()]
    },
    isUrlValid: function() {
        return ELM.Util.UrlValidationRegex.test(this.getUrlInputValue())
    },
    isUrlWithoutProtocolValid: function() {
        return ELM.Util.UrlValidationWithoutProtocolRegex.test(this.getUrlInputValue())
    },
    addProtocolToUrl: function(a) {
        var b = $.trim(a.target.value);
        this.setUrlInputValue(ELM.Util.addProtocolToUrl(b))
    },
    handleFieldChange: function() {
        if(this.isUrlValid()) {
            this.$urlInput.removeClass("error");
            return
        }
        if(!this.isUrlWithoutProtocolValid()) {
            this.$urlInput.addClass("error");
            return
        }
        this.$urlInput.removeClass("error")
    }
});
ELM.Activities.NewActivityDialogStandard = new Class({
    toString: "NewActivityDialogStandard",
    extend: ELM.Activities.NewActivityDialog,
    View: F.View.extend({
        events: {
            "blur .new-activity-dialog-url": "addProtocolToUrl",
            "keyup #urlField": "handleFieldChange",
            "change #urlField": "handleFieldChange"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.registerListeners();
        this.render();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.showNewActivityDialog);
        this.bind(this.addProtocolToUrl)
    },
    registerGlobalTriggers: function() {
        F.on("activity-creation:select-url-dialog", this.showNewActivityDialog)
    },
    unregisterGlobalTriggers: function() {
        F.off("activity-creation:select-url-dialog", this.showNewActivityDialog)
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.NewActivityDialog,
            visible: false
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete.bind(this))
    },
    handleRenderComplete: function() {
        this.cacheSelectors()
    },
    showNewActivityDialog: function(a) {
        this.show({
            silent: true
        });
        this.view.$el.find(".new-activity-dialog-best-practice").hide();
        if(a.activityType === ELM.Activities.activityTypes.MVT) {
            this.view.$el.find(".new-activity-dialog-best-practice").show()
        }
        this.view.$el.modal(a.newActivityDialogOptions).data("modal").show();
        this.setActivityType(a.activityType);
        this.cacheSelectors();
        if(ELM.defaultSimulatorUrl) {
            this.setUrlInputValue(ELM.defaultSimulatorUrl)
        } else {
            this.clearFields()
        }
        this.$urlInput.focus();
        this.handleFieldChange()
    },
    handleFieldChange: function(a) {
        this.inherited(arguments);
        if(a && a.keyCode === ELM.keycodes.ENTER) {
            this.view.$("button.primary").click()
        }
    }
});
"use strict";
ELM.Activities.Properties = new Class({
    toString: "Properties",
    extend: F.ModelComponent,
    View: F.View.extend({
        tag: "form",
        events: {
            submit: "handleSubmit",
            'change input[name="jcr:title"]': "updateTitle",
            'change textarea[name="jcr:description"]': "updateDescription",
            "selected .reportSuitePicker .select": "updateReportSuite"
        }
    }),
    construct: function(b) {
        var a;
        this.view = new this.View({
            el: b.el,
            component: this,
            template: ELM.Activities.Templates.Properties
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            if(this.model.getActivityType() === ELM.Activities.activityTypes.AB_ANALYTICS) {
                this.renderReportSuitePicker();
                a = this.model.getReportSuite();
                if(a) {
                    this.loadAnalyticsMetrics(a)
                }
            }
            this.$titleInput.focus()
        });
        this.bind(this.handleSubmit);
        this.reportSuites = {}
    },
    initWidgets: function() {
        this.$titleInput = this.view.$('input[name="jcr:title"]');
        this.$titleAlert = this.view.$("#titleAlert");
        this.$reportSuitePicker = this.view.$(".reportSuitePicker")
    },
    populateReportSuites: function() {
        var a = this.model.getReportSuite(),
            c = {
                reportSuites: this.reportSuites,
                selectedReportSuite: a
            },
            b = ELM.Activities.Templates.ReportSuitePicker(c);
        this.$reportSuitePicker.html(b).find(".select").select()
    },
    renderReportSuitePicker: function() {
        if(_.size(this.reportSuites) !== 0) {
            this.populateReportSuites();
            return
        }
        var a = this,
            b;
        this.fetchReportSuites().done(function(c) {
            if(c.errmsg) {
                b = c.errmsg || "";
                a.showErrorNotification(Granite.I18n.get("Unable to load report suites from Adobe Analytics. {0}", b))
            } else {
                a.reportSuites = c
            }
        }).fail(function(c, e, d) {
            b = JSON.parse(c.responseText)["error.message"] || d;
            a.showErrorNotification(Granite.I18n.get("Unable to load report suites from Adobe Analytics. {0}", b))
        }).always(function() {
            a.populateReportSuites()
        })
    },
    fetchReportSuites: function() {
        return $.ajax({
            url: "/apps/mac/target/sc/rs.at.json?path=dms&depth=1",
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    onComplete: function() {
        return this.isComplete()
    },
    isComplete: function() {
        return this.validateReportSuite()
    },
    updateTitle: function(b) {
        var a = b.currentTarget.value.trim();
        if(a) {
            this.model.setTitle(a)
        } else {
            $(b.currentTarget).val("")
        }
    },
    updateDescription: function(a) {
        this.model.setDescription(a.currentTarget.value)
    },
    updateReportSuite: function(a) {
        var b = this.model.getMetrics()[0];
        this.model.setReportSuite(a.selected);
        this.loadAnalyticsMetrics(a.selected);
        if(b && b.type === "analytics") {
            this.model.setMetrics([])
        }
        this.validateReportSuite()
    },
    loadAnalyticsMetrics: function(a) {
        var d = this,
            c, b;
        this.fetchMetricsForReportSuite(a).done(function(e) {
            if(e.errmsg) {
                c = e.errmsg || "";
                d.showErrorNotification(Granite.I18n.get("Error loading metrics from Analytics. {0}", c))
            } else {
                b = _.sortBy(_.map(e, function(g, f) {
                    return {
                        id: f,
                        name: g.name,
                        frag_id: g.frag_id,
                        type: g.type,
                        source: g.source,
                        data_group: g.data_group
                    }
                }), function(f) {
                    return f.name
                });
                F.trigger(ELM.evtNamespace + ":editor:receivedAnalyticsMetrics", b)
            }
        }).fail(function(e, g, f) {
            c = JSON.parse(e.responseText)["error.message"] || f;
            d.showErrorNotification(Granite.I18n.get("Error loading metrics from Analytics. {0}", c))
        })
    },
    fetchMetricsForReportSuite: function(a) {
        return $.ajax({
            url: "/apps/mac/target/sc/rs.at.json?activityId=" + this.model.getId() + "&tenantId=" + ELM.client + "&path=dms/" + a + "/metrics&depth=1",
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    validateReportSuite: function() {
        var b = this.model.getReportSuite(),
            a = this.$reportSuitePicker.find(".select button");
        if(!b && (this.model.getActivityType() === ELM.Activities.activityTypes.AB_ANALYTICS)) {
            this.showErrorNotification(Granite.I18n.get("Choose a report suite to continue."));
            a.addClass("error");
            return false
        }
        a.removeClass("error");
        return true
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a
        })
    },
    handleSubmit: function(a) {
        a.preventDefault();
        if(this.onComplete()) {
            this.trigger("step:complete")
        }
    }
});
ELM.Activities.SelectedAudiences = new Class({
    toString: "selectedAudiences",
    extend: F.Component,
    View: F.View,
    options: {
        visible: true
    },
    construct: function(a) {
        this.view = new this.View({
            el: a.el
        });
        this.cacheCollection = new Backbone.Collection([], {
            model: ELM.Models.Audience
        }).bind("add", this.updateCounter.bind(this)).bind("remove", this.updateCounter.bind(this))
    },
    getSelectedAudiences: function() {
        return this.cacheCollection.models
    },
    getCount: function() {
        return this.cacheCollection.size()
    },
    updateCounter: function() {
        var a = Granite.I18n.get('You have <div class="badge empty">0</div> audience selected');
        if(this.getCount() > 0) {
            a = Granite.I18n.get('You have <div class="badge">{0}</div> audiences selected', [this.getCount()])
        }
        this.view.$el.html(a)
    },
    add: function(b) {
        var a = this;
        _.each(b, function(c) {
            if(!c.isSelected()) {
                throw a.toString() + " trying to add non selected audience: " + c
            }
        });
        this.cacheCollection.add(b)
    },
    remove: function(a) {
        this.cacheCollection.remove(a)
    },
    reset: function() {
        this.cacheCollection.reset();
        this.view.$el.empty()
    }
});
ELM.Activities.TemplateTesting = new Class({
    toString: "TemplateTestingRulesCreationDialog",
    extend: ELM.Activities.NewActivityDialog,
    View: F.View.extend({
        events: {
            "blur .new-activity-dialog-url": "addProtocolToUrl",
            "keyup #activityUrl": "handleFieldChange",
            "change #activityUrl": "handleFieldChange",
            "click .primary": "saveTemplates"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerTriggers();
        this.registerListeners();
        this.render()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.TemplateTestingModal
        })
    },
    registerBinders: function() {
        this.bind(this.showModal);
        this.bind(this.saveTemplates);
        this.bind(this.handleFieldChange);
        this.bind(this.setActivityType);
        this.bind(this.setUrlInputValue);
        this.bind(this.getUrlInputValue);
        this.bind(this.getActivityType);
        this.bind(this.getExperienceEditorModeForActivityType);
        this.bind(this.addProtocolToUrl)
    },
    registerTriggers: function() {
        this.on("template-testing:select-url-dialog", this.showModal)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete.bind(this))
    },
    cacheSelectors: function() {
        this.$urlInput = this.view.$("#activityUrl");
        this.$javascriptCheckbox = this.view.$("#toggle-javascript");
        this.$saveButton = this.view.$(".primary");
        this.$accordion = this.view.$("#template-testing-collapsible")
    },
    setUrlInputValue: function(a) {
        this.$urlInput.val(a);
        this.view.$(".activity-url").text(a)
    },
    handleRenderComplete: function() {
        var a = this.view.$el;
        this.cacheSelectors();
        a.modal("hide");
        this.$accordion.accordion();
        this.modal = a.data("modal");
        this.addSubComponents()
    },
    addSubComponents: function() {
        this.addTemplateTestingCriteriaComponent()
    },
    addTemplateTestingCriteriaComponent: function() {
        this.addComponent(new ELM.Activities.TemplateTestingCriteria({
            el: this.view.$("#criteria-placeholder"),
            model: new ELM.Model({
                criteria: this.lastCriteria
            } || {
                criteria: []
            })
        }))
    },
    showModal: function(a) {
        var e, c, d = _.isUndefined(a.isShownFromEE) || _.isNull(a.isShownFromEE) ? true : a.isShownFromEE,
            b = this.view.$el.find("#legacy-template-placeholder");
        this.modal.show();
        this.lastCriteria = a.criteria;
        this.setActivityType(a.activityType);
        if(this.isLegacyTemplate()) {
            e = ELM.Activities.Templates.TemplateTestingCriteria.LegacyTargetRulesTemplate({
                rulesString: a.criteria.templateString.split("OR")
            });
            b.removeClass("display-none").html(e)
        } else {
            b.addClass("display-none").html("");
            this.components.templateTestingCriteria.showCriteriaSelection({
                model: new ELM.Model({
                    criteria: a.criteria
                })
            })
        }
        this.cacheSelectors();
        this.setUrlInputValue(a.url);
        this.handleFieldChange();
        a.disableJavascript ? this.$javascriptCheckbox.attr("checked", "checked") : this.$javascriptCheckbox.removeAttr("checked");
        if(!d) {
            this.$urlInput.attr("disabled", "disabled");
            this.view.$(".not-visible-in-ee").removeClass("display-none");
            this.view.$(".only-visible-in-ee").addClass("display-none")
        } else {
            this.$urlInput.removeAttr("disabled");
            this.view.$(".not-visible-in-ee").addClass("display-none");
            this.view.$(".only-visible-in-ee").removeClass("display-none")
        }
        c = this.$accordion.data("accordion");
        c.setActive(true)
    },
    isLegacyTemplate: function() {
        if(this.lastCriteria && !_.isArray(this.lastCriteria) && this.lastCriteria.isLegacy) {
            return true
        }
        return false
    },
    saveTemplates: function(b) {
        var a = this.getUrlInputValue(),
            d = this.$javascriptCheckbox.is(":checked"),
            f = this.components.templateTestingCriteria.getCriteriaJSON(),
            c = {
                nodeType: "operator",
                operator: "and",
                children: []
            },
            e;
        if(this.isLegacyTemplate()) {
            this.trigger("templateTestingDialogClose", {
                activityUrl: a,
                criteria: "default"
            });
            return
        }
        if(!this.isUrlValid()) {
            this.$urlInput.addClass("error")
        }
        e = _.some(f, function(g) {
            return _.some(g.operands, function(h) {
                return ELM.Util.hasStringWhiteSpaces(h)
            })
        });
        if(e) {
            ELM.Util.showNoticeNotification({
                message: Granite.I18n.get("Some of the values for template testing rules contain white spaces. If these are added by mistake please remove them OR add proper encoding for the whitespaces. This may affect content delivery."),
                heading: Granite.I18n.get("Warning")
            })
        }
        if(!f || !this.isUrlValid()) {
            b.stopImmediatePropagation();
            return
        }
        if(f.length > 1) {
            c.children = f;
            f = [c]
        }
        this.trigger("templateTestingDialogClose", {
            activityUrl: a,
            criteria: f,
            disableJavaScript: d
        })
    }
});
ELM.Activities.TemplateTestingCriteria = new Class({
    toString: "TemplateTestingCriteria",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .step": "updateConstraint",
            "input .textarea-step": "updateConstraint",
            "change .input-mbox": "fetchSelectedMboxParameters",
            "click .icon-delete": "handleDelete",
            "change .criteriaSelector": "handleAddNewCriteriaSelection"
        }
    }),
    construct: function(a) {
        this.initView(a);
        this.registerListeners();
        this.render();
        this.registerBinders();
        this.fetchMboxes()
    },
    initView: function(a) {
        this.model = a.model;
        this.view = new this.View({
            component: this,
            el: a.el,
            template: ELM.Activities.Templates.TemplateTestingCriteria,
            model: this.model
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete);
        this.listenTo(this.model, "change", this.render)
    },
    registerBinders: function() {
        this.bind(this.render);
        this.bind(this.handleRenderComplete);
        this.bind(this.showCriteriaSelection)
    },
    handleRenderComplete: function() {
        this.view.$el.find(".select").select()
    },
    fetchParameters: function(f, c) {
        var e = f[c],
            b = [],
            d = e.mbox,
            a = this;
        if(d) {
            this.fetchRequest("/target/" + ELM.client + "/target/mboxes/" + d + ".parameters.at.json").done(function(g) {
                b = _.filter(g.parameters, function(h) {
                    return h.parameterType === "MBOX"
                });
                e.parameters = b;
                a.model.set("criteria", f);
                a.model.trigger("change")
            }).fail(function() {})
        }
    },
    fetchMboxes: function() {
        var a = this;
        this.fetchRequest("/target/" + ELM.client + "/target/mboxes.at.json?pageSize=2000").done(function(b) {
            a.model.set("mboxes", b.items)
        }).fail(function() {})
    },
    fetchRequest: function(a) {
        return $.ajax({
            url: a,
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    steps: {
        _url: ["type", "parameter", "operator", "operands"],
        _domain: ["type", "parameter", "operator", "operands"],
        _path: ["type", "parameter", "operator", "operands"],
        _query: ["type", "parameter", "subParameter", "operator", "operands"],
        _mboxparameter: ["type", "mbox", "parameter", "operator", "operands"]
    },
    resetDependentSteps: function(e, d) {
        var a = this.getDefaultRule(),
            c = this.steps[e.modelid],
            b;
        for(b = c.indexOf(d) + 1; b < c.length; b += 1) {
            e[c[b]] = a[c[b]]
        }
    },
    updateConstraint: function(j) {
        var b = $(j.currentTarget),
            a = b.find(":selected"),
            i = a.data("key"),
            h = a.val(),
            c = b.data("index"),
            g = this.getCriteria(),
            d = g[c],
            e = a.data("type"),
            f = a.data("modelid");
        delete d.incomplete;
        if(f) {
            d = g[c] = this.getDefaultRule();
            d.modelid = f
        }
        if(e) {
            d.type = e
        }
        if(!i) {
            i = b.data("key");
            if(b[0].tagName == "TEXTAREA") {
                h = ELM.Util.trimArrayValues(_.compact(b.val().split("\n")))
            } else {
                h = b.val()
            }
        }
        if(i) {
            d[i] = h;
            this.resetDependentSteps(d, i)
        }
        if(b.hasClass("textarea-step")) {
            this.model.silentSet("criteria", g);
            return
        }
        this.model.set("criteria", g)
    },
    fetchSelectedMboxParameters: function(a) {
        var c = $(a.currentTarget),
            b = c.data("index");
        this.fetchParameters(this.getCriteria(), b)
    },
    handleDelete: function(a) {
        var b = $(a.currentTarget).data("index"),
            c = this.getCriteria();
        c.splice(b, 1);
        this.model.set("criteria", c)
    },
    handleAddNewCriteriaSelection: function(i) {
        var c = $(i.currentTarget),
            a = c.find(":selected"),
            h = a.data("key"),
            g = a.val(),
            f = this.getCriteria(),
            d = a.data("type"),
            e = a.data("modelid"),
            b;
        if(e) {
            f.push(this.getDefaultRule());
            b = f[f.length - 1];
            b.modelid = e
        }
        if(d) {
            b.type = d
        }
        if(h) {
            b[h] = g
        }
        this.model.set("criteria", f)
    },
    getCriteriaJSON: function() {
        var c = this.getCriteria(),
            a = false,
            b = this;
        _.each(c, function(d) {
            if(!b.isValid(d)) {
                a = true
            } else {
                delete d.incomplete;
                delete d.parameters
            }
        });
        if(a) {
            this.model.set("criteria", c);
            return false
        }
        return c
    },
    isValid: function(d) {
        var a = this.getDefaultRule(),
            c = this.steps[d.modelid],
            b;
        if(!d.modelid) {
            return true
        }
        for(b = 0; b < c.length; b += 1) {
            if(_.isEqual(d[c[b]], a[c[b]])) {
                d.incomplete = "incomplete";
                return false
            }
        }
        return true
    },
    getCriteria: function() {
        return jQuery.extend(true, [], this.model.get("criteria"))
    },
    showCriteriaSelection: function(a) {
        this.load(a.model);
        this.fetchMboxes();
        this.fetchAllMboxParameters();
        this.show({
            silent: true
        })
    },
    fetchAllMboxParameters: function() {
        var b = this.getCriteria(),
            a = this;
        _.each(b, function(d, c) {
            if(d.type == "MBOX") {
                a.fetchParameters(b, c)
            }
        })
    },
    getDefaultRule: function() {
        return {
            type: "",
            parameter: "",
            operator: "",
            operands: [],
            subParameter: "",
            mbox: ""
        }
    }
});
ELM.Activities.AudiencePicker = new Class({
    toString: "AudiencePicker",
    extend: F.ModelComponent,
    options: {
        singly: true
    },
    AUDIENCE_LIMIT: 50,
    View: F.View.extend({
        events: {
            "click .addAndClosePicker": "addAudiencesAndClosePicker",
            "click .cancelAndClosePicker": "cancelAndClosePicker",
            "click .newAudience": "showNewAudienceDialog",
            "change .allAudiences": "toggleAll"
        }
    }),
    construct: function(a) {
        this.registerVars(a);
        this.initView(a.el);
        this.registerBinders();
        this.registerGlobalTriggers();
        this.addSubComponents();
        this.registerListeners();
        this.cacheSelectors();
        this.initWidgets();
        this.$alertWidget.find("div").text(Granite.I18n.get("You cannot select more than {0} audiences for reporting.", this.AUDIENCE_LIMIT))
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerVars: function(a) {
        this.viewMode = a.viewMode
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.AudiencePicker
        }).render()
    },
    registerBinders: function() {
        this.bind(this.updateHeaderClassAttr)
    },
    registerGlobalTriggers: function() {
        F.on("window:resize", this.updateHeaderClassAttr)
    },
    unRegisterGlobalTriggers: function() {
        F.off("window:resize", this.updateHeaderClassAttr)
    },
    addSubComponents: function() {
        this.addSearcher();
        this.addSorter();
        this.addAudienceList();
        this.addSelectedAudiences();
        this.addNewAudience()
    },
    addSearcher: function() {
        this.addComponent(new ELM.Searcher({
            el: this.view.$el.find(".audience-search-placeholder")
        }), "searcher").on("search:changed", this.audienceListSearch.bind(this))
    },
    addSorter: function() {
        this.addComponent(new ELM.Sorter({
            el: this.view.$el.find(".audience-sorter-placeholder"),
            model: {
                name: "audienceSorter",
                ascending: false,
                options: [{
                    value: "jcr:title",
                    label: Granite.I18n.get("Audience Name")
                }, {
                    value: "jcr:lastModified",
                    label: Granite.I18n.get("Date Modified"),
                    selected: true
                }]
            }
        }), "audienceSorter")
    },
    addAudienceList: function() {
        this.addComponent(new ELM.Activities.AudienceList({
            el: this.view.$(".audienceList"),
            visible: true
        }), "audiencelist").on("list:itemSelected", this.audienceItemSelected.bind(this)).on("collection:loaded", this.updateView.bind(this))
    },
    addSelectedAudiences: function() {
        this.addComponent(new ELM.Activities.SelectedAudiences({
            el: this.view.$(".selectedAudienceInfoPlaceholder"),
            visible: true
        }), "selectedAudienceList")
    },
    addNewAudience: function() {
        this.addComponent(new ELM.Activities.NewAudience({
            el: this.view.$(".activitynewaudiencedialog"),
            visible: false
        }), "newaudience").on("newAudienceDialog:hide", this.showAudienceList.bind(this)).on("audience:saved", this.showUpdatedAudienceList.bind(this))
    },
    registerListeners: function() {
        this.view.$(".audienceList").bind("scroll", this.bind(function(a) {
            this.components.audiencelist.handleScroll(a)
        }))
    },
    cacheSelectors: function() {
        this.audiencesHeaderEl = this.view.$(".audiencesHeader");
        this.$alertWidget = this.view.$el.find(".alert");
        this.$allAudiences = this.view.$(".allAudiences")
    },
    initWidgets: function() {
        if(this.isViewModeSlidingPanel()) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
    },
    isViewModeSlidingPanel: function() {
        return this.viewMode === "slidingPanel"
    },
    updateHeaderClassAttr: function() {
        var b = this.components.audiencelist.view.$el[0];
        var a = b.scrollHeight > b.clientHeight;
        var c = this.view.$el.find(".audienceList-header");
        if(a) {
            c.addClass("scrolling-present")
        } else {
            c.removeClass("scrolling-present")
        }
    },
    toggleCheckboxes: function() {
        if(this.multiSelection) {
            this.view.$el.removeClass("singleMode")
        } else {
            this.view.$el.addClass("singleMode")
        }
    },
    toggleAllVisitorsAudiences: function() {
        if(this.hideAllVisitors) {
            this.view.$el.addClass("hideAllVisitorsMode")
        } else {
            this.view.$el.removeClass("hideAllVisitorsMode")
        }
    },
    showPicker: function(a) {
        this.multiSelection = a.multiSelection;
        this.hideAllVisitors = a.hideAllVisitors;
        this.reportingAudiencesCount = a.reportingAudiencesCount || 0;
        this.selectedAudienceConsumer = a.selectedAudienceConsumer;
        this.show({
            silent: true
        });
        this.showAudienceList();
        this.toggleCheckboxes();
        this.toggleAllVisitorsAudiences();
        this.uncheckSelectAllCheckbox();
        this.clearHeaderTitle();
        this.components.audiencelist.deselectAll();
        this.components.searcher.clear();
        this.components.selectedAudienceList.reset();
        if(this.multiSelection) {
            this.view.$(".addAndClosePicker").removeClass("hidden");
            this.view.$(".addAndClosePicker").html(a.addAndCloseButtonLabel).prop("disabled", true)
        } else {
            this.view.$(".addAndClosePicker").addClass("hidden")
        }
        this.updateHeaderClassAttr();
        if(this.isViewModeSlidingPanel()) {
            this.slidingPanel.show()
        }
    },
    updateHeaderTitle: function(c, b) {
        if(!b) {
            b = c
        }
        var a = Granite.I18n.get("Audiences (0)");
        this.updateHeaderClassAttr();
        if(c && b) {
            a = Granite.I18n.get("Audiences ({0} of {1})", [c, b])
        } else {
            if(c) {
                a = Granite.I18n.get("Audiences ({0})", c)
            }
        }
        this.updateHeaderTitleWithText(a)
    },
    updateHeaderTitleWithText: function(a) {
        this.audiencesHeaderEl.text(a)
    },
    clearHeaderTitle: function() {
        this.updateHeaderTitleWithText(Granite.I18n.get("Audiences (counting...)"))
    },
    updateView: function(a, b) {
        this.updateHeaderTitle(this.components.audiencelist.getAllVisibleAudienceCount(), b);
        this.uncheckSelectAllCheckbox();
        this.updateListWithSelectedAudiences()
    },
    updateListWithSelectedAudiences: function() {
        var a = this.components.selectedAudienceList.getSelectedAudiences();
        if(!a.length) {
            return
        }
        this.components.audiencelist.updateListWithSelectedAudiences(a)
    },
    updateAlertAndSubmitButtonViews: function() {
        var a = this.getSelectedAudiencesCount();
        var b = a + this.reportingAudiencesCount;
        if(b > this.AUDIENCE_LIMIT) {
            this.showAlertWidget()
        } else {
            this.hideAlertWidget()
        }
        if(a > 0 && b <= this.AUDIENCE_LIMIT) {
            this.enableAddToReportsButton()
        } else {
            this.disableAddToReportsButton()
        }
    },
    audienceItemSelected: function(b) {
        var a = b.model;
        a.toggleSelected();
        if(a.isSelected()) {
            this.selectAudience(a)
        } else {
            this.deselectAudience(a)
        }
    },
    selectAudience: function(a) {
        if(this.multiSelection) {
            this.selectAudiences([a])
        } else {
            if(typeof this.selectedAudienceConsumer === "function") {
                this.selectedAudienceConsumer(a)
            }
            this.closePicker()
        }
    },
    deselectAudience: function(a) {
        this.deselectAudiences([a]);
        this.uncheckSelectAllCheckbox()
    },
    addAudiencesAndClosePicker: function(a) {
        var b = this.components.selectedAudienceList.getSelectedAudiences();
        a.preventDefault();
        if(typeof this.selectedAudienceConsumer === "function") {
            this.selectedAudienceConsumer(b)
        }
        this.closePicker()
    },
    cancelAndClosePicker: function(a) {
        a.preventDefault();
        this.hideAlertWidget();
        this.closePicker()
    },
    closePicker: function() {
        if(this.isViewModeSlidingPanel()) {
            this.slidingPanel.hide()
        } else {
            this.hide()
        }
    },
    isComplete: function() {
        return true
    },
    showNewAudienceDialog: function() {
        this.components.newaudience.show({
            silent: true
        })
    },
    showAudienceList: function() {
        this.components.newaudience.hide();
        this.components.audiencelist.show({
            silent: true
        })
    },
    showUpdatedAudienceList: function() {
        this.components.audiencelist.updateList();
        this.showAudienceList()
    },
    isAllAudienceChecked: function() {
        return this.$allAudiences.prop("checked")
    },
    uncheckSelectAllCheckbox: function() {
        if(this.isAllAudienceChecked()) {
            this.$allAudiences.prop("checked", false)
        }
    },
    checkSelectAllCheckbox: function() {
        if(!this.isAllAudienceChecked()) {
            this.$allAudiences.prop("checked", true)
        }
    },
    toggleAll: function(a) {
        var c = a.currentTarget.checked;
        var b = this.components.audiencelist.getAllAudiences();
        if(c) {
            this.components.audiencelist.selectAll();
            this.selectAudiences(b)
        } else {
            this.components.audiencelist.deselectAll();
            this.deselectAudiences(b)
        }
    },
    selectAudiences: function(a) {
        this.components.selectedAudienceList.add(a);
        this.updateAlertAndSubmitButtonViews();
        if(this.components.audiencelist.allAudiencesAreSelected()) {
            this.checkSelectAllCheckbox()
        }
    },
    getSelectedAudiencesCount: function() {
        return this.components.selectedAudienceList.getCount()
    },
    deselectAudiences: function(a) {
        this.components.selectedAudienceList.remove(a);
        this.updateAlertAndSubmitButtonViews()
    },
    enableAddToReportsButton: function() {
        this.view.$(".addAndClosePicker").prop("disabled", false)
    },
    disableAddToReportsButton: function() {
        this.view.$(".addAndClosePicker").prop("disabled", true)
    },
    audienceListSearch: function(b, a) {
        this.uncheckSelectAllCheckbox();
        this.components.audiencelist.search(b, a)
    },
    showAlertWidget: function() {
        this.$alertWidget.removeClass("hidden").css("display", "")
    },
    hideAlertWidget: function() {
        this.$alertWidget.addClass("hidden")
    }
});
ELM.Activities.AudienceList = new Class({
    toString: "AudienceList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.Audiences,
    options: {
        defaultParams: {
            pageSize: 100
        }
    },
    ItemTemplate: function() {
        if(this.model.isSelected()) {
            this.$el.addClass("selected")
        } else {
            this.$el.removeClass("selected")
        }
        if(this.model.getId() === "all_visitors") {
            this.$el.addClass("all_visitors_container")
        }
        return ELM.Activities.Templates.AudienceListItem.apply(this, arguments)
    },
    construct: function() {
        this.fetchParams = {};
        this.registerBinders();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.sortAudiences)
    },
    registerGlobalTriggers: function() {
        F.on("audienceSorter:change", this.sortAudiences)
    },
    unRegisterGlobalTriggers: function() {
        F.off("audienceSorter:change", this.sortAudiences)
    },
    getAllAudiences: function() {
        return this.getAudiencesFromContainers(this.getAllAudienceContainers())
    },
    getSelectedAudiences: function() {
        var a = this.getSelectedAudienceContainers();
        return this.getAudiencesFromContainers(a)
    },
    getAudiencesFromContainers: function(b) {
        var a = [];
        _.each(b, function(d) {
            var c = this.getModelFromLi(d);
            a.push(c)
        }, this);
        return a
    },
    setAllSelected: function(a) {
        _.each(this.getAllAudiences(), function(b) {
            b.setSelected(a)
        })
    },
    selectAll: function() {
        this.setAllSelected(true)
    },
    deselectAll: function() {
        this.setAllSelected(false)
    },
    getSelectedAudienceContainers: function() {
        return this.getAllAudienceContainers().filter(".selected")
    },
    getAllAudienceContainers: function() {
        return this.view.$("li").filter(":visible")
    },
    getAllVisibleAudienceCount: function() {
        return this.getAllAudienceContainers().size()
    },
    updateListWithSelectedAudiences: function(a) {
        this.merge(a, {
            add: false,
            merge: true,
            remove: false
        })
    },
    allAudiencesAreSelected: function() {
        var a = this.getAllAudiences();
        var b;
        if(!a.length) {
            return false
        }
        b = _.find(a, function(c) {
            return !c.isSelected()
        });
        return typeof b === "undefined"
    },
    merge: function(b, a) {
        this.collection.update(b, a)
    },
    search: function(b, a) {
        this.fetchParams[a] = b;
        this.updateList()
    },
    updateList: function() {
        this.fetch(this.fetchParams)
    },
    sortAudiences: function(b, a) {
        this.setParameter("sortBy", b);
        this.setParameter("sortOrder", a);
        this.fetch(this.fetchParams)
    },
    setParameter: function(a, b) {
        if(typeof b !== "string" || b === "") {
            delete this.fetchParams[a]
        } else {
            this.fetchParams[a] = b
        }
    }
});
ELM.Activities.InfoGraphic = new Class({
    toString: "InfoGraphic",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .chooseAudience": "triggerChooseAudienceEvent",
            "click .create-experience": "handleCreateExperiences",
            "click .addNewExperience": "triggerAddNewExperience",
            "click .expThumb": "triggerShowSpecificExperience",
            "change .experienceContainer input": "triggerExperienceInfoChanged",
            "click .audOptions": "showAudiencePopover",
            "focusout #allocationLabelPCTInput": "allocationLabelPCTInputFocusHandler"
        }
    }),
    construct: function(a) {
        this.model = a.model;
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activities.Templates.InfoGraphic
        });
        this.errorDialog = new CUI.Modal({
            element: $("<div />").appendTo(document.body),
            visible: false,
            type: "error",
            heading: "Error",
            content: "<p>Default content</p>"
        });
        this.initializedAudiencePopover = false;
        this.registerBinders();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.appendAudience);
        this.bind(this.renderAudience)
    },
    registerGlobalTriggers: function() {
        F.on("A-B:editor:switchingToFlowDiagramStep A-B-analytics:editor:switchingToFlowDiagramStep", this.renderAudience)
    },
    unregisterGlobalTriggers: function() {
        F.off("A-B:editor:switchingToFlowDiagramStep A-B-analytics:editor:switchingToFlowDiagramStep", this.renderAudience)
    },
    renderAudience: function(b) {
        var a = (b) ? ELM.Activities.Templates.Audience(b) : ELM.Activities.Templates.NoAudience();
        this.updateMarkup(a);
        this.view.$("#alertNotification").addClass("hidden")
    },
    appendAudience: function(a) {
        this.show();
        this.updateMarkup(ELM.Activities.Templates.Audience(a.toJSON()));
        this.setAudienceInActivity(a)
    },
    setAudienceInActivity: function(a) {
        this.model.addAudience(a)
    },
    removeAudienceFromActivity: function() {
        this.model.removeAudience()
    },
    triggerChooseAudienceEvent: function() {
        this.view.$("#alertNotification").addClass("hidden");
        var a = {
            addAndCloseButtonLabel: Granite.I18n.get("Add to Activity"),
            selectedAudienceConsumer: this.appendAudience
        };
        this.trigger("chooseAudience", a)
    },
    initAudiencePopover: function() {
        this.audiencePopover = new CUI.Popover({
            pointAt: this.view.$(".audOptions"),
            element: this.view.$(".audience-update-popover")
        }).on("click", ".sampleAudience", this.sampleAudience.bind(this)).on("click", ".removeAudience", this.removeAudience.bind(this)).on("click", ".changeAudience", this.changeAudience.bind(this));
        this.initializedAudiencePopover = true
    },
    destroyAudiencePopover: function() {
        if(this.initializedAudiencePopover) {
            this.audiencePopover.destruct()
        }
        this.initializedAudiencePopover = false
    },
    allocationLabelPCTInputFocusHandler: function() {
        var d = $("#allocationLabelPCTInput");
        var a = $("#allocationLabelPCT");
        var b = $("#allocationLabelPCTInput").val(),
            c = parseInt(b),
            c = isNaN(c) ? 100 : c,
            c = (c < 0) ? 0 : ((c > 100) ? 100 : c);
        d.val(c + "%");
        a.text(c + "%");
        d.hide();
        a.show()
    },
    sampleAudience: function() {
        var b = $("#allocationLabelPCTInput");
        var a = $("#allocationLabelPCT");
        a.hide();
        b.show().focus();
        this.audiencePopover.hide()
    },
    changeAudience: function() {
        this.triggerChooseAudienceEvent();
        this.audiencePopover.hide()
    },
    removeAudience: function() {
        this.updateMarkup(ELM.Activities.Templates.NoAudience());
        this.removeAudienceFromActivity();
        this.audiencePopover.hide()
    },
    updateMarkup: function(a) {
        this.destroyAudiencePopover();
        this.view.$(".audiencePlaceHolder").html(a)
    },
    showAudiencePopover: function(a) {
        a.preventDefault();
        a.stopImmediatePropagation();
        if(!this.initializedAudiencePopover) {
            this.initAudiencePopover()
        }
        this.audiencePopover.toggleVisibility()
    },
    triggerAddNewExperience: function() {
        this.trigger("triggerAddNewExperience", {})
    },
    triggerShowSpecificExperience: function(a) {
        var b = $(a.currentTarget).parents(".experienceContainer").attr("data-experience");
        this.trigger("triggerShowSpecificExperience", {
            name: b
        })
    },
    handleCreateExperiences: function() {
        var a = {
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: function(b) {
                    b.dialog.hide()
                }
            }, {
                label: Granite.I18n.get("Continue"),
                className: "primary",
                disabled: "disabled",
                click: function(b) {
                    var c = b.dialog.$element.find("#urlField");
                    if(!ELM.Util.UrlValidationRegex.test(c.val().trim())) {
                        c.addClass("error");
                        return
                    }
                    b.dialog.hide();
                    this.trigger("triggerExperienceChooser", {
                        url: c.val().trim()
                    })
                }.bind(this)
            }]
        };
        F.trigger("activity-creation:select-url-dialog", {
            newActivityDialogOptions: a,
            activityType: this.model.getActivityType()
        })
    },
    triggerExperienceInfoChanged: function(c) {
        var b = $(c.currentTarget),
            h = this.model.get("experiences"),
            f = b.parents(".experienceContainer").attr("data-experience").trim(),
            e = "",
            a = "",
            d = b.attr("type"),
            g = b.val();
        if(d === "text") {
            a = b.val();
            this.updateExperienceName(h, b, f, g)
        } else {
            if(d === "number") {
                this.updateExperienceSplitValue(h, b, f, parseInt(g))
            }
        }
    },
    updateExperienceName: function(f, c, d, b) {
        var a = {},
            e = {};
        a = _.find(f, function(g) {
            return g["jcr:title"] === d
        });
        e = _.find(f, function(g) {
            return g["jcr:title"] === b
        });
        if(b === "" || (_.isObject(e) && e !== {})) {
            this.showErrorNotification(Granite.I18n.get("Empty or duplicate experience names are not permitted."));
            c.val(a["jcr:title"]);
            return
        } else {
            a["jcr:title"] = b;
            c.parents(".experienceContainer").attr("data-experience", b)
        }
    },
    updateExperienceSplitValue: function(e, b, d, c) {
        var a = {};
        a = _.find(e, function(f) {
            return f["jcr:title"] === d
        });
        if(c < 0) {
            this.showErrorNotification(Granite.I18n.get("Negative split percent values are not permitted."));
            b.val(a.trafficSplit);
            return
        } else {
            a.trafficSplit = c
        }
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    isComplete: function() {
        var b = this.model.getExperiences(),
            a = this.model.getAudiencesRef();
        return b && b.length && a && a.length
    },
    onComplete: function() {
        var a = 0,
            c = this.model.getAudiencesRef(),
            e = this.model.getExperiences(),
            b = Granite.I18n.get("The total split percent value must be equal to 100%.");
        if(typeof c === "undefined" || c.length == 0) {
            this.showErrorNotification(Granite.I18n.get("Choose an audience to continue."));
            return false
        }
        if(typeof e != "undefined" && e.length > 0) {
            _.each(e, function(g) {
                if(isNaN(g.trafficSplit)) {
                    b = Granite.I18n.get("Enter a valid number for split percentage.")
                }
                a += g.trafficSplit
            });
            var d = false;
            var f = [];
            _.each(e, function(g) {
                if(g["jcr:title"] == "") {
                    d = true
                }
                f.push(g["jcr:title"])
            });
            if(a !== 100) {
                this.showErrorNotification(b);
                return false
            } else {
                if(d || (_.uniq(f).length !== e.length)) {
                    this.showErrorNotification(Granite.I18n.get("Empty or duplicate experience names are not permitted."));
                    return false
                } else {
                    return true
                }
            }
        } else {
            this.showErrorNotification(Granite.I18n.get("Add at least one experience before continuing."));
            return false
        }
    }
});
ELM.Activities.ExperienceTargetingInfoGraphic = new Class({
    toString: "ExperienceTargetingInfoGraphic",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .chooseAudience": "chooseAudience",
            "click .showExperience": "showExperience",
            "click .expThumb": "showExperience",
            "click .removeAudience": "removeAudience",
            "click .changeAudience": "changeAudience",
            "click .deleteAudience": "removeAudience"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activities.Templates.ExperienceTargetingInfoGraphic
        });
        this.errorDialog = new CUI.Modal({
            element: $("<div />").appendTo(document.body),
            visible: false,
            type: "error",
            heading: "Error",
            content: "<p>Default content</p>"
        });
        this.initializedAudiencePopover = false;
        this.activeAudienceExperienceRowIndex = -1;
        this.registerBinders();
        this.registerGlobalTriggers();
        this.addSubComponents()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.appendAudience);
        this.bind(this.render)
    },
    registerGlobalTriggers: function() {
        F.on("Experience-Targeting:editor:switchingToFlowDiagramStep", this.render)
    },
    unregisterGlobalTriggers: function() {
        F.off("Experience-Targeting:editor:switchingToFlowDiagramStep", this.render)
    },
    addSubComponents: function() {
        this.addRemoveAudienceDialog()
    },
    addRemoveAudienceDialog: function() {
        var a = this,
            c = '{{i18n "<strong>Both audience and experience</strong> will be deleted from this activity and can not be recovered" html=true}}',
            b = Handlebars.compile(c);
        this.removeAudienceDialog = new CUI.Modal({
            heading: Granite.I18n.get("Confirm Delete"),
            type: "notice",
            element: $('<div class="delete-personalization-modal width-21"></div>').appendTo(document.body),
            visible: false,
            content: b(),
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: "hide"
            }, {
                label: Granite.I18n.get("Delete"),
                className: "primary",
                click: function() {
                    a.deleteAudience(a.activeAudienceExperienceRowIndex);
                    this.hide()
                }
            }]
        })
    },
    addNewAudienceExperiencePair: function() {
        var a = {
            "ref:audiences": []
        };
        this.model.addExperience(a);
        this.render();
        $(document).trigger("cui-contentloaded")
    },
    appendAudience: function(a) {
        this.updateAudienceInExperience(this.activeAudienceExperienceRowIndex, a);
        this.render()
    },
    updateAudienceInExperience: function(d, c) {
        var e = this.model.getExperiences(),
            b = false,
            a = c.getReferenceString();
        _.each(e, function(g, f) {
            if(g["ref:audiences"] && g["ref:audiences"][0] == a && d != f) {
                b = true
            }
        });
        if(b) {
            this.showErrorNotification(Granite.I18n.get("Duplicate audiences are not permitted"));
            return false
        }
        e[d]["ref:audiences"] = [a];
        this.model.setExperiences(e);
        this.model.addAudienceData(c)
    },
    setActiveAudienceExperienceRowIndex: function(a) {
        this.activeAudienceExperienceRowIndex = a.parents(".diagRow").index()
    },
    chooseAudience: function(a) {
        this.setActiveAudienceExperienceRowIndex($(a.target));
        this.triggerChooseAudienceEvent()
    },
    triggerChooseAudienceEvent: function() {
        this.view.$("#alertNotification").addClass("hidden");
        var a = {
            addAndCloseButtonLabel: Granite.I18n.get("Add to Activity"),
            selectedAudienceConsumer: this.appendAudience
        };
        this.trigger("chooseAudience", a)
    },
    changeAudience: function(a) {
        this.setActiveAudienceExperienceRowIndex($(a.target));
        this.triggerChooseAudienceEvent()
    },
    deleteAudience: function(b) {
        var a = this.model.getExperiences();
        a.splice(b, 1);
        this.model.setExperiences(a);
        if(a.length == 0) {
            a.push({
                "ref:audiences": []
            })
        }
        this.render()
    },
    removeAudience: function(a) {
        var c = this.model.getExperiences(),
            b;
        this.setActiveAudienceExperienceRowIndex($(a.target));
        b = c[this.activeAudienceExperienceRowIndex];
        if(b["ref:audiences"] && b["ref:audiences"].length > 0) {
            this.removeAudienceDialog.show()
        } else {
            this.deleteAudience(this.activeAudienceExperienceRowIndex)
        }
    },
    handleCreateExperiences: function(b) {
        var a = {
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: function(c) {
                    c.dialog.hide()
                }
            }, {
                label: Granite.I18n.get("Continue"),
                className: "primary",
                disabled: "disabled",
                click: function(c) {
                    var d = c.dialog.$element.find("#urlField");
                    if(!ELM.Util.UrlValidationRegex.test(d.val().trim())) {
                        d.addClass("error");
                        return
                    }
                    c.dialog.hide();
                    this.trigger("showExperience", {
                        url: d.val().trim(),
                        index: b
                    })
                }.bind(this)
            }]
        };
        F.trigger("activity-creation:select-url-dialog", {
            newActivityDialogOptions: a,
            activityType: this.model.getActivityType()
        })
    },
    showExperience: function(b) {
        var a = $(b.target).parents(".diagRow").index(),
            c = this.model.getExperiences();
        if(c[a]["ref:audiences"].length == 0) {
            F.trigger("noticeNotification", {
                message: Granite.I18n.get("Please choose an audience first for this experience")
            });
            return false
        }
        if(!this.model.getActivityUrl()) {
            this.handleCreateExperiences(a);
            return false
        }
        this.trigger("showExperience", {
            index: a
        })
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    isComplete: function() {
        var c = this.model.getExperiences(),
            a = true,
            b = true;
        _.each(c, function(e, d) {
            if(e["ref:audiences"].length == 0) {
                a = false
            }
            if(typeof e["jcr:title"] == "undefined" || !e["jcr:title"]) {
                b = false
            }
        });
        return c && c.length && a && b
    },
    onComplete: function() {
        var d = this.model.getExperiences(),
            c = false,
            e = [],
            b = null,
            a = null;
        if(typeof d != "undefined" && d.length > 0) {
            _.each(d, function(f) {
                if(f["ref:audiences"].length == 0) {
                    a = Granite.I18n.get("One or more audiences are empty")
                }
                if(!f.isExperienceDefined) {
                    b = Granite.I18n.get("One or more experiences are not defined")
                }
                if(f["jcr:title"] == "") {
                    c = true
                }
                e.push(f["jcr:title"])
            });
            if(a != null) {
                this.showErrorNotification(a);
                return false
            }
            if(b != null) {
                this.showErrorNotification(b);
                return false
            }
            if(c || (_.uniq(e).length !== d.length)) {
                this.showErrorNotification(Granite.I18n.get("Empty or duplicate experience names are not permitted."));
                return false
            }
        } else {
            this.showErrorNotification(Granite.I18n.get("Add at least one experience before continuing."));
            return false
        }
        return true
    }
});
"use strict";
ELM.Activities.Metrics = new Class({
    toString: "Metrics",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click #addmetrics": "addNewMetric"
        }
    }),
    construct: function(a) {
        this.loadModel(a.model);
        this.initView(a.el);
        this.registerListeners();
        this.registerVars();
        this.registerBinders();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    loadModel: function(a) {
        this.load(a)
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            noRerender: true,
            template: ELM.Activities.Templates.Metrics
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.renderSubViews()
        })
    },
    registerVars: function() {
        this.metricLocalId = null
    },
    registerBinders: function() {
        this.bind(this.saveClickedElements);
        this.bind(this.setAnalyticsMetrics);
        this.bind(this.delegateShowAudiencePickerEvent)
    },
    registerGlobalTriggers: function() {
        F.on("A-B:experienceEditor:saveClickedElements A-B-analytics:experienceEditor:saveClickedElements", this.saveClickedElements);
        F.on("A-B-analytics:editor:receivedAnalyticsMetrics", this.setAnalyticsMetrics)
    },
    unRegisterGlobalTriggers: function() {
        F.off("A-B:experienceEditor:saveClickedElements A-B-analytics:experienceEditor:saveClickedElements", this.saveClickedElements);
        F.off("A-B-analytics:editor:receivedAnalyticsMetrics", this.setAnalyticsMetrics)
    },
    renderSubViews: function() {
        this.destructComponents();
        var a = this.model.getMetrics();
        this.metricIndex = 0;
        this.$goalMetricEl = this.view.$(".goal");
        this.$adMetricEl = this.view.$(".additional");
        this.metricLocalId = this.getLastMetricLocalId();
        if(a && a.length) {
            _.each(a, function(c, b) {
                this.metricIndex = b;
                this.addMetric(c)
            }, this)
        } else {
            this.addMetric()
        }
    },
    addMetric: function(c) {
        var a = this.model.getActivityType(),
            e = this.model.getReportingSolution(),
            b = "metric" + this.metricIndex,
            d = !c;
        c = c || {};
        c.activityType = a;
        c.isGoalMetric = this.metricIndex === 0;
        if(typeof c.metricLocalId === "undefined") {
            c.metricLocalId = ++this.metricLocalId
        }
        if(this.isActivityAnalyticsEnabled()) {
            c.reportSuite = this.model.getReportSuite();
            c.analyticsMetrics = this.analyticsMetrics;
            this.addComponent(new ELM.Activities.MetricsItemA4T({
                el: $('<div class="metric' + this.metricIndex + '" />').appendTo(c.isGoalMetric ? this.$goalMetricEl : this.$adMetricEl),
                model: c,
                reportingSolution: e,
                analyticsMetrics: this.analyticsMetrics,
                visible: true
            }), b).on("metricsItem:addAudience", this.delegateShowAudiencePickerEvent);
            if(d && a === ELM.Activities.activityTypes.MVT) {
                this.components[b].setMetricType("conversion")
            }
        } else {
            this.addComponent(new ELM.Activities.MetricsItem({
                el: $('<div class="metric' + this.metricIndex + '" />').appendTo(c.isGoalMetric ? this.$goalMetricEl : this.$adMetricEl),
                model: c,
                visible: true
            }), b).on("metricsItem:addAudience", this.delegateShowAudiencePickerEvent)
        }
    },
    delegateShowAudiencePickerEvent: function(a) {
        this.trigger("metrics:addAudience", a)
    },
    addNewMetric: function() {
        this.metricIndex += 1;
        this.addMetric()
    },
    removeMetric: function(a) {
        this.removeComponent(a)
    },
    setAnalyticsMetrics: function(b) {
        var a = this.components.metric0;
        this.analyticsMetrics = b;
        if(a) {
            a.setAnalyticsMetrics(b)
        }
    },
    getLastMetricLocalId: function() {
        var a = [];
        _.each(this.model.getMetrics(), function(c) {
            var b = c.metricLocalId;
            if(typeof b !== "undefined") {
                a.push(b)
            }
        }, this);
        if(a.length) {
            return Math.max.apply(null, a)
        }
        return 2
    },
    getComponentsTitle: function() {
        return _.map(this.components, function(a) {
            return a.model.getTitle()
        })
    },
    getIncompleteComponentsCount: function() {
        var a = 0;
        _.each(this.components, function(b) {
            if(!b.isComplete()) {
                a++
            }
        });
        return a
    },
    saveClickedElements: function(a, b) {
        this.components[a].setClickedElements(b);
        this.saveMetrics();
        F.trigger(ELM.evtNamespace + ":clickTrack:saved")
    },
    hasChanged: function() {
        return _.some(this.components, function(a) {
            return a.hasChanged()
        })
    },
    partialSave: function() {
        var c = Object.keys(this.components),
            d = this.model.getMetrics().length,
            b, a;
        for(b = c.length - 1; b >= d; b--) {
            a = this.components[c[b]];
            if(!a.hasChanged()) {
                this.removeComponent(c[b]);
                continue
            }
            break
        }
        this.saveMetrics();
        return true
    },
    saveMetrics: function() {
        var a = [];
        _.each(this.components, function(b, d) {
            var c = b.model;
            if(d !== "metric0" && b.hasChanged()) {
                c.setMetricLocalId(++this.metricLocalId)
            }
            b.removeMboxes();
            b.removeGoalFlag();
            if(this.isActivityAnalyticsEnabled()) {
                b.removeAnalyticsMetrics()
            }
            a.push(c.toJSON())
        }, this);
        this.model.setMetrics(a);
        this.metricIndex = a.length
    },
    destructComponents: function() {
        for(var a in this.components) {
            this.components[a].destruct();
            delete this[a];
            delete this.components[a]
        }
        return this
    },
    hasMetricsToBeSaved: function() {
        return !_.isEmpty(this.components) && this.hasChanged()
    },
    validateMetrics: function() {
        var b = this.getIncompleteComponentsCount(),
            a = this.components.metric0.model.getWorth(),
            e = this.getComponentsTitle(),
            c = b === 1 ? Granite.I18n.get("A definition is incomplete for 1 metric. Review the highlighted fields below.") : Granite.I18n.get("Metric definitions are incomplete for {0} metrics. Review the highlighted fields below.", b),
            d = Granite.I18n.get("Error");
        if(b) {
            F.trigger("errorNotification", {
                message: c,
                heading: d
            });
            return false
        }
        if(e.length !== _.uniq(e).length) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("You have duplicate metric names."),
                heading: d
            });
            return false
        }
        if(a && isNaN(a)) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("Enter a valid number for estimated value."),
                heading: d
            });
            return false
        }
        return true
    },
    onComplete: function() {
        if(this.validateMetrics()) {
            this.saveMetrics();
            return true
        }
        return false
    },
    isComplete: function() {
        return this.validateMetrics()
    },
    isActivityAnalyticsEnabled: function() {
        return this.model.getActivityType() === ELM.Activities.activityTypes.AB_ANALYTICS || this.model.getReportingSolution() === ELM.Activities.reportingEngine.ANALYTICS
    }
});
"use strict";
ELM.Activities.MetricsItem = new Class({
    toString: "MetricsItem",
    extend: F.ModelComponent,
    Model: ELM.Models.Metric,
    Template: function() {
        return ELM.Activities.Templates.MetricsItem.apply(this, arguments)
    },
    View: F.View.extend({
        commonEvents: {
            'keyup [name="metricname"]': "setTitle",
            "keyup .metric-worth-input": "setWorth",
            "selected .select-metric-type": "handleMetricTypeSelection",
            "selected .select-counting-rule": "setCountingRule",
            "selected .select-revenue-type": "setRevenueType",
            "selected .select-action": "handleActionSelection",
            "selected .select-engagement-type": "setEngagementType",
            "keyup .terminput": "updateConstraintTermFromInput",
            "selected .select-matcher": "updateConstraintMatcher",
            "click .additionalCondition": "addAdditionalCondition",
            "click .appliedCondition": "removeAdditionalCondition",
            "click .addTargetingCondition": "addTargetingAudience",
            "click .icon-add-circle": "addConstraint",
            "click .icon-close-circle": "removeConstraint",
            "click .select-elements": "triggerShowClickTracking",
            "click .delete-elements": "clearClickTrackElements",
            "selected .mboxFilters": "updateConstraintTermFromSelect",
            "change .mboxFilters": "updateConstraintTermFromSelect"
        },
        additionalEvents: {
            'change [name="countingRule"]': "setCountingRule",
            'change [name="revenueType"]': "setRevenueType",
            'change [name="engagementType"]': "setEngagementType",
            "click .deletemetric": "remove"
        },
        events: function() {
            return _.extend({}, this.commonEvents, this.additionalEvents)
        }
    }),
    specialMboxes: ["** any mbox **", "** display mboxes **", "** click from display mbox **"],
    construct: function(a) {
        this.loadModel(a.model);
        this.registerVars(a);
        this.initView(a.el);
        this.registerBinders()
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerVars: function(a) {
        this.reportingSolution = a.reportingSolution;
        this.analyticsMetrics = a.analyticsMetrics;
        this.currentConstraint = null;
        this.isTitleEdited = !!this.model.getType()
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: this.Template
        })
    },
    registerBinders: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        });
        this.bind(this.saveSelectedAudienceToConstraint);
        this.listenTo(this.model, "change", this.render.bind(this))
    },
    initializeWidgets: function() {
        this.initialModel = this.initialModel || ELM.Util.clone(this.model.attributes);
        this.addFilters();
        this.view.$(".select").select()
    },
    addFilters: function() {
        var e = this.model.getAction(),
            d = e === "mboxView",
            g = this.model.getConstraints(),
            a, f, b, c = this;
        if(d) {
            for(a = 0; a < g.length; a++) {
                this.$mboxFilter = this.view.$(".mboxLookup" + a);
                b = this.initFilter(this.$mboxFilter, a);
                f = b.$element.find("input");
                f.val(g[a]["term"]).blur(function() {
                    $(this).parents(".filters").removeClass("error")
                }).change(function() {
                    var h = $(this).parents(".filters").find("select").attr("constraint-order");
                    if($(this).val() === "") {
                        c.model.updateConstraint(h, "term", $(this).val())
                    }
                })
            }
        }
    },
    initFilter: function(b, a) {
        var c = this;
        return new ELM.AutoComplete({
            element: b,
            infiniteLoad: true,
            options: [],
            autoPosition: false,
            highlight: true,
            autocompleteCallback: function(g, e, f, d) {
                $.ajax({
                    url: "/target/" + ELM.client + "/target/mboxes.at.json?pageSize=200&sortBy=jcr:title&sortOrder=ASCENDING&search=" + e,
                    type: "GET",
                    dataType: "json",
                    success: _.bind(function(i) {
                        var h = {
                                mboxes: []
                            },
                            j = c.model.getConstraintTerms();
                        if(a === 0) {
                            h.mboxes = [].concat(c.specialMboxes)
                        }
                        _.each(i.items, function(k) {
                            if(k.status === "ACTIVE") {
                                h.mboxes.push(k["jcr:title"])
                            }
                        });
                        j.splice(a, 1);
                        h.mboxes = _.difference(h.mboxes, j);
                        g(h.mboxes)
                    }, this)
                })
            }
        })
    },
    show: function() {
        this.addMboxes();
        this.view.show();
        return this
    },
    setTitle: function(a) {
        this.isTitleEdited = true;
        this.model.setTitle(a.target.value)
    },
    setWorth: function(a) {
        this.model.setWorth(a.target.value)
    },
    handleMetricTypeSelection: function(a) {
        this.setMetricType(a.selected)
    },
    setMetricType: function(a) {
        if(!this.isTitleEdited) {
            this.deriveTitleFromMetricType()
        }
        this.clearUnneededAttributes();
        if(a === "conversion") {
            this.model.setCountingRule("alwaysIncrement");
            this.addMboxes()
        } else {
            this.setupByType(a)
        }
        this.model.setType(a)
    },
    deriveTitleFromMetricType: function() {
        var a = this.view.$(".select-metric-type :selected").text();
        this.model.setTitle(a)
    },
    clearUnneededAttributes: function() {
        this.model.clearAllAttributesExcept("jcr:title", "activityType", "isGoalMetric", "metricLocalId")
    },
    setupByType: function(a) {
        if(a === "revenue") {
            this.model.setRevenueType("rpv");
            this.addMboxes();
            this.setAction("mboxView")
        }
    },
    setCountingRule: function(a) {
        this.model.setCountingRule(a.selected)
    },
    setRevenueType: function(a) {
        this.model.setRevenueType(a.selected)
    },
    handleActionSelection: function(a) {
        this.setAction(a.selected)
    },
    setAction: function(a) {
        this.model.clearConstraintsSilently();
        this.model.setMatcher("exact");
        this.model.setWorth("");
        this.view.$(".metric-worth-input").val("");
        if(a !== "elementClick" && a !== "clickRecommendation") {
            this.addConstraint()
        }
        if(a === "clickRecommendation") {
            F.trigger(ELM.evtNamespace + ":addClickTrackId")
        } else {
            F.trigger(ELM.evtNamespace + ":removeClickTrackId")
        }
        this.model.setAction(a)
    },
    setEngagementType: function(b) {
        var a = b.selected;
        this.model.setEngagementType(a);
        this.model.clearConstraintsSilently();
        this.model.setWorth("");
        if(a !== "customScoring") {
            this.view.$(".metric-worth-input").val("")
        }
    },
    setClickedElements: function(a) {
        var b = [];
        _.each(a, function(c) {
            b.push({
                term: c
            })
        }, this);
        this.model.setConstraints(b)
    },
    updateConstraintTermFromInput: function(a) {
        var b = a.target.value,
            c = $(a.target).attr("name");
        this.model.updateConstraint(c, "term", b);
        this.clearIncompleteMark()
    },
    updateConstraintTermFromSelect: function(a) {
        var b = a.target.value,
            c, d = $(a.target).attr("constraint-order");
        if(!b) {
            return
        }
        this.model.updateConstraint(d, "term", b);
        c = this.specialMboxes.indexOf(b) !== -1;
        if(b && c) {
            this.model.clearConstraintsExceptFirst();
            this.model.set("specialmbox", true)
        } else {
            this.model.unset("specialmbox")
        }
        if(b === "" || c) {
            this.model.updateConstraint(d, "ref:targetingAudience", "")
        }
        this.model.trigger("change");
        this.clearIncompleteMark();
        this.updateTitleAttribute(a.target, a.selected)
    },
    updateConstraintMatcher: function(a) {
        this.model.setMatcher(a.selected);
        this.model.updateConstraintMatcher()
    },
    addAdditionalCondition: function(a) {
        var b = this.view.$(a.target),
            c = b.data("condition");
        this.view.$(".targetingAudience" + c).show();
        b.hide();
        this.view.$(".appliedCondition").show()
    },
    removeAdditionalCondition: function(b) {
        var a = this.view.$(b.target);
        this.model.updateConstraint(a.data("condition"), "ref:targetingAudience", "");
        this.model.trigger("change")
    },
    addTargetingAudience: function(a) {
        var b = {
            selectedAudienceConsumer: this.saveSelectedAudienceToConstraint
        };
        this.currentConstraint = this.view.$(a.target).data("condition");
        this.trigger("metricsItem:addAudience", b)
    },
    saveSelectedAudienceToConstraint: function(a) {
        this.model.updateConstraint(this.currentConstraint, "ref:targetingAudience", a.get("reference"));
        this.model.updateConstraint(this.currentConstraint, "audienceTitle", a.get("jcr:title"));
        this.model.trigger("change")
    },
    addConstraint: function() {
        this.model.addConstraint()
    },
    removeConstraint: function(a) {
        var b = parseInt(a.target.id);
        if(b) {
            this.model.removeConstraint(b)
        }
    },
    addMboxes: function() {
        this.model.setMboxes(ELM.mboxes)
    },
    removeMboxes: function() {
        this.model.clearMboxes()
    },
    removeGoalFlag: function() {
        this.model.clearIsGoalMetricFlag()
    },
    remove: function() {
        this.destruct();
        this.parent.removeMetric(this.toString())
    },
    clearClickTrackElements: function() {
        this.model.clearConstraints();
        this.parent.saveMetrics()
    },
    triggerShowClickTracking: function() {
        this.parent.saveMetrics();
        F.trigger(ELM.evtNamespace + ":metric:showClickTracking", {
            metricComponent: this.toString(),
            clickedElements: this.model.getCompactConstraintTerms()
        })
    },
    hasChanged: function() {
        return !_.isEqual(this.model.toJSON(), this.initialModel)
    },
    isComplete: function() {
        var a = this.model.getTitle(),
            b = this.verifyCriteria(a);
        if(!b) {
            this.markIncomplete()
        }
        return b ? true : false
    },
    verifyCriteria: function(a) {
        if(this.model.getType() === "engagement") {
            return a && this.model.getEngagementType()
        }
        return this.getDefaultCriteria()
    },
    getDefaultCriteria: function() {
        var a = this.model.getConstraintTerms(),
            b = this.model.getTitle();
        if(this.model.getAction() === "clickRecommendation") {
            return b
        }
        return b && a.length && a.indexOf("") === -1
    },
    markIncomplete: function() {
        this.view.$(".well").addClass("incomplete")
    },
    clearIncompleteMark: function() {
        this.view.$(".well").removeClass("incomplete")
    },
    updateTitleAttribute: function(b, a) {
        this.view.$(b).attr("title", a)
    }
});
"use strict";
ELM.Activities.MetricsItemA4T = new Class({
    toString: "MetricsItemA4T",
    extend: ELM.Activities.MetricsItem,
    Template: function() {
        return ELM.Activities.Templates.MetricsItemA4T.apply(this, arguments)
    },
    View: ELM.Activities.MetricsItem.prototype.View.extend({
        additionalEvents: {
            "selected .select-analytics-metric": "setAnalyticsMetric"
        }
    }),
    clearUnneededAttributes: function() {
        this.model.clearAllAttributesExcept("jcr:title", "activityType", "metricLocalId", "reportSuite", "analyticsMetrics")
    },
    setupByType: function(a) {
        if(a === "analytics") {
            this.setAnalyticsMetrics(this.analyticsMetrics)
        }
    },
    setAnalyticsMetric: function(b) {
        var d = b.selected,
            c = $(b.target).find(":selected").data("source"),
            a = $(b.target).find(":selected").text();
        this.model.setTitle(d ? a : "");
        this.model.setAnalyticsMetricId(d);
        this.model.setAnalyticsMetricSource(c)
    },
    setAnalyticsMetrics: function(a) {
        this.model.setAnalyticsMetrics(a)
    },
    removeAnalyticsMetrics: function() {
        this.model.clearAnalyticsMetrics()
    },
    verifyCriteria: function(a) {
        if(this.model.getType() === "analytics") {
            return a && this.model.getAnalyticsMetricId()
        }
        return this.getDefaultCriteria()
    }
});
ELM.Activities.DateSelector = new Class({
    toString: "ActivityDateSelector",
    extend: F.Component,
    options: {
        visible: true
    },
    View: F.View.extend({
        events: {
            "selected .select": "updateSourceFromOptions"
        }
    }),
    construct: function(a) {
        this.model = a.dateOptionsModel;
        this.$widgetSection = a.section;
        this.$source = a.dateSource;
        this.view = new this.View({
            el: a.section.find(".dateOptionDropdown"),
            component: this,
            template: ELM.Activities.Templates.DateOptions
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.init();
            this.createWidgets()
        })
    },
    init: function() {
        this.$datePickerSection = this.$widgetSection.find(".largeDatepicker");
        this.$datePicker = this.$widgetSection.find(".datepicker");
        this.$dateOptions = this.$widgetSection.find("select");
        this.selectDateOptions(this.$source.val());
        this.updateDatePickerVisibility()
    },
    createWidgets: function() {
        var a = this;
        this.view.$(".select").select();
        this.$datePicker.datepicker().on("change", function() {
            a.updateSource(a.getSpecifiedDate())
        })
    },
    selectDateOptions: function(d) {
        var a = this.$dateOptions.find("option"),
            c, b;
        a.removeAttr("selected");
        c = a.filter('[value="' + d + '"]');
        b = c.length > 0;
        if(!b) {
            c = a.filter('[value=""]')
        }
        c.attr("selected", true)
    },
    updateSourceFromOptions: function(a) {
        this.updateSource(a.selected)
    },
    updateSource: function(a) {
        if(this.dateIsSpecified()) {
            a = this.getSpecifiedDate()
        }
        this.$source.val(a).trigger("change");
        this.updateDatePickerVisibility()
    },
    getSpecifiedDate: function() {
        var a = this.$widgetSection.find(".dateWidget input[type=hidden]").val(),
            b = this.$widgetSection.find(".timeWidget input[type=hidden]").val();
        if(a) {
            a = moment(a).format("L")
        } else {
            a = moment().format("L")
        }
        return moment(new Date(a + " " + b)).format()
    },
    updateDatePickerVisibility: function() {
        if(this.dateIsSpecified()) {
            this.$datePickerSection.show()
        } else {
            this.$datePickerSection.hide()
        }
    },
    dateIsSpecified: function() {
        return this.$dateOptions.val() !== ""
    }
});
"use strict";
ELM.Activities.ReportingAudienceList = new Class({
    toString: "ReportingAudienceList",
    extend: F.ListComponent,
    Collection: ELM.Collections.ReportingAudiences,
    reportingAudiencesLimit: 49,
    construct: function(a) {
        this.view.collection = new this.Collection(a.reportingAudiences);
        if(a.reportingAudiences) {
            this.collectionLoaded = true
        }
    },
    add: function(a) {
        if(this.view.collection.length + a.length > this.reportingAudiencesLimit) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("Only 50 audiences allowed."),
                heading: Granite.I18n.get("Error")
            })
        } else {
            this.view.collection.add(a);
            this.trigger("reportingAudience:updated", this.view.collection.models)
        }
        this.render()
    },
    deleteSelected: function() {
        var a = this.getSelectedAudienceContainers(),
            b = [];
        _.each(a, function(e, d) {
            var c = this.getModelFromLi(e);
            b.push(c)
        }, this);
        this.view.collection.remove(b);
        this.render();
        this.trigger("reportingAudience:updated", this.view.collection.models)
    },
    toggleAll: function(a) {
        if(a) {
            this.selectAll()
        } else {
            this.deselectAll()
        }
        this.trigger("rowSelection:toggled")
    },
    selectAll: function() {
        this.getAllAudienceContainers().addClass("selected").find(".selectReportingAudience").prop("checked", true)
    },
    deselectAll: function() {
        this.getSelectedAudienceContainers().removeClass("selected").find(".selectReportingAudience").prop("checked", false);
        this.trigger("reportingAudience:deselected")
    },
    selectReportingAudienceOnCheckboxClick: function(b) {
        b.stopPropagation();
        var a = this.getContainer(b);
        this.toggleReportingAudienceSelection(a)
    },
    selectReportingAudienceOnRowClick: function(c) {
        var b = this.getContainer(c),
            a = b.find(".selectReportingAudience");
        a.prop("checked", !(a.is(":checked")));
        this.toggleReportingAudienceSelection(b)
    },
    toggleReportingAudienceSelection: function(b) {
        var a = b.find(".selectReportingAudience");
        b.toggleClass("selected");
        if(!a.is(":checked")) {
            this.trigger("reportingAudience:deselected")
        }
        this.trigger("rowSelection:toggled")
    },
    getContainer: function(a) {
        return $(a.currentTarget).closest(".listItem")
    },
    getSelectedAudienceContainers: function() {
        return this.view.$(".listItem.selected")
    },
    getAllAudienceContainers: function() {
        return this.view.$(".listItem")
    },
    ItemTemplate: function() {
        return ELM.Activities.Templates.ReportingAudienceListItem.apply(this, arguments)
    }
});
"use strict";
ELM.Activities.ReportingAudience = new Class({
    toString: "ReportingAudience",
    extend: F.Component,
    reportingAudiencesLimit: 49,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activities.Templates.ReportingAudience
        });
        this.registerBinders();
        this.registerGlobalTriggers();
        this.listenTo(this.view, "renderComplete", function() {
            this.renderSubViews(a.reportingAudiences);
            this.initializeWidgets()
        });
        this.view.render()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    unregisterGlobalTriggers: function() {
        F.off("A-B:reportingAudience:updated", this.assertEmptyAudiences)
    },
    registerBinders: function() {
        this.bind(this.assertEmptyAudiences);
        this.bind(this.setBulkActionsVisibility);
        this.bind(this.uncheckSelectAllCheckbox)
    },
    registerGlobalTriggers: function() {
        F.on("A-B:reportingAudience:updated", this.assertEmptyAudiences)
    },
    renderSubViews: function(a) {
        this.addComponent(new ELM.Activities.ReportingAudienceList({
            el: this.view.$(".reportingAudienceList"),
            visible: true,
            events: {
                "click .selectReportingAudience": "selectReportingAudienceOnCheckboxClick",
                "click .selectableRow": "selectReportingAudienceOnRowClick"
            },
            reportingAudiences: a
        }), "reportingAudienceList").on("rowSelection:toggled", this.setBulkActionsVisibility.bind(this)).on("reportingAudience:deselected", this.uncheckSelectAllCheckbox.bind(this)).on("reportingAudience:updated", this.assertEmptyAudiences.bind(this)).render()
    },
    initializeWidgets: function() {
        this.$emptyRow = this.view.$(".noReportingAudienceAddedRow");
        this.$selectAllCheckbox = this.view.$("#selectAllReportingAudiences");
        this.$bulkActions = this.view.$(".bulk-action");
        if(this.components.reportingAudienceList.view.collection.models.length > 0) {
            this.$emptyRow.addClass("hidden")
        }
        this.$bulkActions.hide()
    },
    View: F.View.extend({
        events: {
            "click .addAudienceButton": "triggerAddAudienceEvent",
            "click .deleteAudienceButton": "deleteSelectedAudiences",
            "click #selectAllReportingAudiences": "selectAllReportingAudiences"
        }
    }),
    assertEmptyAudiences: function(a) {
        if(a === null || a.length === 0) {
            this.$emptyRow.removeClass("hidden")
        }
        this.trigger("reportingAudience:updated", a)
    },
    addNewReportingAudience: function(a) {
        this.$emptyRow.addClass("hidden");
        this.components.reportingAudienceList.add(a);
        this.$bulkActions.hide();
        this.uncheckSelectAllCheckbox()
    },
    triggerAddAudienceEvent: function(a) {
        a.preventDefault();
        if(a.currentTarget.getAttribute("disabled")) {
            return
        }
        if(this.components.reportingAudienceList.view.collection.length > this.reportingAudiencesLimit) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("Only 50 audiences allowed."),
                heading: Granite.I18n.get("Error")
            });
            return
        }
        this.trigger("reportingAudience:addClick")
    },
    deleteSelectedAudiences: function(a) {
        this.components.reportingAudienceList.deleteSelected();
        this.$selectAllCheckbox.prop("checked", false);
        this.components.reportingAudienceList.toggleAll(false)
    },
    setBulkActionsVisibility: function() {
        var a = this.components.reportingAudienceList.getSelectedAudienceContainers().size();
        if(a) {
            this.$bulkActions.show()
        } else {
            this.$bulkActions.hide()
        }
    },
    selectAllReportingAudiences: function(a) {
        this.components.reportingAudienceList.toggleAll(a.target.checked);
        this.setBulkActionsVisibility()
    },
    uncheckSelectAllCheckbox: function() {
        this.view.$("#selectAllReportingAudiences").prop("checked", false)
    }
});
"use strict";
ELM.Activities.Settings = new Class({
    toString: "Settings",
    extend: F.ModelComponent,
    View: F.View.extend({
        commonEvents: {
            "change #activityNotes": "updateNotes",
            "change #priority": "updatePriority",
            "change #startDate": "updateStartDate",
            "change #endDate": "updateEndDate",
            "selected #reporting-solution": "updateReportingSolution",
            "change .description": "updateDescription"
        },
        additionalEvents: {},
        events: function() {
            return _.extend({}, this.commonEvents, this.additionalEvents)
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            noRerender: true,
            template: ELM.Activities.Templates.Settings
        })
    },
    registerBinders: function() {
        this.bind(this.addNewReportingAudience);
        this.bind(this.handleReportingAudienceAddClick);
        this.bind(this.updateReportingAudiences);
        this.bind(this.updateReportSuite);
        this.bind(this.delegateShowAudiencePickerEvent)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.addSubComponents();
            this.initializeWidgets();
            this.view.$(".description").focus()
        })
    },
    initializeWidgets: function() {
        this.view.$(".prioritySlider").slider();
        this.view.$(".select").select()
    },
    addSubComponents: function() {
        this.addMetrics();
        this.addStartDateSelector();
        this.addEndDateSelector();
        if(ELM.reportingEngine !== ELM.Activities.reportingEngine.TARGET && this.model.getActivityType() !== ELM.Activities.activityTypes.ONE_TO_ONE && ELM.isAnalyticsEnabledForRecsMVT) {
            this.addReportSuitePicker()
        }
        if(ELM.reportingEngine !== ELM.Activities.reportingEngine.ANALYTICS || this.model.getActivityType() === ELM.Activities.activityTypes.ONE_TO_ONE || !ELM.isAnalyticsEnabledForRecsMVT) {
            this.addReportingAudience()
        }
    },
    addMetrics: function() {
        this.addComponent(new ELM.Activities.Metrics({
            el: this.view.$(".metrics"),
            model: this.model,
            visible: true
        }), "metrics").on("metrics:addAudience", this.delegateShowAudiencePickerEvent)
    },
    delegateShowAudiencePickerEvent: function(a) {
        this.trigger("chooseReportingAudience", a)
    },
    addStartDateSelector: function() {
        var a = this.model.getStartDate();
        this.addComponent(new ELM.Activities.DateSelector({
            section: this.view.$("#startDateSection"),
            dateSource: this.view.$("#startDate"),
            dateOptionsModel: {
                options: [{
                    value: "",
                    label: Granite.I18n.get("When Activated")
                }, {
                    value: a ? a : new Date().getTime(),
                    label: Granite.I18n.get("Specified Date & Time")
                }]
            }
        }), "startdate")
    },
    addEndDateSelector: function() {
        var a = this.model.getEndDate();
        this.addComponent(new ELM.Activities.DateSelector({
            section: this.view.$("#endDateSection"),
            dateSource: this.view.$("#endDate"),
            dateOptionsModel: {
                options: [{
                    value: "",
                    label: Granite.I18n.get("When Deactivated")
                }, {
                    value: a ? a : new Date().getTime(),
                    label: Granite.I18n.get("Specified Date & Time")
                }]
            }
        }), "enddate")
    },
    addReportSuitePicker: function() {
        var a = this.model.getReportSuite();
        this.addComponent(new ELM.ReportSuitePicker({
            el: this.view.$(".report-suite-picker-placeholder"),
            selected: a || null,
            visible: true
        }), "reportSuitePicker").on("reportSuite:selected", this.updateReportSuite);
        if(a) {
            this.loadAnalyticsMetrics(a)
        }
    },
    addReportingAudience: function() {
        var a = this.getReportingAudiences();
        this.addComponent(new ELM.Activities.ReportingAudience({
            el: this.view.$("#reportingAudiences"),
            reportingAudiences: a,
            visible: true
        }), "reportingAudience").on("reportingAudience:addClick", this.handleReportingAudienceAddClick).on("reportingAudience:updated", this.updateReportingAudiences)
    },
    getReportingAudiences: function() {
        var a = this.model.getReportingAudiences(),
            b = [];
        _.each(a, function(d) {
            var c = new ELM.Models.Audience(d);
            b.push(c)
        }, this);
        return b
    },
    handleReportingAudienceAddClick: function() {
        var a = {
            multiSelection: true,
            addAndCloseButtonLabel: Granite.I18n.get("Add to Reports"),
            hideAllVisitors: true,
            reportingAudiencesCount: this.getReportingAudiencesCount(),
            selectedAudienceConsumer: this.addNewReportingAudience
        };
        this.trigger("chooseReportingAudience", a)
    },
    getReportingAudiencesCount: function() {
        return this.model.getReportingAudiences().length + 1
    },
    addNewReportingAudience: function(a) {
        this.components.reportingAudience.addNewReportingAudience(a)
    },
    updateReportingSolution: function(b) {
        var c = this.model.getReportingSolution(),
            a = b.selected;
        if(a !== c) {
            this.model.setReportingSolution(a);
            this.toggleRSPickerVisibility();
            this.toggleReportingAudiencesVisibility();
            this.removeMetrics();
            if(a === ELM.Activities.reportingEngine.ANALYTICS) {
                this.removeReportingAudiences()
            } else {
                this.removeReportSuite()
            }
            this.components.metrics.render()
        }
    },
    removeReportingAudiences: function() {
        var a = this.components.reportingAudience.components.reportingAudienceList;
        this.model.unsetReportingAudiencesRefs();
        a.view.collection.reset([]);
        a.render();
        a.trigger("reportingAudience:updated", [])
    },
    removeReportSuite: function() {
        this.components.reportSuitePicker.updateSelection("");
        this.model.removeReportSuite()
    },
    removeMetrics: function() {
        this.model.setMetrics([]);
        this.components.metrics.renderSubViews()
    },
    toggleRSPickerVisibility: function() {
        if(this.model.getReportingSolution() === ELM.Activities.reportingEngine.ANALYTICS) {
            this.view.$(".report-suite-container").removeClass("hidden")
        } else {
            this.view.$(".report-suite-container").addClass("hidden")
        }
    },
    toggleReportingAudiencesVisibility: function() {
        if(this.model.getReportingSolution() === ELM.Activities.reportingEngine.TARGET) {
            this.view.$(".reporting-audiences-container").removeClass("hidden")
        } else {
            this.view.$(".reporting-audiences-container").addClass("hidden")
        }
    },
    updateReportSuite: function(a) {
        this.components.metrics.components.metric0.removeAnalyticsMetrics();
        this.model.setReportSuite(a);
        this.components.metrics.components.metric0.model.setReportSuite(a);
        this.loadAnalyticsMetrics(a);
        this.view.$(".report-suite-picker-placeholder button").removeClass("error")
    },
    updateDescription: function(a) {
        this.model.setDescription(a.currentTarget.value)
    },
    updateReportingAudiences: function(a) {
        this.model.setReportingAudiencesRefs(a)
    },
    updateNotes: function(a) {
        this.model.setNotes(a.currentTarget.value)
    },
    updatePriority: function(a) {
        this.model.setPriority(a.currentTarget.value)
    },
    updateStartDate: function(a) {
        this.view.$(".durationWell").removeClass("incomplete");
        this.model.setStartDate(a.currentTarget.value)
    },
    updateEndDate: function(a) {
        this.view.$(".durationWell").removeClass("incomplete");
        this.model.setEndDate(a.currentTarget.value)
    },
    isDurationValid: function() {
        var a, b;
        if(!this.model.getStartDate() || !this.model.getEndDate()) {
            return true
        }
        a = this.components.startdate.getSpecifiedDate();
        b = this.components.enddate.getSpecifiedDate();
        if(b < a) {
            this.showErrorNotification(Granite.I18n.get("End date & time must be later than start date & time."));
            this.view.$(".durationWell").addClass("incomplete");
            return false
        }
        return true
    },
    isActivitySettingsComplete: function() {
        return this.isDurationValid()
    },
    isReportingSettingsComplete: function() {
        return this.isReportSuiteValid() && this.isGoalsComplete()
    },
    isReportSuiteValid: function() {
        if(this.model && this.model.getReportingSolution() === ELM.Activities.reportingEngine.ANALYTICS && !this.model.getReportSuite()) {
            this.view.$(".report-suite-picker-placeholder button").addClass("error");
            this.showErrorNotification(Granite.I18n.get("Please select a report suite."));
            return false
        }
        return true
    },
    isGoalsComplete: function() {
        return this.components.metrics.onComplete()
    },
    onComplete: function() {
        return this.isActivitySettingsComplete() && this.isReportingSettingsComplete()
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("Error")
        })
    },
    partialSave: function() {
        this.components.metrics.partialSave()
    },
    hasChanged: function() {
        return this.components.metrics.hasChanged()
    },
    saveClickedElements: function(a, b) {
        this.components.metrics.saveClickedElements(a, b)
    },
    loadAnalyticsMetrics: function(a) {
        var d = this,
            c, b, e = this.components.metrics.components.metric0;
        this.fetchMetricsForReportSuite(a).done(function(f) {
            if(f.errmsg) {
                c = f.errmsg || "";
                d.showErrorNotification(Granite.I18n.get("Error loading metrics from Analytics. {0}", c))
            } else {
                b = _.sortBy(_.map(f, function(h, g) {
                    return {
                        id: g,
                        name: h.name,
                        frag_id: h.frag_id,
                        type: h.type,
                        source: h.source,
                        data_group: h.data_group
                    }
                }), function(g) {
                    return g.name
                });
                e.analyticsMetrics = b;
                e.setAnalyticsMetrics(b)
            }
        }).fail(function(f, h, g) {
            c = JSON.parse(f.responseText)["error.message"] || g;
            d.showErrorNotification(Granite.I18n.get("Error loading metrics from Analytics. {0}", c))
        })
    },
    fetchMetricsForReportSuite: function(a) {
        return $.ajax({
            url: "/apps/mac/target/sc/rs.at.json?activityId=" + this.model.getId() + "&tenantId=" + ELM.client + "&path=dms/" + a + "/metrics&depth=1",
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    }
});
"use strict";
ELM.Activities.ABSettings = new Class({
    toString: "Settings",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change #activityNotes": "updateNotes",
            "change #priority": "updatePriority",
            "change #startDate": "updateStartDate",
            "change #endDate": "updateEndDate"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            noRerender: true,
            template: ELM.Activities.Templates.ABSettings
        });
        this.registerBinders();
        this.listenTo(this.view, "renderComplete", function() {
            this.createSubViews()
        })
    },
    registerBinders: function() {
        this.bind(this.addNewReportingAudience);
        this.bind(this.handleReportingAudienceAddClick);
        this.bind(this.updateReportingAudiences)
    },
    createSubViews: function() {
        var a = this.model.getStartDate(),
            c = this.model.getEndDate(),
            b = this.model.getActivityType();
        this.addSlider();
        this.addDateSelector({
            section: this.view.$("#startDateSection"),
            dateSource: this.view.$("#startDate"),
            dateOptionsModel: {
                options: [{
                    value: "",
                    label: Granite.I18n.get("When Activated")
                }, {
                    value: a ? a : new Date().getTime(),
                    label: Granite.I18n.get("Specified Date & Time")
                }]
            },
            componentName: "startdate"
        });
        this.addDateSelector({
            section: this.view.$("#endDateSection"),
            dateSource: this.view.$("#endDate"),
            dateOptionsModel: {
                options: [{
                    value: "",
                    label: Granite.I18n.get("When Deactivated")
                }, {
                    value: c ? c : new Date().getTime(),
                    label: Granite.I18n.get("Specified Date & Time")
                }]
            },
            componentName: "enddate"
        });
        if(b !== ELM.Activities.activityTypes.AB_ANALYTICS) {
            this.addReportingAudience()
        }
    },
    addSlider: function() {
        this.view.$(".prioritySlider").slider()
    },
    addDateSelector: function(a) {
        this.addComponent(new ELM.Activities.DateSelector({
            section: a.section,
            dateSource: a.dateSource,
            dateOptionsModel: a.dateOptionsModel
        }), a.componentName)
    },
    addReportingAudience: function() {
        this.addComponent(new ELM.Activities.ReportingAudience({
            el: this.view.$("#reportingAudiences"),
            reportingAudiences: this.getReportingAudiences(),
            visible: true
        }), "reportingAudience").on("reportingAudience:addClick", this.handleReportingAudienceAddClick.bind(this)).on("reportingAudience:updated", this.updateReportingAudiences.bind(this))
    },
    getReportingAudiences: function() {
        var a = this.model.getReportingAudiences(),
            b = [];
        _.each(a, function(d) {
            var c = new ELM.Models.Audience(d);
            b.push(c)
        }, this);
        return b
    },
    handleReportingAudienceAddClick: function(b) {
        var a = {
            multiSelection: true,
            addAndCloseButtonLabel: Granite.I18n.get("Add to Reports"),
            hideAllVisitors: true,
            reportingAudiencesCount: this.getReportingAudiencesCount(),
            selectedAudienceConsumer: this.addNewReportingAudience
        };
        this.trigger("chooseReportingAudience", a)
    },
    getReportingAudiencesCount: function() {
        return this.model.getReportingAudiences().length + 1
    },
    addNewReportingAudience: function(a) {
        this.components.reportingAudience.addNewReportingAudience(a)
    },
    updateReportingAudiences: function(a) {
        this.model.setReportingAudiences(a)
    },
    updateNotes: function(a) {
        this.model.setNotes(a.currentTarget.value)
    },
    updatePriority: function(a) {
        this.model.setPriority(a.currentTarget.value)
    },
    updateStartDate: function(a) {
        this.view.$(".durationWell").removeClass("incomplete");
        this.model.setStartDate(a.currentTarget.value)
    },
    updateEndDate: function(a) {
        this.view.$(".durationWell").removeClass("incomplete");
        this.model.setEndDate(a.currentTarget.value)
    },
    onComplete: function() {
        if(!this.model.getStartDate() || !this.model.getEndDate()) {
            return true
        }
        var a = this.components.startdate.getSpecifiedDate(),
            b = this.components.enddate.getSpecifiedDate();
        if(b < a) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("End date & time must be later than start date & time."),
                heading: Granite.I18n.get("Error")
            });
            this.view.$(".durationWell").addClass("incomplete");
            return false
        }
        return true
    },
    isComplete: function() {
        return true
    }
});
ELM.Activities.Summary = new Class({
    toString: "Summary",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {}
    }),
    Template: function() {
        return ELM.Activities.Templates.Summary.apply(this, arguments)
    },
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: this.Template
        });
        this.load(a.model);
        this.listenTo(this.view, "renderComplete", function() {
            this.initSubViews()
        })
    },
    initSubViews: function() {
        this.renderAudiencesArea()
    },
    renderAudiencesArea: function() {
        var a = this.model.getAudiencesRef(),
            b = this.model.getAudienceDataFromRef(a);
        if(this.model.getActivityType() != ELM.Activities.activityTypes.EXPERIENCE_TARGETING) {
            this.renderAudience(b)
        }
    },
    renderAudience: function(a) {
        var b = ELM.Activities.Templates.AudienceSummary(a);
        this.updateMarkup(b)
    },
    updateMarkup: function(a) {
        this.view.$(".audiencePlaceHolder").empty().html(a)
    }
});
ELM.Activities.ContentList = new Class({
    toString: "ContentList",
    extend: F.ListComponent,
    Collection: ELM.Collections.Contents,
    ItemTemplate: function() {
        return ELM.Activities.Templates.Content.apply(this, arguments)
    },
    ItemView: F.ListComponent.prototype.ItemView.extend({
        tagName: "article",
        className: "card-asset"
    }),
    ListView: F.ListComponent.prototype.ListView.extend({
        tagName: "div"
    }),
    NoResultsTemplate: function() {
        return ELM.Activities.Templates.ContentPicker.NoSearchResultContent.apply(this, arguments)
    },
    NoResultsView: F.ListComponent.prototype.ItemView.extend({
        tagName: "div",
        className: "noSearchResultContent"
    }),
    selectContent: function(a, b) {
        _.each(this.view.collection.models, function(d, c) {
            if(d.get(a) === b) {
                $(this.view.$("article.card-asset").get(c)).addClass("selected")
            }
        }, this)
    },
    updateContentList: function(a) {
        this.fetch(a)
    }
});
ELM.Activities.ContentPicker = new Class({
    toString: "ContentPicker",
    extend: F.Component,
    ListComponent: ELM.Activities.ContentList,
    View: F.View.extend({
        events: {
            "click .closePicker": "closeContentPicker"
        }
    }),
    getDefaultParamsForImageOffers: function() {
        return {
            path: "/content/dam/mac/" + ELM.client,
            property: "jcr:primaryType",
            "property.value": "dam:Asset",
            "p.nodedepth": "3",
            "p.hits": "full",
            "p.limit": "-1",
            "2_property": "jcr:content/metadata/dc:format",
            "2_property.value": "image/%",
            "2_property.operation": "like",
            "3_property": "jcr:content/related/offerThumbnail",
            "3_property.value": "true",
            "3_property.operation": "not",
            "4_property": "jcr:content/metadata/dc:format",
            "4_property.value": "image/bmp",
            "4_property.operation": "unequals"
        }
    },
    getDefaultParamsForHTMLOffers: function() {
        return {
            path: "/content/dam/mac/" + ELM.client,
            property: "jcr:primaryType",
            "property.value": "dam:Asset",
            "p.nodedepth": "3",
            "p.hits": "full",
            "p.limit": "-1",
            "2_property": "jcr:content/metadata/dc:format",
            "2_property.value": "text/html",
            "3_property": "jcr:content/related/targetAnonymousOffer",
            "3_property.value": "true",
            "3_property.operation": "not",
            "4_property": "jcr:content/related/targetGlobalOffer",
            "4_property.value": "true",
            "4_property.operation": "not",
            "1_group.p.or": "true",
            "1_group.0_property": "jcr:content/related/targetRecsTemplate",
            "1_group.0_property.operation": "unequals",
            "1_group.0_property.value": "true",
            "1_group.1_property": "jcr:content/related/targetRecsTemplate",
            "1_group.1_property.operation": "not"
        }
    },
    addSearchParams: function(b, a) {
        _.extend(b, {
            "0_group.p.or": "true",
            "0_group.0_property": "fn:lower-case(jcr:content/cq:name)",
            "0_group.0_property.value": a,
            "0_group.0_property.operation": "like",
            "0_group.1_property": "fn:lower-case(jcr:content/metadata/dc:title)",
            "0_group.1_property.value": a,
            "0_group.1_property.operation": "like"
        })
    },
    removeSearchParams: function(a) {
        delete a["0_group.p.or"];
        delete a["0_group.0_property"];
        delete a["0_group.0_property.value"];
        delete a["0_group.0_property.operation"];
        delete a["0_group.1_property"];
        delete a["0_group.1_property.value"];
        delete a["0_group.1_property.operation"]
    },
    fetchContentForSearch: function(c) {
        var a = this.requestOptions.offerType,
            b = (a == "imageOffer") ? this.queryParamsImageOffers : this.queryParamsHtmlOffers;
        if(c) {
            c = "%" + c.toLowerCase() + "%";
            this.addSearchParams(b, c)
        } else {
            this.removeSearchParams(b)
        }
        this.components["content-list"].updateContentList(b);
        return false
    },
    construct: function(a) {
        this.initView(a.el);
        this.cacheSelectors();
        this.registerVars();
        this.registerBinders();
        this.registerGlobalTriggers();
        this.addSubComponents()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            visible: false,
            template: ELM.Activities.Templates.ContentPicker
        }).render()
    },
    cacheSelectors: function() {},
    registerVars: function() {
        this.queryParamsImageOffers = this.getDefaultParamsForImageOffers();
        this.queryParamsHtmlOffers = this.getDefaultParamsForHTMLOffers()
    },
    addSubComponents: function() {
        this.addComponent(new this.ListComponent({
            el: this.view.$(".content-list-container"),
            visible: false,
            events: {
                "click article": "handleSelect"
            }
        }), "content-list").on("collection:loaded", this.showContentPicker.bind(this)).on("list:itemSelected", this.triggerContentSelectedEvent.bind(this));
        this.addComponent(new ELM.Searcher({
            el: this.view.$el.find(".contentPickerSearchPlaceholder")
        }), "searcher").on("search:changed", this.fetchContentForSearch.bind(this))
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerBinders: function() {
        this.bind(this.fetchDefaultContent);
        this.bind(this.hidePicker)
    },
    registerGlobalTriggers: function() {
        F.on("A-B:experienceEditor:selectOffer A-B-analytics:experienceEditor:selectOffer", this.fetchDefaultContent);
        F.on("A-B:experienceEditor:ContentSetSuccessfully A-B-analytics:experienceEditor:ContentSetSuccessfully", this.hidePicker)
    },
    unregisterGlobalTriggers: function() {
        F.off("A-B:experienceEditor:selectOffer A-B-analytics:experienceEditor:selectOffer", this.fetchDefaultContent);
        F.off("A-B:experienceEditor:ContentSetSuccessfully A-B-analytics:experienceEditor:ContentSetSuccessfully", this.hidePicker)
    },
    triggerContentSelectedEvent: function(a) {
        var b = $.extend(a, this.requestOptions);
        F.trigger(ELM.evtNamespace + ":content:selected", b)
    },
    updateContentPickerHeading: function() {
        var a = this.requestOptions.offerType == "imageOffer" ? Granite.I18n.get("Select an image") : Granite.I18n.get("Select an HTML offer");
        this.view.$(".contentPickerHeading").text(a)
    },
    showContentPicker: function(a) {
        this.updateContentPickerHeading();
        this.view.$el.addClass("fadeInLeftBig");
        this.show({
            silent: true
        });
        this.components["content-list"].show({
            silent: true
        })
    },
    fetchDefaultContent: function(a) {
        this.view.$(".searchBox").val("");
        this.queryParamsImageOffers["group.0_property.value"] = "";
        this.queryParamsHtmlOffers["group.0_property.value"] = "";
        this.queryParamsImageOffers["group.1_property.value"] = "";
        this.queryParamsHtmlOffers["group.1_property.value"] = "";
        if(a.offerType === "imageOffer") {
            this.components["content-list"].updateContentList(this.queryParamsImageOffers)
        } else {
            if(a.offerType === "htmlOffer") {
                this.components["content-list"].updateContentList(this.queryParamsHtmlOffers)
            }
        }
        this.requestOptions = a
    },
    hidePicker: function() {
        this.view.$el.removeClass("fadeInLeftBig");
        this.view.hide();
        F.trigger(ELM.evtNamespace + ":content-picker:closed", this.requestOptions)
    },
    closeContentPicker: function(a) {
        a.preventDefault();
        this.hidePicker()
    }
});
ELM.Activities.ExperienceTargetingContentPicker = new Class({
    toString: "ContentPicker",
    extend: ELM.Activities.ContentPicker,
    registerGlobalTriggers: function() {
        F.on("Experience-Targeting:experienceEditor:selectOffer", this.fetchDefaultContent);
        F.on("Experience-Targeting:experienceEditor:ContentSetSuccessfully", this.hidePicker)
    },
    unregisterGlobalTriggers: function() {
        F.off("Experience-Targeting:experienceEditor:selectOffer", this.fetchDefaultContent);
        F.off("Experience-Targeting:experienceEditor:ContentSetSuccessfully", this.hidePicker)
    }
});
"use strict";
ELM.Activities.ExperienceEditorToolbar = new Class({
    toString: "ExperienceEditorToolbar",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click [data-event]": "triggerEvent",
            "click .icon-undo": "undoActionForExperience",
            "click .icon-redo": "redoActionForExperience",
            "click .icon-globe": "handleUrlSettingsClick",
            "click .icon-layers": "handleOverlayClick",
            "selected .select[data-event]": "triggerEvent"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor.Toolbar
        });
        this.parent = a.component;
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        });
        this.actionTypeClass = {
            undo: ".icon-undo",
            redo: ".icon-redo",
            overlay: ".icon-layers"
        }
    },
    handleUrlSettingsClick: function(a) {
        this.parent.trigger("updateUrlSettings")
    },
    handleOverlayClick: function(a) {
        if($(a.currentTarget).hasClass("disabled")) {
            return false
        }
    },
    updateUndoRedoIcons: function(a) {
        this.disableAction("undo");
        this.disableAction("redo");
        if(a.stackPointer > -1) {
            this.enableAction("undo")
        }
        if(a.stackPointer < a.actionsStack.length - 1) {
            this.enableAction("redo")
        }
    },
    disableAction: function(a) {
        this.view.$el.find(this.actionTypeClass[a]).addClass("disabled")
    },
    enableAction: function(a) {
        this.view.$el.find(this.actionTypeClass[a]).removeClass("disabled")
    },
    undoActionForExperience: function() {
        if(!this.view.$el.find(this.actionTypeClass.undo).hasClass("disabled") && this.parent.isVisible()) {
            this.trigger("action:undo")
        }
    },
    redoActionForExperience: function() {
        if(!this.view.$el.find(this.actionTypeClass.redo).hasClass("disabled") && this.parent.isVisible()) {
            this.trigger("action:redo")
        }
    },
    initializeWidgets: function() {
        this.view.$(".popover").popover();
        this.view.$(".select").select();
        this.overlayPopoverCUIObject = this.view.$(".object-highlighter-popover").data("popover")
    },
    getOverlayPopoverCUIObject: function() {
        return this.overlayPopoverCUIObject
    },
    setActivityNameOnToolbar: function(a) {
        this.view.$(".heading").text(a)
    },
    triggerEvent: function(c) {
        var a, b = c.currentTarget;
        if(b && b.getAttribute) {
            a = b.getAttribute("data-event")
        }
        if(!a) {
            throw new Error(this.toString() + " error: cannot trigger event")
        }
        this.trigger(a, c)
    }
});
ELM.Activities.ExperienceEditorInsertElement = new Class({
    toString: "InsertElementAction",
    extend: F.ModelComponent,
    construct: function(b) {
        var a = $("#insert-element-actionsPopover");
        this.registerBinders();
        this.instructionsDialog = b.instructionsDialog;
        if(!a.length) {
            a = $('<div id="insert-element-actionsPopover" class="experienceEditorPopover width-12"></div>').appendTo(document.body)
        }
        this.popover = new CUI.Popover({
            element: a,
            content: "",
            pointFrom: "left",
            preventAutoHide: true
        });
        this.popover.$element.on("click", "li", this.handleSelectedAction);
        this.on("insert-element:html", this.addHTMLEditComponent.bind(this));
        this.on("insert-element:image", this.showContentPicker.bind(this));
        this.on("insert-element:text", this.showEditDialogForText.bind(this))
    },
    destruct: function() {
        this.popover.$element.off("click", "li", this.handleSelectedAction)
    },
    registerBinders: function() {
        this.bind(this.handleSelectedAction);
        this.bind(this.showContentPicker);
        this.bind(this.addHTMLEditComponent);
        this.bind(this.showEditDialogForText)
    },
    initializeWidgets: function() {
        var a = ELM.Activities.Templates.ExperienceEditor.InsertElementActions;
        this.popover.set("content", a({}));
        this.popover.set(this.popoverPosition);
        this.cdq.sendHighlightElementRequest("#" + this.parentElementId);
        this.popover.show();
        this.instructionsDialog.showDialog({
            selector: this.parentElementId
        })
    },
    handleSelectedAction: function(a) {
        this.trigger("insertElement:destroy-initial-setup", this.parentElementId);
        this.destructComponents();
        this.triggerSelectedAction(a);
        this.popover.hide()
    },
    triggerSelectedAction: function(b) {
        var a = b.target.getAttribute("data-event");
        this.trigger(a)
    },
    destructComponents: function() {
        var a = this.components.experienceEditorInsertElementEditContent;
        if(a) {
            a.destruct()
        }
    },
    addHTMLEditComponent: function() {
        this.dialog.set("heading", Granite.I18n.get("Insert HTML"));
        this.dialog.insertElementEditContentType = "html";
        this.addComponent(new ELM.Activities.ExperienceEditorInsertElementEditContent({
            dialog: this.dialog,
            visible: true,
            model: this.model,
            editContentType: "html",
            template: ELM.Activities.Templates.ExperienceEditor.InsertElementEditHTML
        }))
    },
    showContentPicker: function() {
        F.trigger(ELM.evtNamespace + ":experienceEditor:selectOffer", {
            offerType: "imageOffer",
            requestAction: ELM.ExperienceEditorActions.INSERT_ELEMENT
        })
    },
    showEditDialogForText: function() {
        this.dialog.set("heading", Granite.I18n.get("Insert Text"));
        this.dialog.set("content", ELM.Activities.Templates.ExperienceEditor.HtmlEditor({}));
        this.dialog.insertElementEditContentType = "text";
        if(this.components.experienceEditorInsertElementEditContent) {
            this.components.experienceEditorInsertElementEditContent.destruct()
        }
        this.addComponent(new ELM.Activities.ExperienceEditorInsertElementEditContent({
            dialog: this.dialog,
            visible: true,
            model: this.model,
            editContentType: "text",
            template: ELM.Activities.Templates.ExperienceEditor.InsertElementEditText
        }))
    },
    showInsertElementEnvironment: function(a) {
        this.cdq = a.cdq;
        this.popoverPosition = a.popoverPosition;
        this.dialog = a.editHTMLDialog;
        this.load(a.model);
        this.parentElementId = a.parentElementId;
        this.initializeWidgets()
    }
});
ELM.Activities.RearrangeInstructionsDialog = new Class({
    toString: "RearrangeInstructionsDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .rearrange-cancel": "exitRearrangeMode",
            "click .rearrange-done": "exitRearrangeMode"
        }
    }),
    construct: function(a) {
        this.model = this.load(a.model);
        this.view = new this.View({
            el: a.el,
            component: this,
            template: a.template,
            model: this.model
        });
        this.listenTo(this.model, "change", this.render)
    },
    exitRearrangeMode: function(b) {
        var a = b.target.getAttribute("data-event");
        this.trigger(a);
        this.view.hide()
    }
});
ELM.Activities.MoveInstructionsDialog = new Class({
    toString: "MoveInstructionsDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .move-done": "exitMoveMode",
            "click .move-cancel": "exitMoveMode",
            "change .coordinates input": "changeCoordinates"
        }
    }),
    construct: function(a) {
        this.model = this.load(a.model);
        this.view = new this.View({
            el: a.el,
            component: this,
            template: a.template,
            model: this.model
        });
        this.listenTo(this.view, "renderComplete", this.initState);
        this.bind(this.moveElement)
    },
    disableMoveMode: function() {
        $(document).off("keydown", this.moveElement);
        this.moveModeEnabled = false
    },
    enableMoveMode: function() {
        $(document).on("keydown", this.moveElement);
        this.moveModeEnabled = true
    },
    initState: function() {
        this.$xCoordinateInput = this.view.$(".x-value");
        this.$yCoordinateInput = this.view.$(".y-value")
    },
    isCoordinateChangeAllowed: function(a) {
        return(this.moveModeEnabled && !this.isCoordinateFieldInFocus(a.target))
    },
    moveElement: function(a) {
        var b, c = {
            x: 0,
            y: 0
        };
        a = a || window.event;
        b = a.keyCode;
        switch(b) {
            case ELM.keycodes.LEFT_ARROW_KEY:
                c.x = -1;
                break;
            case ELM.keycodes.UP_ARROW_KEY:
                c.y = -1;
                break;
            case ELM.keycodes.RIGHT_ARROW_KEY:
                c.x = 1;
                break;
            case ELM.keycodes.DOWN_ARROW_KEY:
                c.y = 1;
                break
        }
        if(this.isCoordinateChangeAllowed(a)) {
            this.addOffsetToCoordinates(c)
        }
    },
    changeCoordinates: function() {
        var a = this.getCoordinates();
        if(!isNaN(a.x) && !isNaN(a.y)) {
            this.updateCoordinates(a)
        }
    },
    addOffsetToCoordinates: function(b) {
        if(b.x || b.y) {
            var a = this.getCoordinates();
            this.updateCoordinates({
                x: a.x + b.x,
                y: a.y + b.y
            })
        }
    },
    getCoordinates: function() {
        var b = parseInt(this.$xCoordinateInput.val(), 10),
            a = parseInt(this.$yCoordinateInput.val(), 10);
        return {
            x: b,
            y: a
        }
    },
    setCoordinates: function(a) {
        this.$xCoordinateInput.val(a.x);
        this.$yCoordinateInput.val(a.y)
    },
    updateCoordinates: function(a) {
        this.setCoordinates(a);
        this.trigger("coordinates:changed", a)
    },
    isCoordinateFieldInFocus: function(b) {
        var a = $(b);
        return a.hasClass("x-value") || a.hasClass("y-value")
    },
    exitMoveMode: function(c) {
        var b = $(c.target),
            a = b.attr("data-event");
        this.trigger(a);
        this.view.hide();
        this.disableMoveMode()
    }
});
ELM.Activities.ResizeInstructionsDialog = new Class({
    toString: "ResizeInstructionsDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .resize-cancel": "exitResizeMode",
            "click .resize-done": "exitResizeMode",
            "change .dimensions input": "changeDimensions"
        }
    }),
    construct: function(a) {
        this.model = this.load(a.model);
        this.view = new this.View({
            el: a.el,
            component: this,
            template: a.template,
            model: this.model
        });
        this.listenTo(this.view, "renderComplete", this.initState)
    },
    initState: function() {
        this.$widthInput = this.view.$(".width-input");
        this.$heightInput = this.view.$(".height-input")
    },
    getDimensions: function() {
        var b = this.$widthInput.val(),
            a = this.$heightInput.val();
        return {
            w: b,
            h: a
        }
    },
    setDimensions: function(a) {
        this.$widthInput.val(a.w);
        this.$heightInput.val(a.h)
    },
    changeDimensions: function() {
        var a = this.getDimensions();
        if(this.validateDimensions(a)) {
            this.trigger("dimensions:changed", a)
        }
    },
    validateDimensions: function(b) {
        var a = (b.w == parseInt(b.w) + "px"),
            c = (b.h == parseInt(b.h) + "px");
        return a && c
    },
    exitResizeMode: function(b) {
        var a = b.target.getAttribute("data-event");
        this.trigger(a);
        this.view.hide()
    }
});
ELM.Activities.InsertElementInstructionsDialog = new Class({
    toString: "InsertElementInstructionsDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .insert-element-cancel": "cancelInsertElementOperation"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: a.template
        })
    },
    showDialog: function(a) {
        this.selector = a.selector;
        this.show()
    },
    cancelInsertElementOperation: function(b) {
        var a = b.target.getAttribute("data-event");
        this.trigger(a, this.selector)
    }
});
ELM.Activities.ExperienceEditorInsertElementEditContent = new Class({
    toString: "ExperienceEditorInsertElementEditContent",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .element-type-dropdown": "updateElementTypeFromEvent",
            "change .action-dropdown": "updateActionInModel",
            "keyup .editBoxExperienceEditor": "setContent"
        }
    }),
    construct: function(b) {
        var a = b.dialog.$element.find(".modal-body"),
            c;
        a.html("");
        c = $("<div></div>").appendTo(a);
        this.load(b.model);
        this.dialog = b.dialog;
        if(b.editContentType == "text") {
            this.setElementType("span")
        }
        this.view = new this.View({
            el: c,
            component: this,
            template: b.template
        });
        this.listenTo(this.view, "renderComplete", this.initializeWidgets.bind(this));
        this.listenTo(this.model, "change", this.render.bind(this))
    },
    initializeWidgets: function() {
        var a = this.view.$el.find(".dropdown");
        if(a) {
            a.dropdown()
        }
        this.dialog.show()
    },
    updateElementTypeFromEvent: function(a) {
        this.setElementType(a.target.value)
    },
    setElementType: function(a) {
        this.model.updateElementType(a)
    },
    setContent: function(a) {
        this.model.silentSetContent(a.target.value)
    },
    updateActionInModel: function(a) {
        this.model.silentSetAction(a.target.value)
    }
});
ELM.Activities.ExperienceEditorActionMenu = new Class({
    toString: "ExperienceEditorActionMenu",
    extend: F.Component,
    construct: function(a) {
        this.bind(this.handlePopoverItemSelection);
        this.popover = new CUI.Popover({
            element: a.el,
            content: "",
            pointFrom: "left",
            noHide: true
        });
        this.popover.$element.on("click", "li", this.handlePopoverItemSelection);
        this.parent = a.component;
        this.originalOffset = 0;
        this.isMbox = false
    },
    mousePosition: {
        clientX: 0,
        clientY: 0
    },
    adjustPopoverOnScroll: function(e) {
        if(this.originalOffset) {
            var i = this.popover.$element,
                f = this.originalOffset.top - (e.evt.pageYOffset - e.pageInfo.pageOriginalOffsetY),
                g = this.originalOffset.left - (e.evt.pageXOffset - e.pageInfo.pageOriginalOffsetX),
                a = window.innerWidth,
                b = window.innerHeight,
                c = i.outerWidth(),
                h = i.outerHeight(),
                d = Math.round((c - i.width()) / 1.5);
            if(f < e.pageInfo.topOffset) {
                f = e.pageInfo.topOffset;
                if(i.hasClass("arrow-top")) {
                    f += d
                }
            }
            if(f + h > b) {
                f = b - h;
                if(i.hasClass("arrow-bottom")) {
                    f -= d
                }
            }
            if(g < e.pageInfo.leftOffset) {
                g = e.pageInfo.leftOffset;
                if(i.hasClass("arrow-left")) {
                    g += d
                }
            }
            if(g + c > a) {
                g = a - c;
                if(i.hasClass("arrow-right")) {
                    g -= d
                }
            }
            i.css({
                top: f,
                left: g
            })
        }
    },
    getActionMenuTemplate: function(a) {
        switch(a) {
            case "MBOX":
                return ELM.Activities.Templates.ExperienceEditor.ActionMenu.Mbox;
            case "A":
                return ELM.Activities.Templates.ExperienceEditor.ActionMenu.Link;
            case "IMG":
                return ELM.Activities.Templates.ExperienceEditor.ActionMenu.Image;
            case "VIDEO":
                return ELM.Activities.Templates.ExperienceEditor.ActionMenu.Video;
            default:
                return ELM.Activities.Templates.ExperienceEditor.ActionMenu.Others
        }
    },
    adjustPosition: function(e) {
        var d = e.el.tagName,
            c = this.getActionMenuTemplate(e.el.mboxName === "" ? d : "MBOX"),
            b = {},
            a = this.popover.$element;
        this.isMbox = (e.el.mboxName !== "");
        b.isHtml = (d === "HTML");
        b.isForm = (d === "FORM");
        b.isChild = (this.parent.lastChild < this.parent.path.length - 1);
        this.popover.set("content", c(b));
        this.popover.set(this.getPosition(e));
        this.popover.show();
        this.originalOffset = a.offset()
    },
    getRelativePosition: function(e) {
        var h = {},
            d, c, g = e.el.top,
            b = e.el.right,
            a = e.el.bottom,
            f = e.el.left;
        if(!e.evt || e.evt.which === 0) {
            e.evt = this.mousePosition
        }
        d = e.evt.clientX;
        c = e.evt.clientY;
        h.l = Math.abs(f - d);
        h.r = Math.abs(b - d);
        h.b = Math.abs(a - c);
        h.t = Math.abs(g - c);
        h.vc = Math.abs(g + e.el.offsetHeight / 2 - c);
        h.hc = Math.abs(f + e.el.offsetWidth / 2 - d);
        h.tl = h.t + h.l;
        h.tr = h.t + h.r;
        h.br = h.b + h.r;
        h.bl = h.b + h.l;
        h.tc = h.t + h.hc;
        h.bc = h.b + h.hc;
        h.lc = h.l + h.vc;
        h.rc = h.r + h.vc;
        delete h.l;
        delete h.r;
        delete h.b;
        delete h.t;
        delete h.vc;
        delete h.hc;
        return h
    },
    getClosestPosition: function(c) {
        var a = Infinity,
            b;
        for(var d in c) {
            if(c[d] < a) {
                b = d;
                a = c[d]
            }
        }
        return b
    },
    getPosition: function(d) {
        var b = {
                tl: {
                    left: d.el.left,
                    top: d.el.top,
                    pointFrom: "left"
                },
                tr: {
                    left: d.el.right,
                    top: d.el.top,
                    pointFrom: "right"
                },
                bl: {
                    left: d.el.left,
                    top: d.el.bottom,
                    pointFrom: "left"
                },
                br: {
                    left: d.el.right,
                    top: d.el.bottom,
                    pointFrom: "right"
                },
                lc: {
                    left: d.el.left,
                    top: d.el.top + d.el.offsetHeight / 2,
                    pointFrom: "left"
                },
                rc: {
                    left: d.el.right,
                    top: d.el.top + d.el.offsetHeight / 2,
                    pointFrom: "right"
                },
                tc: {
                    left: d.el.left + d.el.offsetWidth / 2,
                    top: d.el.top,
                    pointFrom: "top"
                },
                bc: {
                    left: d.el.left + d.el.offsetWidth / 2,
                    top: d.el.bottom,
                    pointFrom: "bottom"
                }
            },
            a = this.getClosestPosition(this.getRelativePosition(d)),
            f = b[a]["left"],
            e = b[a]["top"],
            c = b[a]["pointFrom"];
        e += this.parent.getOffsetTop();
        if(e + this.popover.$element.height() > $(window).height()) {
            e = Math.min(e - 5, $(window).height() - 10)
        }
        return {
            pointAt: [f, e],
            pointFrom: c
        }
    },
    isSelectedElementMbox: function() {
        return this.isMbox
    },
    handlePopoverItemSelection: function(a) {
        var c = this.parent.lastData,
            b = $(a.currentTarget).data("action");
        this.performAction(b, c);
        this.popover.hide();
        this.parent.mousePosition = {
            clientX: a.clientX,
            clientY: a.clientY
        };
        a.stopPropagation()
    },
    editHTML: function(c, d, e, a) {
        var b = this.parent.updateProxyWrapperOnElements({
            content: a || c.el.innerHTML,
            action: "remove"
        });
        this.parent.dialog.set("heading", Granite.I18n.get("Edit HTML"));
        this.parent.dialog.set("content", ELM.Activities.Templates.ExperienceEditor.HtmlEditor({}));
        this.parent.dialog.$element.find("textarea").val(b);
        this.parent.dialogAction = "editHTML";
        this.parent.dialog.src = e;
        this.parent.dialog.set("buttons", this.parent.defaultDialogButtons);
        if(d) {
            this.parent.dialog.show()
        }
    },
    doEditAttr: function(b, e, g, h, f, i, a) {
        var c = e,
            d;
        if(e === "class") {
            c = "className"
        }
        b.el.property = c;
        d = b.el[c];
        if(i) {
            this.parent.dialog.isImageSwap = i;
            d = a
        } else {
            if(e == "href" || e == "src") {
                d = this.parent.updateProxyWrapperOnSpecifiedElementUrl({
                    type: b.el.tagName,
                    url: d,
                    action: "remove"
                })
            }
            delete this.parent.dialog.isImageSwap
        }
        this.parent.dialog.set("heading", g);
        this.parent.dialog.set("content", ELM.Activities.Templates.ExperienceEditor.EditAttribute({
            attr: e,
            description: h,
            value: d
        }));
        this.parent.dialog.set("buttons", this.parent.defaultDialogButtons);
        if(f) {
            this.parent.dialog.show();
            this.parent.dialogAction = "editAttr:" + e
        }
    },
    doHideElement: function(c) {
        var a = this,
            b = this.parent.getCurExperience();
        this.parent.getSelector("#" + c.el.id, function(d) {
            a.parent.processEditAction(b, {
                action: "setStyle",
                selector: d.selector,
                property: "visibility",
                value: "hidden",
                control: {
                    action: "setStyle",
                    selector: d.selector,
                    property: "visibility",
                    value: c.el.style.visibility
                }
            }, c, function() {
                a.parent.cdq.setStyle("#" + c.el.id, "visibility", "hidden", function() {
                    a.parent.generateThumbnail(a.parent.currentExperienceIndex)
                })
            })
        })
    },
    doRemoveElement: function(c) {
        var a = this,
            b = this.parent.getCurExperience();
        this.parent.getSelector("#" + c.el.id, function(d) {
            a.parent.processEditAction(b, {
                action: "setStyle",
                selector: d.selector,
                property: "display",
                value: "none",
                control: {
                    action: "setStyle",
                    selector: d.selector,
                    property: "display",
                    value: c.el.style.display
                }
            }, c, function() {
                a.parent.cdq.setStyle("#" + c.el.id, "display", "none", function() {
                    a.parent.generateThumbnail(a.parent.currentExperienceIndex)
                })
            })
        })
    },
    selectParent: function(b) {
        var a;
        if(this.parent.lastChild > 0) {
            this.parent.lastChild--;
            a = this.parent.path.slice(0, this.parent.lastChild + 1).join(" > ");
            this.parent.cdq.triggerEvent(a, "at-click", {
                isATEvent: true
            })
        }
    },
    trackClick: function() {
        this.parent.dialog.set("heading", "Add click tracking");
        this.parent.dialogAction = "trackClick";
        this.showTrackDialog()
    },
    trackSubmit: function() {
        this.parent.dialog.set("heading", "Track Submit");
        this.parent.dialogAction = "trackSubmit";
        this.showTrackDialog()
    },
    trackLoad: function() {
        this.parent.dialog.set("heading", "Track Load");
        this.parent.dialogAction = "trackLoad";
        this.showTrackDialog()
    },
    showTrackDialog: function() {
        var a = this.parent.getCurExperience();
        this.parent.dialog.set("content", ELM.Activities.Templates.ExperienceEditor.MboxField({
            actions: a.actions
        }));
        this.parent.dialog.$element.find(".dropdown").dropdown();
        this.popover.hide();
        this.parent.dialog.set("buttons", this.defaultDialogButtons);
        this.parent.dialog.show()
    },
    performAction: function(b, a) {
        switch(b) {
            case "editHTML":
                this.editHTML(a, true, "");
                break;
            case "editLink":
                this.doEditAttr(a, "href", Granite.I18n.get("Edit Link"), Granite.I18n.get("Enter a link URL"), true, false);
                break;
            case "editSrc":
                this.doEditAttr(a, "src", Granite.I18n.get("Edit Image Source"), Granite.I18n.get("Enter a image source link"), true, false);
                break;
            case "swapImage":
                F.trigger(ELM.evtNamespace + ":experienceEditor:selectOffer", {
                    offerType: "imageOffer"
                });
                break;
            case "swapOffer":
                F.trigger(ELM.evtNamespace + ":experienceEditor:selectOffer", {
                    offerType: "htmlOffer"
                });
                break;
            case "hideElement":
                this.doHideElement(a);
                break;
            case "removeElement":
                this.doRemoveElement(a);
                break;
            case "editCSSClass":
                this.doEditAttr(a, "class", Granite.I18n.get("Edit CSS Classes"), Granite.I18n.get("Enter CSS classes, space separated"), true, false);
                break;
            case "selectParent":
                this.selectParent(a);
                break;
            case "navigateLink":
                this.navigateToLink(a);
                break;
            case ELM.ExperienceEditorActions.REARRANGE:
                this.triggerRearrange(a);
                break;
            case ELM.ExperienceEditorActions.RESIZE:
                this.triggerResize(a);
                break;
            case ELM.ExperienceEditorActions.MOVE:
                this.triggerMove(a);
                break;
            case ELM.ExperienceEditorActions.INSERT_ELEMENT:
                this.insertElement(a);
                break;
            default:
                console.error("No action handler found for the action: " + b)
        }
    },
    navigateToLink: function(b) {
        var a = this.parent.updateProxyWrapperOnSpecifiedElementUrl({
            type: b.el.tagName,
            url: b.el.href,
            action: "remove"
        });
        if(a) {
            if(a.charAt(0) === "#") {
                this.parent.cdq.navigate(a)
            } else {
                if(!this.parent.isLinkAbsolute(a)) {
                    a = this.parent.resolveUrl(a, this.parent.getActivityUrl())
                }
                this.parent.showControlUrlChangeNotification(a)
            }
        }
    },
    triggerRearrange: function(a) {
        this.trigger("action:rearrange", a)
    },
    triggerMove: function(a) {
        this.trigger("action:move", a)
    },
    triggerResize: function(a) {
        this.trigger("action:resize", a)
    },
    insertElement: function(a) {
        this.trigger("action:insert-element", a);
        this.popover.hide()
    }
});
ELM.Activities.ExperienceEditorNavPopover = new Class({
    toString: "ExperienceEditorNavPopover",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .deleteExperience": "deleteExperienceHandler",
            "click .duplicateExperience": "duplicateExperienceHandler",
            "click .renameExperience": "renameExperienceHandler",
            "click .redirect-to-url": "redirectToURLHandler"
        }
    }),
    construct: function(a) {
        a.template = a.template || ELM.Activities.Templates.ExperienceEditor.NavPopover;
        this.view = new this.View({
            el: a.el,
            component: this,
            template: a.template
        }).render();
        this.parent = a.component;
        this.$experienceNavPopover = $(a.el).hide()
    },
    deleteExperienceHandler: function(a) {
        this.trigger("ExperienceEditorNavPopover:experienceDeletion", a)
    },
    duplicateExperienceHandler: function(a) {
        this.trigger("ExperienceEditorNavPopover:experienceDuplication", a)
    },
    renameExperienceHandler: function(a) {
        this.trigger("ExperienceEditorNavPopover:experienceRename", a)
    },
    redirectToURLHandler: function(a) {
        this.trigger("ExperienceEditorNavPopover:redirectToURL", a)
    },
    hideExperienceNavPopover: function() {
        var a = this.$experienceNavPopover.data("popover");
        a.hide()
    }
});
ELM.Activities.ExperienceEditorInteractModeToolbar = new Class({
    toString: "ExperienceEditorInteractModeToolbar",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .ee-interact-refresh": "handleBrowseRefresh",
            "keydown .addressField": "handleInteractUrlChange",
            "click .ee-interact-back": "handleBackward",
            "click .ee-interact-forward": "handleForward"
        }
    }),
    construct: function(a) {
        this.load(a.model);
        this.initView(a);
        this.registerBinders();
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            el: a.el,
            model: a.model,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor.InteractModeToolbar,
            visible: true
        }).render()
    },
    registerBinders: function() {
        this.bind(this.handleBrowseRefresh);
        this.bind(this.handleInteractUrlChange);
        this.bind(this.handleForward);
        this.bind(this.handleBackward)
    },
    registerListeners: function() {
        this.listenTo(this.model, "change", this.render.bind(this))
    },
    handleInteractUrlChange: function(a) {
        var b = $.trim(a.target.value);
        if(a.keyCode === ELM.keycodes.ENTER) {
            b = ELM.Util.addProtocolToUrl(b);
            this.model.setControlUrl(b, true);
            if(!ELM.Util.UrlValidationRegex.test(b)) {
                $(a.target).addClass("error");
                this.trigger("hideFrame");
                return
            }
            $(a.target).removeClass("error");
            this.model.addToHistory(this.model.getControlUrl());
            this.render();
            this.trigger("showFrame");
            this.trigger("updateFrameSource", this.model.getControlUrl())
        }
    },
    handleForward: function() {
        this.model.doForward();
        this.updateFrame()
    },
    handleBackward: function() {
        this.model.doBackward();
        this.updateFrame()
    },
    updateFrame: function() {
        if(!this.model.getControlUrl()) {
            this.trigger("hideFrame");
            return
        }
        this.trigger("showFrame");
        this.trigger("updateFrameSource", this.model.getControlUrl())
    },
    handleBrowseRefresh: function() {
        this.trigger("reloadFrame")
    }
});
ELM.Activities.ExperienceEditor = new Class({
    toString: "ExperienceEditor",
    extend: F.ModelComponent,
    options: {
        noRerender: true
    },
    View: F.View.extend({
        events: {
            "click .tabs nav.experiences a": "showExperienceHandler",
            "click .icon-gear": "markConfigButtonAsSelected",
            "click .addExperience": "addExperienceHandler",
            "focusout .experienceNameInput": "experienceNameFocusoutHandler",
            "keyup .experienceNameInput": "experienceNameKeyupHandler",
            "click .editMode": "editModeNavigationHandler",
            click: "resetSelection",
            "selected .targeted-audience-list": "showExperienceForSelectedAudience",
            "click .script-use-notification .close": "hideScriptUseNotification",
            "click .redirect-overlay": "disableClick",
            "hover .redirect-overlay": "disableHover",
            "change input[name=ee-build-mode]": "updateExperienceEditorBuildMode"
        }
    }),
    messages: {
        timeoutError: Granite.I18n.get("The selected website is taking too long to load or does not contain Target libraries."),
        unloadWarning: Granite.I18n.get("The page is trying to exit the Visual Experience Composer. To stay in Adobe Target, do not reload or leave the page."),
        addressBarNavigation: Granite.I18n.get("Please use the address bar to navigate to your website."),
        duplicateExperienceName: Granite.I18n.get("Empty or duplicate experience names are not permitted."),
        emptyControlUrl: Granite.I18n.get("Please specify a control URL for your activity to enable click tracking."),
        invalidUrl: Granite.I18n.get("To add experiences, enter a valid URL."),
        nonUniqueId: Granite.I18n.get("The selector for the DOM element you have selected does not contain an ID for unique identification. This may cause issues in delivery."),
        multipleElements: Granite.I18n.get("The selector for the DOM element you have selected resolves to multiple elements; you may have duplicate IDs. This may cause issues in delivery."),
        clickOnAddIcon: Granite.I18n.get("Click on the Add icon to add new experiences."),
        WARN_CT_IN_REARRANGED_CONTAINER: Granite.I18n.get("Rearrangement in this container may break click tracking on child elements."),
        unableToLoginToProxy: Granite.I18n.get("Your session has expired. Please log in again to continue using Target."),
        NO_TARGET_JS_ERROR: Granite.I18n.get("These changes cannot be saved. The selected website does not contain Target libraries."),
        SWITCHED_TO_INTERACT: Granite.I18n.get("Browse to obtain the desired page state, then return to Compose to make a change."),
        WARN_JS_LINKS: ["<br />", Granite.I18n.get("Some links may not work while using the Enhanced Experience Composer."), "&nbsp;", '<a href="https://marketing.adobe.com/resources/help/en_US/target/target/r_troubleshoot_composer.html" target="_blank">', Granite.I18n.get("Learn more"), "</a>"].join(""),
        SWITCHED_TO_BUILD: Granite.I18n.get("Explore the page, then click an element to make a change."),
        SWITCHED_TO_CLICKTRACK: Granite.I18n.get("Explore the page, then select an element to add to click tracking."),
        URL_CHANGE_BUILD_MODE: Granite.I18n.get("This action will remove all changes and reset all experiences to the new URL."),
        URL_CHANGE_CLICKTRACK_MODE: Granite.I18n.get("This action will remove all tracked clicks added to the last URL.")
    },
    cdqErrorMessageMap: {
        selectorNotFound: Granite.I18n.get("The structure of your page has changed since this activity was last saved. These missing selectors might be reached using Browse mode. To make sure your content looks like you expect it to, we recommend deleting and re-creating each experience.")
    },
    modes: {
        clicktrack: "clicktrack",
        edit: "edit",
        experienceTargeting: "experienceTargeting",
        ETClicktrack: "ETClicktrack",
        INTERACT: "interact",
        recommendation: "recommendation",
        preview: "preview",
        ONE_TO_ONE: "1-1"
    },
    cdqPrefix: "data-cdq-",
    hideBoxStyles: {
        top: "-50px",
        left: "50%",
        width: 0,
        height: 0,
        lineHeight: 0
    },
    overlayElementTypeMap: {
        links: {
            selector: "a",
            label: "<link>"
        },
        images: {
            selector: "img",
            label: "<image>"
        },
        "regional-mboxes": {
            selector: "[data-mboxname]",
            label: "<mbox>"
        },
        scripts: {
            selector: "script",
            label: "<JavaScript>"
        },
        modifications: {
            selector: "",
            label: "<modified>"
        },
        none: {
            selector: "",
            label: ""
        }
    },
    registerVars: function() {
        this.currentExperienceNameIndex = 0;
        this.isSetup = false;
        this.adminParameter = "_AT_Admin=1&mboxDisable=1";
        this.updateControlDataForActionMap = {
            setContent: this.updateControlDataForSetContent,
            setAttribute: this.updateControlDataForSetAttribute,
            setStyle: this.updateControlDataForSetStyle,
            rearrange: this.updateControlDataForRearrange,
            resize: this.updateControlDataForResize,
            move: this.updateControlDataForMove,
            insertAfter: this.updateControlDataForRemoveFromDOM,
            insertBefore: this.updateControlDataForRemoveFromDOM
        };
        this.hideActionButtonsCssRule = ".addExperience, .icon-globe, .icon-undo, .icon-redo"
    },
    cacheSelectors: function() {
        this.$toolbar = this.view.$(".experienceEditorToolbar");
        this.$popover = this.view.$(".experienceNavPopover");
        this.$progressNotifier = this.view.$(".wait-container");
        this.$scriptUseNotifier = this.view.$(".script-use-notification");
        this.$interactToolbar = this.view.$(".ee-interact-toolbar")
    },
    addSubComponents: function() {
        this.addProgressBar();
        this.addNotificationDialog();
        this.addSelectorNotFoundNotificationDialog()
    },
    addSelectorNotFoundNotificationDialog: function() {
        var a = $(".-e2e-selectorNotFoundNotificationDialog").empty();
        if(a.size() === 0) {
            a = $('<div class="-e2e-selectorNotFoundNotificationDialog"></div>').appendTo(document.body)
        }
        this.selectorNotFoundNotificationDialog = new CUI.Modal({
            element: a,
            visible: false,
            type: "notice",
            heading: Granite.I18n.get("NOTICE")
        })
    },
    addExperienceEditorToolbar: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorToolbar({
            el: this.$toolbar,
            visible: true,
            component: this
        }), "toolbar").on("cancel", this.handleExperienceEditorClose).on("save", this.handleExperiencesSave).on("action:undo", this.undoAction).on("action:redo", this.redoAction).on("updateButtonColor", this.updateButtonColor).on("hideOverlayPopover", this.hideOverlayPopover).on("highlightObjects", this.highlightObjects)
    },
    addExperienceEditorNavPopover: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorNavPopover({
            el: this.$popover,
            visible: false
        }), "navPopover").on("ExperienceEditorNavPopover:experienceDeletion", this.deleteExperienceHandler).on("ExperienceEditorNavPopover:experienceDuplication", this.duplicateExperienceHandler).on("ExperienceEditorNavPopover:experienceRename", this.renameExperienceHandler).on("ExperienceEditorNavPopover:redirectToURL", this.redirectToURLHandler)
    },
    addNotificationDialog: function() {
        var a = $(".-e2e-unsavedChangesDialog").empty();
        if(a.size() === 0) {
            a = $('<div class="-e2e-unsavedChangesDialog"></div>').appendTo(document.body)
        }
        a.on("click", "button.close", this.handleUnsavedDialogClose);
        this.notificationDialog = new CUI.Modal({
            element: a,
            visible: false,
            type: "notice",
            heading: "Default content",
            content: "Default content",
            buttons: []
        })
    },
    addProgressBar: function() {
        this.addComponent(new ELM.ProgressBar({
            el: this.view.$(".progressbar-container"),
            visible: true
        }), "progressBar").on("complete", this.hideProgressNotifier.bind(this))
    },
    addCdqClientListeners: function() {
        this.cdq.on("host:loaded", this.handleHostLoad);
        this.cdq.on("thumbnailGeneratedComplete", this.handleThumbnailGenerate);
        this.cdq.on("host:loadTimeOut", this.handleHostLoadTimeout);
        this.cdq.on("host:handshake", this.handleHostHandShake)
    },
    handleExperienceEditorClose: function() {
        var a = this;
        if(this.mode === "clicktrack") {
            F.trigger(ELM.evtNamespace + ":clickTrack:saved");
            return
        }
        if(!this.hasChanged()) {
            F.trigger(ELM.evtNamespace + ":experienceEditor:experiencesSaved");
            this.cdq.showUnloadWarning(false)
        } else {
            a.notificationDialog.set({
                heading: Granite.I18n.get("Unsaved changes"),
                content: Granite.I18n.get("Save experiences changes for given activity before closing?") + "<p>" + Granite.I18n.get("If you don't save, your changes will be lost.") + "</p>",
                buttons: [{
                    label: Granite.I18n.get("Don't Save"),
                    className: "-e2e-button-dont",
                    click: function(b) {
                        F.trigger(ELM.evtNamespace + ":experienceEditor:experiencesSaved");
                        this.notificationDialog.hide();
                        this.cdq.showUnloadWarning(false);
                        this.removeKeyboardListeners()
                    }.bind(this)
                }, {
                    label: Granite.I18n.get("Cancel"),
                    className: "-e2e-button-cancel",
                    click: function(b) {
                        this.notificationDialog.hide()
                    }.bind(this)
                }, {
                    label: Granite.I18n.get("Save"),
                    className: "primary",
                    click: function(b) {
                        this.handleExperiencesSave();
                        this.notificationDialog.hide();
                        this.removeKeyboardListeners()
                    }.bind(this)
                }]
            }).show()
        }
    },
    handleExperiencesSave: function() {
        if(this.mode === "clicktrack" || this.mode == "ETClicktrack") {
            this.cdq.showUnloadWarning(false);
            this.saveClickedElements();
            return
        }
        if(this.verifyExperiences(this.experiences)) {
            this.processExperiencesBeforeSave();
            this.model.setActivityUrl(this.activityUrl);
            this.model.setExperiences(this.getExperiences());
            F.trigger(ELM.evtNamespace + ":experienceEditor:experiencesSaved");
            this.cdq.showUnloadWarning(false)
        }
        this.removeKeyboardListeners()
    },
    verifyExperiences: function(c) {
        var b = false,
            d = [],
            a = this;
        _.each(c, function(e) {
            if(!e.thumbnailSrc) {
                e.thumbnailSrc = a.defaultThumbnailSrc
            }
            if(!e["jcr:title"]) {
                b = true
            }
            d.push(e["jcr:title"])
        });
        if(b || (_.uniq(d).length !== c.length)) {
            this.showErrorNotification(this.messages.duplicateExperienceName);
            return false
        }
        if(!this.cdq.isConnectedToHost) {
            this.showErrorNotification(this.messages.NO_TARGET_JS_ERROR);
            return false
        }
        return true
    },
    showErrorNotification: function(a) {
        if(this.isVisible()) {
            ELM.Util.showErrorNotification({
                message: a,
                heading: Granite.I18n.get("ERROR")
            })
        }
    },
    showInfoNotification: function(a) {
        if(this.isVisible()) {
            ELM.Util.showInfoNotification({
                message: a
            })
        }
    },
    showNoticeNotification: function(a) {
        if(this.isVisible()) {
            ELM.Util.showNoticeNotification({
                message: a,
                heading: Granite.I18n.get("NOTICE")
            })
        }
    },
    handleKeyBoardEvents: function(b) {
        var c, a;
        b = b || window.event;
        c = b.keyCode;
        a = b.ctrlKey || b.metaKey;
        if(c == ELM.keycodes.ESCAPE) {
            this.resetSelection(b)
        }
        if(a) {
            c == ELM.keycodes.Z ? this.undoAction() : "";
            c == ELM.keycodes.Y ? this.redoAction() : ""
        }
    },
    addKeyboardListeners: function() {
        $(document).on("keyup", this.handleKeyBoardEvents)
    },
    removeKeyboardListeners: function() {
        $(document).off("keyup", this.handleKeyBoardEvents)
    },
    isMixContentLoaded: function() {
        return !this.isProxyEnabled() && window.location.protocol === "https:" && this.frame.src.indexOf("https") !== 0
    },
    newExperienceJson: function() {
        return new Object({
            actions: [],
            zones: [],
            thumbnailSrc: "",
            vtPointer: -1,
            mboxPointer: -1,
            actionsStack: [],
            stackPointer: -1
        })
    },
    setFrameElement: function(a) {
        this.frame = a
    },
    getFrameElement: function() {
        return this.frame
    },
    setFrameSrc: function(a) {
        this.frame.src = a
    },
    getFrameSrc: function() {
        return this.frame.src
    },
    setActivityUrl: function(a) {
        this.activityUrl = a
    },
    getActivityUrl: function() {
        return this.activityUrl
    },
    setOffsetTop: function(a) {
        this.topOffset = a
    },
    getOffsetTop: function() {
        return this.topOffset
    },
    setPath: function(a) {
        this.path = a
    },
    getPath: function() {
        return this.path
    },
    getPathLength: function() {
        return this.path.length
    },
    setCurrentExperienceIndex: function(a) {
        this.currentExperienceIndex = a
    },
    getCurrentExperienceIndex: function() {
        return this.currentExperienceIndex
    },
    setCurrentExperienceNameIndex: function(a) {
        this.currentExperienceNameIndex = a
    },
    getCurrentExperienceNameIndex: function() {
        return this.currentExperienceNameIndex
    },
    setControlString: function(a) {
        this.controlString = a
    },
    getControlString: function() {
        return this.controlString
    },
    setDefaultThumbnailSrc: function(a) {
        this.defaultThumbnailSrc = a
    },
    getDefaultThumbnailSrc: function() {
        return this.defaultThumbnailSrc
    },
    useDefaultThumbnailSrc: function() {
        this.setDefaultThumbnailSrc("/apps/mac/target/components/common/images/ExperienceDefault.svg")
    },
    setIdSelectorParameter: function(a) {
        this.idSelectorParameter = a
    },
    getIdSelectorParameter: function() {
        return this.idSelectorParameter
    },
    setLastExperienceIndex: function(a) {
        this.lastExperienceIndex = a
    },
    getLastExperienceIndex: function() {
        return this.lastExperienceIndex
    },
    setCdqParameter: function(b, a) {
        this.cdq[b] = a
    },
    getCdqParameter: function(a) {
        return this.cdq[a]
    },
    getOriginalUrl: function(e) {
        var a, c = e.url,
            b, d = ELM.proxyURL,
            f = e.baseURL || this.getActivityUrl();
        if(e.forImage) {
            d = ELM.proxyURLForImage
        }
        if(this.isProxyEnabled()) {
            if(c[0] == "/" && this.isLinkAbsolute(c.substr(1))) {
                c = c.substr(1)
            }
            c = this.resolveUrl(c, f);
            a = d.split(this.proxyURLPlaceholder);
            b = new URI(c);
            b.hash("");
            b.query("");
            c = b.toString();
            c = c.replace(a[0], "");
            c = c.replace(_.escape(a[0]), "");
            c = decodeURIComponent(c)
        } else {
            if(typeof e.forImage == "undefined") {
                c = this.removeAdminParams(c)
            }
        }
        return this.removeAdminParams(c)
    },
    setExperiences: function(a) {
        this.experiences = a
    },
    getExperiences: function() {
        return this.experiences
    },
    getExperiencesLength: function() {
        return this.experiences.length
    },
    getExperienceByIndex: function(a) {
        return this.getExperiences()[a]
    },
    setMode: function(a) {
        this.mode = a
    },
    getMode: function() {
        return this.mode
    },
    setClickedElements: function(a) {
        this.clickedElements = a ? a : []
    },
    getClickedElements: function() {
        return this.clickedElements
    },
    setMetricComponent: function(a) {
        this.metricComponent = a ? a : ""
    },
    getMetricComponent: function() {
        return this.metricComponent
    },
    setup: function(a) {
        if(_.isObject(a) && a.lockdown) {
            allowedHost = a.url.substring(0, a.url.indexOf("/", a.url.indexOf(":") + 3))
        }
        this.startHostLoadingProgress();
        this.isHostLoaded = false;
        this.cdq.isConnectedToHost = false;
        this.mixContentCheck();
        this.setBuildModeUrl(a.url || ELM.defaultSimulatorUrl);
        this.isSetup = true
    },
    handleUnsavedDialogClose: function() {
        var a;
        if(this.isInteractMode()) {
            a = this.view.$(".build-mode-toggle input[data-mode=interact]");
            a.prop("checked", true);
            a.focus()
        }
    },
    mixContentCheck: function() {
        if(this.isProxyEnabled() && this.isMixContentLoaded() && !ELM.BrowserDetector.supportsMixContent()) {
            var a = this;
            setTimeout(function() {
                if(!a.isHostLoaded) {
                    a.view.$(".unableToLoadPageNotifier").removeClass("hidden");
                    a.view.$(".browserSpecificHelpLink").attr("href", ELM.BrowserDetector.mixContentHelpLink)
                }
            }, 10000)
        }
    },
    authenticateProxyIfNeeded: function(b) {
        var a = this;
        if(!this.isProxyEnabled()) {
            b()
        } else {
            if(this.tokenStoreID) {
                this.validateTsid(function(c) {
                    if(c) {
                        a.getTsid(function(d) {
                            a.tokenStoreID = d
                        })
                    }
                    b()
                })
            } else {
                this.getTsid(function(c) {
                    a.tokenStoreID = c;
                    b()
                })
            }
        }
    },
    validateTsid: function(b) {
        var a = this;
        $.ajax({
            url: ELM.proxyURLForTsid,
            data: {
                tsid: this.tokenStoreID
            },
            dataType: "jsonp",
            crossDomain: true,
            success: function(c) {
                if(c.error) {
                    b(a.messages.unableToLoginToProxy)
                } else {
                    b()
                }
            }
        })
    },
    getTsid: function(b) {
        var a = this;
        $.ajax({
            url: ELM.proxyURLForToken,
            data: {
                token: ELM.bearerToken
            },
            dataType: "jsonp",
            crossDomain: true,
            success: function(c) {
                if(c.error) {
                    a.parent.showErrorDialog(a.messages.unableToLoginToProxy)
                } else {
                    b(c.tsid)
                }
            }
        })
    },
    getProxiedUrl: function(d) {
        var c, b = ELM.proxyURL,
            a;
        if(d.forImage) {
            b = ELM.proxyURLForImage
        }
        d.url = this.resolveUrl(d.url, this.getActivityUrl());
        c = d.url;
        a = new URI(d.url);
        if(this.isProxyEnabled()) {
            this.proxyURLPlaceholder = b.substring(b.indexOf("<"), b.indexOf(">") + 1);
            c = b.replace(this.proxyURLPlaceholder, encodeURIComponent(d.url));
            a.query() && (c = this.addParamsToURL(c, a.query()));
            a.hash() && (c += a.hash())
        } else {
            if(typeof d.forImage == "undefined") {
                c = this.getAdminURL(d.url)
            }
        }
        return c
    },
    removeAdminParams: function(a) {
        var b = new RegExp("[?&]" + this.getAdminParams());
        return a.replace(b, "")
    },
    getBlockedMboxes: function() {
        return _.filter(ELM.mboxes, function(a) {
            return a.status === "BLOCKED"
        })
    },
    handleHostLoadTimeout: function() {
        this.stopHostLoadingProgress(true);
        this.hideProgressNotifier();
        if(!this.isProxyEnabled()) {
            this.showErrorNotification(this.messages.timeoutError)
        }
    },
    startHostLoadingProgress: function() {
        var a = 20000;
        this.$progressNotifier.removeClass("hidden");
        this.progressBar.start(a);
        if(!ELM.BrowserDetector.isChrome() && this.getFrameSrc()) {
            clearTimeout(this.cdq.hostLoadTimeoutId);
            this.cdq.hostLoadTimeoutId = setTimeout(this.cdq.unableToConnectToHost.bind(this.cdq), a)
        }
    },
    stopHostLoadingProgress: function(a) {
        this.progressBar.stop(a)
    },
    hideProgressNotifier: function() {
        this.$progressNotifier.addClass("hidden")
    },
    handleThumbnailGenerate: function(f) {
        var g = f.experienceNum,
            b = this.getExperienceByIndex(g)["thumbnailSrc"],
            h = moment().unix() + ".png",
            a = f.thumbnail,
            c = false,
            d, e = this;
        if(g === 1 && _.isEmpty(this.getExperienceByIndex(0)["thumbnailSrc"])) {
            c = true
        }
        d = this.getExperienceByIndex(g);
        this.saveThumbnail(a, h, function(i) {
            d.thumbnailSrc = i;
            if(c) {
                d = e.getExperienceByIndex(0);
                e.saveThumbnail(a, moment().unix() + ".png", function(j) {
                    d.thumbnailSrc = j
                })
            }
        })
    },
    markConfigButtonAsSelected: function(a) {
        var b = $(a.currentTarget);
        if(!b.hasClass("selected")) {
            b.addClass("selected")
        } else {
            b.removeClass("selected")
        }
    },
    markConfigButtonAsUnselected: function() {
        this.view.$("nav.experiences .icon-gear").removeClass("selected")
    },
    navigationHandler: function(a) {
        a.preventDefault();
        this.hideOverlayPopover();
        this.handleAddressBarNavigation(true)
    },
    deleteExperienceHandler: function(a) {
        this.deleteExperience(this.getCurrentExperienceIndex());
        this.navPopover.hideExperienceNavPopover()
    },
    duplicateExperienceHandler: function(a) {
        this.duplicateExperience(this.getCurrentExperienceIndex());
        this.navPopover.hideExperienceNavPopover()
    },
    renameExperienceHandler: function(b) {
        var a = this.view.$el.find("nav.experiences a[data-experience=" + this.getCurrentExperienceIndex() + "]");
        a.addClass("editing").find(".experienceName").hide().end().find(".experienceNameInput").show().focus();
        this.navPopover.hideExperienceNavPopover()
    },
    redirectToURLHandler: function(a) {
        var b = this.getCurExperience()["redirect"] || this.model.getDefaultRedirectOffer();
        this.components.redirectToUrlDialog.trigger("show:redirect-url-dialog", {
            redirectOffer: ELM.Util.clone(b),
            activityUrl: this.getActivityUrl()
        });
        this.navPopover.hideExperienceNavPopover();
        this.resetBoxes()
    },
    saveRedirectOffer: function(a) {
        if(this.isExperienceEmpty(this.getCurExperience(), false)) {
            this.updateRedirectOffer(a);
            return
        }
        this.notificationDialog.set({
            heading: Granite.I18n.get("Unsaved Changes"),
            content: '<p class="width-22">' + Granite.I18n.get("All modifications made to this experience will be lost if you redirect to a different URL.") + "</p><p>" + Granite.I18n.get("Continue anyway?") + "</p>",
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                className: "-e2e-button-cancel",
                click: function(b) {
                    this.notificationDialog.hide()
                }.bind(this)
            }, {
                label: Granite.I18n.get("Continue"),
                className: "primary",
                click: function(b) {
                    this.notificationDialog.hide();
                    this.updateRedirectOffer(a)
                }.bind(this)
            }]
        }).show()
    },
    updateRedirectOffer: function(a) {
        var b = this.getCurExperience();
        this.undoAllActionAppliedToExperience(b, function() {
            _.extend(b, this.newExperienceJson());
            b.redirect = a;
            this.toolbar.updateUndoRedoIcons(b);
            this.toolbar.disableAction("overlay");
            this.generateThumbnail(this.currentExperienceIndex);
            this.showRedirectOverlay(Granite.I18n.get("<strong>SUCCESS</strong>&nbsp;Your page has been redirected to " + a.url));
            this.hideOverlayPopover()
        }.bind(this))
    },
    addExperienceHandler: function() {
        this.addExperience(true)
    },
    showExperienceHandler: function(b) {
        var a = b.target,
            c = a.tagName,
            d = a.className;
        b.preventDefault();
        if(c === "A" || (c === "DIV" && d === "experienceName")) {
            this.markConfigButtonAsUnselected();
            this.switchExperience($(b.currentTarget).data("experience"));
            this.renderExperienceTabs()
        }
    },
    experienceNameKeyupHandler: function(a) {
        a.stopPropagation();
        a.preventDefault();
        if(a.keyCode === ELM.keycodes.ENTER || a.which === ELM.keycodes.ENTER) {
            this.updateExperienceName($(a.currentTarget))
        }
    },
    experienceNameFocusoutHandler: function(a) {
        a.stopPropagation();
        a.preventDefault();
        this.updateExperienceName($(a.currentTarget))
    },
    updateExperienceName: function(c) {
        var b = c.val(),
            a = this.getCurExperience(),
            f = {},
            d = true,
            e = a["jcr:title"];
        if(a["jcr:title"] === b) {
            d = false
        }
        f = _.find(this.getExperiences(), function(g) {
            return g["jcr:title"] === b
        });
        if(d && (!b || (_.isObject(f) && f !== {}))) {
            this.showErrorNotification(this.messages.duplicateExperienceName)
        } else {
            a["jcr:title"] = b;
            if(!this.getCurrentExperienceIndex()) {
                b += this.getControlString()
            }
            e = b
        }
        c.hide().siblings(".experienceName").text(e).show().end().parent().removeClass("editing")
    },
    resetCloseButton: function() {
        this.view.$el.find("nav.experiences a button").addClass("hidden").end().find("nav.experiences a[data-experience=" + this.getCurrentExperienceIndex() + "] button").removeClass("hidden")
    },
    getAdminURL: function(a) {
        return this.addParamsToURL(a, this.getAdminParams())
    },
    addParamsToURL: function(b, d) {
        var c = new URI(b),
            a = c.hash();
        c.hash("");
        b = c.toString();
        if(!~b.indexOf(d)) {
            if(~b.indexOf("?")) {
                b += "&" + d
            } else {
                b += "?" + d
            }
        }
        a && (b += a);
        return b
    },
    saveThumbnail: function(f, i, b) {
        var g = (i == "" ? (moment().unix().toString() + ".png") : i),
            c = new FormData(),
            e, a;
        if(f === "default") {
            if(this.getDefaultThumbnailSrc() === undefined) {
                this.useDefaultThumbnailSrc()
            }
            b(this.getDefaultThumbnailSrc());
            return
        }
        e = this.dataURItoBlob(f, "image/png");
        c.append(g, e);
        var d = moment().unix().toString(),
            h = d.substring(d.length - 3, d.length);
        a = "/target/thumbnails/"+h;
        //a="/target/"+ELM.client+"/target/tmp/thumbnails/"+h;
        $.ajax({
            url: a,
            type: "POST",
            data: c,
            processData: false,
            contentType: false
        }).done(function() {
            b(a + "/" + g)
        })
    },
    generateThumbnail: function(b) {
        var c = this.getMode(),
            a = [this.modes.browse, this.modes.clicktrack, this.modes.ETClicktrack].indexOf(c) == -1;
        if(ELM.isExpThumbsEnabled && a) {
            this.cdq.generateThumbnail(b)
        }
    },
    dataURItoBlob: function(a, e) {
        var d = "",
            g, b, f;
        if(a) {
            g = atob(a.split(",")[1]);
            b = g.length;
            d = new ArrayBuffer(g.length);
            f = new Uint8Array(d);
            for(var c = 0; c < b; c++) {
                f[c] = g.charCodeAt(c)
            }
        }
        return new Blob([d], {
            type: e
        })
    },
    updateEqualSplitValues: function(d) {
        var a = d.length,
            b = Math.floor(100 / a);
        _.each(d, function(e) {
            e.trafficSplit = b
        });
        if(a) {
            var c = (100 - d[0].trafficSplit * a);
            d[0].trafficSplit = d[0].trafficSplit + c
        }
    },
    setSpecificExperience: function(d, c) {
        var b, a = d.length;
        if(d) {
            for(b = 0; b < a; b++) {
                if(d[b].valueOf()["jcr:title"] == c) {
                    this.setCurrentExperienceIndex(b);
                    break
                }
            }
        }
    },
    updateExperiencesData: function(a) {
        if(_.isArray(a)) {
            _.each(a, function(c, b) {
                c.actions = c.actions || [];
                c.zones = c.zones || [];
                c.vtPointer = c.actions.length - 1;
                c.mboxPointer = c.zones.length - 1;
                c.actionsStack = [];
                c.stackPointer = -1;
                c["jcr:title"] = c["jcr:title"] || this.generateExperienceName(b + 1)
            }, this)
        }
    },
    addControlExperience: function() {
        this.addExperience(false, false)
    },
    hide: function() {
        this.inherited(arguments);
        return this
    },
    showControlUrlChangeNotification: function(b, d, a) {
        var c = this.isClickTrackMode() || this.getPreviousMode() === this.modes.clicktrack ? this.messages.URL_CHANGE_CLICKTRACK_MODE : this.messages.URL_CHANGE_BUILD_MODE;
        this.notificationDialog.set({
            heading: Granite.I18n.get("Confirm change"),
            content: Granite.I18n.get("Are you sure you want to change the URL for the given activity ?") + "<p>" + c + "</p>",
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                className: "-e2e-button-cancel",
                click: function(e) {
                    if(typeof a !== "undefined") {
                        a.call(null)
                    }
                    if(d) {
                        this.clearPreviousMode();
                        this.reloadHost()
                    }
                    this.notificationDialog.hide()
                }.bind(this)
            }, {
                label: Granite.I18n.get("Change"),
                className: "primary",
                click: function(e) {
                    if(typeof a !== "undefined") {
                        a.call(null)
                    }
                    this.changeControlUrl(b);
                    this.notificationDialog.hide()
                }.bind(this)
            }]
        }).show()
    },
    changeControlUrl: function(a) {
        this.clearExperiences();
        this.setBuildModeUrl(a);
        this.setActivityUrl(a);
        this.addControlExperience()
    },
    loadUrl: function(b, a) {
        this.startHostLoadingProgress();
        this.isHostLoaded = false;
        b ? (this.cdq.navigate(a)) : (this.setFrameSrc(a))
    },
    clearExperiences: function() {
        this.setExperiences([]);
        this.setCurrentExperienceNameIndex(0)
    },
    handleAddressBarNavigation: function(c) {
        var a = $("#activityUrl"),
            b = a.val().trim(),
            d = this.view.$el.find("#activityUrl:invalid");
        if(!c && this.getActivityUrl()) {
            b = this.getActivityUrl();
            d = []
        }
        if(b && !d.length) {
            if(_.isEmpty(this.getActivityUrl())) {
                this.setActivityUrl(b);
                this.loadUrlForAddressBarNavigation();
                return
            }
            if(this.getActivityUrl() !== b) {
                this.showControlUrlChangeNotification(b);
                return
            }
            this.cdq.isConnectedToHost ? this.cdq.showUnloadWarning(false, this.loadUrlForAddressBarNavigation.bind(this)) : this.loadUrlForAddressBarNavigation()
        } else {
            if(c) {
                this.showErrorNotification(this.messages.invalidUrl)
            } else {
                this.setCurrentExperienceIndex(-1);
                this.showErrorNotification(this.messages.addressBarNavigation);
                this.stopHostLoadingProgress()
            }
        }
    },
    loadUrlForAddressBarNavigation: function(a) {
        this.startHostLoadingProgress();
        this.setFrameSrc(this.getProxiedUrl({
            url: this.getActivityUrl()
        }));
        if(!this.getExperiencesLength()) {
            this.view.$el.find("#noSimulatorUrlNotification").addClass("hidden");
            this.addControlExperience()
        }
    },
    reloadHost: function() {
        var a = this.getProxiedUrl({
            url: this.getActivityUrl()
        });
        if(this.getPreviousMode() === this.modes.INTERACT) {
            return
        }
        if(this.cdq.isConnectedToHost) {
            this.cdq.showUnloadWarning(false, function() {
                this.loadUrl(true, this.getAdminURL(a))
            }.bind(this))
        } else {
            this.loadUrl(false, this.getAdminURL(a))
        }
    },
    setOfferContent: function(b, a, h, g) {
        var c = '[data-mboxName="' + a + '"]',
            e = b.data,
            f = b["ref:offer"],
            d = this;
        if(typeof e === "undefined") {
            d.offerMetaDataRequest({
                url: f
            }).done(function(i) {
                if(i["dc:format"] === "text/html") {
                    d.offerRequest({
                        url: f
                    }).done(function(j) {
                        e = (j || "");
                        d.sendCdqApplyActionsRequest({
                            actions: [{
                                selector: c,
                                action: "setContent",
                                content: e
                            }],
                            callback: h,
                            poll: g
                        })
                    })
                } else {
                    e = '<img src="' + window.location.protocol + "//" + window.location.host + f + "?ch_ck=" + moment().unix() + '" /></img>';
                    d.sendCdqApplyActionsRequest({
                        actions: [{
                            selector: c,
                            action: "setContent",
                            content: e,
                            asset: f
                        }],
                        callback: h,
                        poll: g
                    })
                }
            })
        } else {
            d.sendCdqApplyActionsRequest({
                actions: [{
                    selector: c,
                    action: "setContent",
                    content: e
                }],
                callback: h,
                poll: g
            })
        }
    },
    renderExperienceTabs: function() {
        var f = this.view.$el.find(".tabs nav.experiences"),
            d = false,
            a = this.getExperiencesLength();
        f.find("a").remove();
        for(var c = a - 1; c >= 0; c--) {
            d = (this.getCurrentExperienceIndex() === c);
            var e = this.getExperienceByIndex(c)["jcr:title"],
                b = e;
            if(!c && b.indexOf(this.getControlString()) === -1) {
                b += this.getControlString()
            }
            f.prepend(ELM.Activities.Templates.ExperienceEditor.ExperiencesTab({
                active: d,
                name: b,
                index: c,
                title: e,
                hideGearButton: this.hideGearButton
            }))
        }
        this.resetCloseButton()
    },
    addExperience: function(d, b) {
        var c = this.newExperienceJson(),
            a;
        c["jcr:title"] = this.getNewExperienceName();
        this.experiences.push(c);
        this.updateEqualSplitValues(this.getExperiences());
        a = this.getExperiencesLength() - 1;
        if(d) {
            this.setCurrentExperienceIndex(a);
            this.renderExperienceTabs();
            this.switchExperience(a, b)
        }
        if(this.getExperiencesLength() === 1 && this.isSetup) {
            this.addExperience(true, true)
        }
        return a
    },
    getNewExperienceName: function() {
        this.setCurrentExperienceNameIndex(this.getCurrentExperienceNameIndex() + 1);
        return this.generateExperienceName(this.getCurrentExperienceNameIndex())
    },
    generateExperienceName: function(b) {
        var c = b - 26;
        if(b <= 26) {
            c = String.fromCharCode(64 + b)
        }
        var a = Granite.I18n.get("Experience {0}", c);
        if(!this.hasExperienceWithName(a)) {
            return this.generateExperienceName(b + 1)
        }
        return a
    },
    hasExperienceWithName: function(b) {
        var a = _.find(this.getExperiences(), function(c) {
            return c["jcr:title"] === b
        });
        return !a
    },
    deleteExperience: function(a) {
        var b = this.getExperiences()[a];
        if(b) {
            this.undoAllActionAppliedToExperience(b);
            this.experiences.splice(a, 1);
            this.updateEqualSplitValues(this.getExperiences());
            if(this.getExperiencesLength() >= 1) {
                this.lastExperienceIndex = -1;
                this.switchExperience(this.getExperiencesLength() - 1)
            } else {
                this.hideFrame();
                this.clearExperiences();
                this.showErrorNotification(this.messages.clickOnAddIcon)
            }
        }
        this.renderExperienceTabs()
    },
    duplicateExperience: function(a) {
        var c = this.getExperiences(),
            b = ELM.Util.clone(c[a]);
        b["jcr:title"] = this.getNewExperienceName();
        delete b.targetName;
        delete b.winner;
        delete b.id;
        c.push(b);
        this.updateEqualSplitValues(c);
        this.setCurrentExperienceIndex(c.length - 1);
        this.renderExperienceTabs();
        this.switchExperience(c.length - 1)
    },
    undoAllActionAppliedToExperience: function(e, g) {
        var f, d, c = g || function() {},
            a, b;
        if(!e) {
            return
        }
        if(this.mode == this.modes.clicktrack && this.isHostLoaded) {
            this.unmarkClickedElementsAsSelected()
        }
        a = jQuery.extend(true, [], e.actions);
        a.length = e.vtPointer + 1;
        b = jQuery.extend(true, [], e.zones);
        b.length = e.mboxPointer + 1;
        f = a.concat(b).reverse();
        d = _.pluck(f, "control");
        this.cdq.applyActions(d, c)
    },
    switchExperience: function(a, b) {
        if(a === -1) {
            return
        }
        var c;
        this.showFrame();
        this.setCurrentExperienceIndex(a);
        this.resetHostSite(b);
        this.resetBoxes();
        c = this.getCurExperience();
        c.isExperienceDefined = true;
        if(!b) {
            this.applyExperience({
                experience: c,
                experienceIndex: this.getCurrentExperienceIndex(),
                poll: true
            })
        }
        this.resetCloseButton();
        this.toolbar.updateUndoRedoIcons(this.getExperienceByIndex(a));
        this.setLastExperienceIndex(a);
        this.checkForScriptTagInExperience(c);
        if(this.isRedirectExperience(c)) {
            this.showRedirectOverlay(Granite.I18n.get("<strong></strong>Your page has been redirected to " + c.redirect.url));
            this.toolbar.disableAction("overlay");
            this.hideOverlayPopover()
        } else {
            this.hideRedirectOverlay();
            this.toolbar.enableAction("overlay")
        }
        this.trigger("experience:shown")
    },
    resetHostSite: function(a) {
        if(a) {
            this.reloadHost()
        } else {
            if(this.lastExperienceIndex >= 0) {
                this.undoAllActionAppliedToExperience(this.getExperienceByIndex(this.getLastExperienceIndex()))
            }
        }
        if(this.getPreviousMode() === this.modes.INTERACT) {
            this.clearPreviousMode()
        }
    },
    getCurExperience: function() {
        return this.getExperienceByIndex(this.getCurrentExperienceIndex())
    },
    backupInitialState: function() {
        this.initialState = this.initialState || {
            experiences: ELM.Util.clone(this.experiences)
        }
    },
    clearInitialState: function() {
        this.initialState = null
    },
    hasChanged: function() {
        var b = ELM.Util.clone(this.getExperiences()),
            a = this;
        if(this.initialState) {
            _.each(b, function(d, c) {
                b[c] = _.omit(d, "thumbnailSrc")
            });
            _.each(this.initialState.experiences, function(d, c) {
                a.initialState.experiences[c] = _.omit(d, "thumbnailSrc")
            });
            return !_.isEqual(this.initialState.experiences, b)
        }
        return true
    },
    handleHostLoad: function(e) {
        var c, d = 0,
            a, b = '[data-mboxname="' + ELM.customGlobalMbox + '"]';
        a = e.location = this.getOriginalUrl({
            url: e.location
        });
        if(this.isInteractMode()) {
            this.initializeAfterLoadInInteractMode(a);
            return
        }
        this.setActivityUrl(a);
        this.cdq.showUnloadWarning(true, function() {
            c = this.getCurExperience();
            this.addControlObjectInExperienceActionsAndZones(this.experiences, d, function() {
                this.isHostLoaded = true;
                this.switchExperience(this.getCurrentExperienceIndex());
                this.actionMenuPopover && this.actionMenuPopover.hide();
                this.cdq.setStyle(b, "display", "none");
                this.updateEditorMode();
                this.stopHostLoadingProgress();
                this.view.$(".unableToLoadPageNotifier").addClass("hidden");
                this.backupInitialState()
            })
        }.bind(this))
    },
    addControlObjectInExperienceActionsAndZones: function(a, h, k) {
        var e, i = false,
            l = false,
            c, b, d = this,
            g = 0,
            j = 0,
            f = function() {
                if(d.isExperienceUpdatedWithControlData(i, l)) {
                    d.undoAllActionAppliedToExperience(e, function() {
                        d.addControlObjectInExperienceActionsAndZones(a, h + 1, k)
                    })
                }
            };
        if(h >= a.length) {
            k.call(d);
            return
        }
        e = a[h];
        c = e.actions;
        b = e.zones;
        d.addControlObjectInZones(b, g, function() {
            i = true;
            f.call(d)
        });
        d.addControlObjectInActions(c, j, function() {
            l = true;
            f.call(d)
        })
    },
    isExperienceUpdatedWithControlData: function(a, b) {
        return a && b
    },
    addControlObjectInZones: function(c, b, e) {
        var d = this,
            a;
        if(b >= c.length) {
            e.call(d);
            return
        }
        a = c[b];
        if(!a.control) {
            d.addControlObjectInZone(a, function(f) {
                a.control = f;
                d.applyExperienceZone(a, function() {
                    d.addControlObjectInZones(c, b + 1, e)
                })
            })
        } else {
            d.addControlObjectInZones(c, b + 1, e)
        }
    },
    addControlObjectInActions: function(d, a, e) {
        var b = this,
            c;
        if(a >= d.length) {
            e.call(b);
            return
        }
        c = d[a];
        if(!c.control) {
            b.addControlObjectInAction(c, function(f) {
                c.control = f;
                b.applyExperienceAction(c, function() {
                    b.addControlObjectInActions(d, a + 1, e)
                })
            })
        } else {
            b.addControlObjectInActions(d, a + 1, e)
        }
    },
    applyExperienceZone: function(a, b) {
        this.applyExperience({
            experience: {
                actions: [],
                zones: [a],
                mboxPointer: 0,
                vtPointer: -1
            },
            callback: b
        })
    },
    applyExperienceAction: function(a, b) {
        this.applyExperience({
            experience: {
                actions: [a],
                zones: [],
                vtPointer: 0,
                mboxPointer: -1
            },
            callback: b
        })
    },
    addControlObjectInZone: function(b, e) {
        var c = this,
            a = '[data-mboxname="' + b["jcr:title"] + '"]',
            d = {
                action: ELM.ExperienceEditorActions.SET_CONTENT,
                selector: a,
                content: ""
            };
        this.cdq.sendGetContentRequest(a, function(f) {
            d.content = f.content;
            e.call(c, d)
        }, function(f) {
            c.showErrorNotification(c.cdqErrorMessageMap[f.error]);
            e.call(c, d)
        })
    },
    addControlObjectInAction: function(b, d) {
        var a = b.action,
            c = {
                action: a,
                selector: b.selector
            };
        this.updateControlDataForActionMap[a].call(this, c, b, d)
    },
    updateControlDataForSetStyle: function(c, b, d) {
        var a = this;
        c.property = b.property;
        c.value = b.value;
        this.cdq.sendGetStyleRequest(b.selector, function(e) {
            c.property = b.property;
            c.value = e.style[b.property];
            d.call(a, c)
        }, function(e) {
            a.showErrorNotification(a.cdqErrorMessageMap[e.error]);
            d.call(a, c)
        })
    },
    updateControlDataForSetAttribute: function(c, b, d) {
        var a = this;
        c.attribute = b.attribute;
        c.value = b.value;
        this.cdq.sendGetAttributeRequest(b.selector, b.attribute, function(e) {
            c.attribute = b.attribute;
            c.value = e.value;
            if(e.selector) {
                c.selector = e.selector
            }
            d.call(a, c)
        }, function(e) {
            a.showErrorNotification(a.cdqErrorMessageMap[e.error]);
            d.call(a, c)
        })
    },
    updateControlDataForSetContent: function(c, b, d) {
        var a = this;
        c.content = b.content;
        this.cdq.sendGetContentRequest(b.selector, function(e) {
            c.content = e.content;
            d.call(a, c)
        }, function(e) {
            a.showErrorNotification(a.cdqErrorMessageMap[e.error]);
            d.call(a, c)
        })
    },
    updateControlDataForResize: function(c, b, d) {
        var a = this;
        c.finalWidth = b.finalWidth;
        c.finalHeight = b.finalHeight;
        this.cdq.sendGetStyleRequest(b.selector, function(e) {
            c.finalWidth = e.style.width;
            c.finalHeight = e.style.height;
            d.call(a, c)
        }, function(e) {
            a.showErrorNotification(a.cdqErrorMessageMap[e.error]);
            d.call(a, c)
        })
    },
    updateControlDataForMove: function(c, b, d) {
        var a = this;
        c.finalLeftPosition = b.finalLeftPosition;
        c.finalTopPosition = b.finalTopPosition;
        this.cdq.sendGetStyleRequest(b.selector, function(e) {
            c.finalLeftPosition = isNaN(parseInt(e.style.left)) ? 0 : parseInt(e.style.left);
            c.finalTopPosition = isNaN(parseInt(e.style.top)) ? 0 : parseInt(e.style.top);
            d.call(a, c)
        }, function(e) {
            a.showErrorNotification(a.cdqErrorMessageMap[e.error]);
            d.call(a, c)
        })
    },
    updateControlDataForRemoveFromDOM: function(d, c, e) {
        var a = this,
            b = "selectorNotFound";
        this.cdq.getElementsCountForSelector(c.selector, function(f) {
            if(!f.count) {
                a.showNoticeNotification(a.cdqErrorMessageMap[b])
            }
            d.action = ELM.ExperienceEditorActions.REMOVE_FROM_DOM;
            d.selector = "#" + a.extractIdFromElement(c.content);
            e.call(a, d)
        })
    },
    updateControlDataForRearrange: function(d, c, e) {
        var a = this,
            b = "selectorNotFound";
        this.cdq.getElementsCountForSelector(c.selector, function(f) {
            if(!f.count) {
                a.showErrorNotification(a.cdqErrorMessageMap[b])
            }
            d.to = c.from;
            d.from = c.to;
            e.call(a, d)
        })
    },
    extractIdFromElement: function(a) {
        var b = document.createElement("div");
        b.innerHTML = a;
        return b.firstElementChild.id
    },
    applyExperience: function(j) {
        if(!(j && j.experience)) {
            return false
        }
        var a = 0,
            d = this,
            f, b, c, e = j.experience,
            g = j.poll,
            i = j.callback,
            h = ELM.Util.clone(e.actions);
        h.length = e.vtPointer + 1;
        _.each(h, function(l, k) {
            if(k <= e.vtPointer) {
                if(l["ref:offer"] && l.action === "setContent") {
                    a++;
                    d.offerRequest({
                        url: l["ref:offer"]
                    }).done(function(m) {
                        a--;
                        l.content = m;
                        if(!a) {
                            d.sendCdqApplyActionsRequest({
                                actions: h,
                                callback: i,
                                poll: g
                            })
                        }
                    })
                }
            }
        });
        if(!a && h.length > 0) {
            d.sendCdqApplyActionsRequest({
                actions: h,
                callback: i,
                poll: g
            })
        }
        for(f = 0; f <= e.mboxPointer; f++) {
            c = e.zones[f];
            if(_.isObject(c)) {
                d.setOfferContent(c, c["jcr:title"], i, g)
            }
        }
        if(this.isHostLoaded) {
            if(!e.thumbnailSrc) {
                this.generateThumbnail(this.currentExperienceIndex)
            }
            if(this.mode === this.modes.clicktrack || this.getPreviousMode() === this.modes.clicktrack) {
                this.markClickedElementsAsSelected({
                    poll: g
                })
            }
        }
    },
    handleScroll: function(a) {
        a.pageInfo = {
            topOffset: this.getOffsetTop(),
            leftOffset: this.leftOffset,
            pageOriginalOffsetX: this.pageOriginalOffsetX,
            pageOriginalOffsetY: this.pageOriginalOffsetY
        };
        this.actionMenu.adjustPopoverOnScroll(a)
    },
    handleHostClick: function(b) {
        var d = b.pageState,
            c = b.el.path,
            a = b.el.className;
        if(!b.evt.isATEvent) {
            return false
        }
        if($("#object-highlighter-popover-ab-xt-apct").is(":visible")) {
            this.hideOverlayPopover()
        }
        if(a && a.indexOf("AT_click_disabled") > -1) {
            return false
        }
        if(d && (d.IS_REARRANGE_MODE_ENABLED || d.IS_RESIZE_MODE_ENABLED || d.IS_MOVE_MODE_ENABLED)) {
            return false
        }
        this.checkForMultipleElements("#" + b.el.id);
        this.view.$el.focus();
        this.actionMenuAdjustPosition(b);
        this.pageOriginalOffsetY = b.evt.pageYOffset;
        this.pageOriginalOffsetX = b.evt.pageXOffset;
        if(typeof c === "string") {
            b.el.path = JSON.parse(c)
        }
        this.lastData = b;
        this.setPath(b.el.path);
        this.lastChild = this.getPathLength() - 1
    },
    handleContentSelected: function(c) {
        var b = c.model,
            e = this.lastData,
            f = b.getPath(),
            d = this,
            a;
        if(c.requestAction == ELM.ExperienceEditorActions.INSERT_ELEMENT) {
            this.insertElementModel.updateElementType("img");
            a = window.location.protocol + "//" + window.location.host + f;
            this.insertNewElement({
                src: a,
                asset: f
            });
            F.trigger(ELM.evtNamespace + ":experienceEditor:ContentSetSuccessfully");
            return
        }
        if(b.isHTMLOffer()) {
            this.offerRequest({
                url: f
            }).done(function(g) {
                d.actionMenu.editHTML(e, false, f, d.updateProxyWrapperOnElements({
                    content: g,
                    action: "add"
                }));
                d.doSaveHTML();
                F.trigger(ELM.evtNamespace + ":experienceEditor:ContentSetSuccessfully")
            })
        } else {
            a = window.location.protocol + "//" + window.location.host + f;
            this.actionMenu.doEditAttr(e, "src", Granite.I18n.get("Edit Image"), Granite.I18n.get("Enter a new image URL"), false, true, a);
            this.doSetAttr();
            F.trigger(ELM.evtNamespace + ":experienceEditor:ContentSetSuccessfully")
        }
    },
    offerRequest: function(a) {
        return ELM.Util.sendGETRequest(a)
    },
    offerMetaDataRequest: function(a) {
        return $.ajax({
            url: a.url + "/jcr:content/metadata.json",
            async: (typeof a.async == "undefined") ? true : a.async,
            type: "GET"
        })
    },
    dialogSave: function() {
        if(this.dialogAction === "editHTML") {
            this.doSaveHTML()
        } else {
            if(!this.dialogAction.indexOf("editAttr")) {
                this.doSetAttr()
            } else {
                if(this.dialogAction === ELM.ExperienceEditorActions.INSERT_ELEMENT) {
                    this.insertNewElement()
                }
            }
        }
    },
    insertNewElement: function(i) {
        var i = i || {},
            d = this.lastData,
            f = this,
            g = this.getCurExperience(),
            a = {
                insertAfter: this.cdq.sendInsertAfterRequest,
                insertBefore: this.cdq.sendInsertBeforeRequest
            },
            b = this.insertElementModel.getAction(),
            c = this.insertElementModel.getSelectorId(),
            h = this.insertElementModel.getContentForInsertElementAction($.extend(i, {
                type: this.dialog.insertElementEditContentType
            })),
            e = {
                action: b,
                content: h,
                control: {
                    action: ELM.ExperienceEditorActions.REMOVE_FROM_DOM,
                    selector: "#" + c
                }
            };
        if(i.asset) {
            e.asset = i.asset
        }
        this.getSelector("#" + d.el.id, function(j) {
            e.selector = j.selector;
            f.processEditAction(g, e, d, function() {
                a[b].call(f.cdq, "#" + d.el.id, h, function() {
                    f.generateThumbnail(f.currentExperienceIndex);
                    f.destroySetupForInsertElementAction(d.el.id)
                })
            }, null)
        })
    },
    getSelector: function(a, b) {
        this.cdq.getSelector(a, b)
    },
    updateProxyWrapperOnElements: function(c) {
        var b = ["A", "IMG"],
            a;
        for(a = b.length - 1; a >= 0; a -= 1) {
            c.type = b[a];
            c.content = this.updateProxyWrapperOnSpecifiedElements(c)
        }
        return c.content
    },
    updateProxyWrapperOnSpecifiedElements: function(g) {
        var f = g.content,
            d = g.type,
            a, e = {
                A: {
                    global: RegExp(/href="(.*?)"/g),
                    local: RegExp(/href="(.*?)"/)
                },
                IMG: {
                    global: RegExp(/src="(.*?)"/g),
                    local: RegExp(/src="(.*?)"/)
                }
            },
            c = {
                A: "href",
                IMG: "src"
            },
            b = f.match(e[g.type]["global"]);
        if(!b) {
            return f
        }
        for(a = b.length - 1; a >= 0; a -= 1) {
            f = f.replace(b[a], c[d] + '="' + this.updateProxyWrapperOnSpecifiedElementUrl({
                type: g.type,
                url: e[d]["local"].exec(b[a])[1],
                action: g.action
            }) + '"')
        }
        return f
    },
    updateProxyWrapperOnSpecifiedElementUrl: function(c) {
        var b = c.url,
            a = {
                add: this.getProxiedUrl,
                remove: this.getOriginalUrl
            };
        if(b) {
            return a[c.action].call(this, {
                url: b,
                forImage: (c.type == "IMG")
            })
        }
        return b
    },
    doSetAttr: function() {
        var g = this.lastData,
            h = this.dialog.$element.find("input"),
            e = h.attr("name"),
            f = h.val(),
            d = this,
            b = this.getCurExperience(),
            a = {
                action: ELM.ExperienceEditorActions.SET_ATTRIBUTE,
                selector: "",
                attribute: e,
                value: f,
                control: {
                    action: ELM.ExperienceEditorActions.SET_ATTRIBUTE,
                    selector: "",
                    attribute: e,
                    value: g.el[g.el.property]
                }
            },
            c = "";
        if(this.dialog.isImageSwap) {
            c = window.location.host;
            a.asset = f.substr(f.indexOf(c) + c.length);
            a.width = parseInt(g.el.style.width);
            a.height = parseInt(g.el.style.height)
        } else {
            if(e == "href" || e == "src") {
                f = d.updateProxyWrapperOnSpecifiedElementUrl({
                    type: g.el.tagName,
                    url: f,
                    action: "add"
                })
            }
        }
        this.getSelector("#" + g.el.id, function(i) {
            a.selector = i.selector;
            a.control.selector = "#" + g.el.id;
            d.processEditAction(b, a, g, function() {
                d.cdq.setAttribute("#" + g.el.id, e, f, function() {
                    d.generateThumbnail(d.currentExperienceIndex)
                })
            })
        })
    },
    doSaveHTML: function() {
        var d = this.lastData,
            e = this.dialog.src,
            c = this.dialog.$element.find("textarea").val(),
            b = this,
            a = this.getCurExperience();
        this.getSelector("#" + d.el.id, function(f) {
            b.processEditAction(a, {
                action: "setContent",
                selector: f.selector,
                content: c,
                control: {
                    action: "setContent",
                    selector: f.selector,
                    content: d.el.innerHTML
                }
            }, d, function() {
                b.cdq.setContent("#" + d.el.id, b.updateProxyWrapperOnElements({
                    content: c,
                    action: "add"
                }), function() {
                    b.generateThumbnail(b.currentExperienceIndex)
                })
            }, e)
        })
    },
    updateExperiencePointers: function(c) {
        var b = c.actions.length - c.vtPointer - 1,
            a = c.zones.length - c.mboxPointer - 1;
        c.actions.length = c.vtPointer + 1;
        c.zones.length = c.mboxPointer + 1;
        c.actionsStack.length = c.actionsStack.length - b - a;
        c.stackPointer = c.actionsStack.length;
        this.toolbar.updateUndoRedoIcons(c)
    },
    undoAction: function() {
        var b = this.getCurExperience(),
            a = "",
            c = this;
        if(b.stackPointer > -1) {
            a = b.actionsStack[b.stackPointer];
            if(a === "MBOX") {
                this.cdq.applyActions([b.zones[b.mboxPointer].control], function() {
                    c.generateThumbnail(c.currentExperienceIndex)
                });
                b.mboxPointer--
            } else {
                if(a === "VT") {
                    this.cdq.applyActions([b.actions[b.vtPointer].control], function() {
                        c.generateThumbnail(c.currentExperienceIndex)
                    });
                    b.vtPointer--
                }
            }
            b.stackPointer--;
            this.checkForScriptTagInExperience(b);
            this.toolbar.updateUndoRedoIcons(b)
        }
    },
    redoAction: function() {
        var b = this.getCurExperience(),
            a = "",
            d = {},
            c = this;
        if(b.stackPointer + 1 < b.actionsStack.length) {
            b.stackPointer++;
            a = b.actionsStack[b.stackPointer];
            if(a === "MBOX") {
                b.mboxPointer++;
                this.setOfferContent(b.zones[b.mboxPointer], b.zones[b.mboxPointer]["jcr:title"], function() {
                    c.generateThumbnail(c.currentExperienceIndex)
                })
            } else {
                if(a === "VT") {
                    b.vtPointer++;
                    d = b.actions[b.vtPointer];
                    if(d["ref:offer"] && d.action === "setContent") {
                        c.offerRequest({
                            url: d["ref:offer"]
                        }).done(function(e) {
                            d.content = e;
                            c.sendCdqApplyActionsRequest({
                                actions: [d],
                                callback: function() {
                                    c.generateThumbnail(c.currentExperienceIndex)
                                }
                            })
                        })
                    } else {
                        this.sendCdqApplyActionsRequest({
                            actions: [b.actions[b.vtPointer]],
                            callback: function() {
                                c.generateThumbnail(c.currentExperienceIndex)
                            }
                        })
                    }
                }
            }
            this.checkForScriptTagInExperience(b);
            this.toolbar.updateUndoRedoIcons(b)
        }
    },
    processEditAction: function(c, b, e, g, f) {
        var d = this,
            e = e || this.lastData,
            a = e.el.mboxName;
        this.updateExperiencePointers(c);
        if(this.actionMenu.isSelectedElementMbox() && !this.isInsertElementAction(b.action)) {
            c.actionsStack.push("MBOX");
            c.mboxPointer = c.zones.length;
            this.checkForScriptTagInAction(b);
            if(typeof b.content !== "undefined") {
                if(!f) {
                    this.saveAnonymousOffer(c, b, e, g)
                } else {
                    this.saveReferencedOffer(c, b, e, g, f)
                }
            } else {
                if(b.attribute === "src") {
                    b.content = '<img src="' + b.value + "?ch_ck=" + moment().unix() + '"/>';
                    d.cdq.setContent("#" + e.el.id, b.content, function() {
                        d.generateThumbnail(d.currentExperienceIndex);
                        c.zones.push({
                            "jcr:title": a,
                            "ref:offer": b.asset,
                            control: {
                                action: "setContent",
                                selector: '[data-mboxname="' + a + '"]',
                                content: e.el.innerHTML
                            }
                        });
                        d.resetBoxes()
                    })
                } else {
                    c.mboxPointer--;
                    c.actionsStack.pop();
                    this.processEditActionVT(c, b, e, g)
                }
            }
        } else {
            if(!f) {
                this.processEditActionVT(c, b, e, g)
            } else {
                delete b.content;
                b["ref:offer"] = f;
                this.processEditActionVT(c, b, e, g)
            }
        }
    },
    processEditActionVT: function(b, a, c, d) {
        b.actionsStack.push("VT");
        b.vtPointer = b.actions.length;
        if(typeof c.el.cssSelector !== "undefined") {
            a.cssSelector = c.el.cssSelector
        }
        b.actions.push(a);
        if(_.isFunction(d)) {
            d()
        }
        this.showNoticeMessage(a);
        this.resetBoxes()
    },
    removeExtraFields: function(a) {
        delete a.vtPointer;
        delete a.mboxPointer;
        delete a.stackPointer;
        delete a.actionsStack;
        this.removeControlObject(a.actions);
        this.removeControlObject(a.zones)
    },
    removeControlObject: function(a) {
        for(var b = a.length - 1; b >= 0; b -= 1) {
            delete a[b].control
        }
    },
    processExperiencesBeforeSave: function() {
        var a = this;
        _.each(this.getExperiences(), function(b) {
            a.filterOutDuplicateVTActionsInExperience(b);
            a.filterOutDuplicateMboxActionsInExperience(b);
            a.removeExtraFields(b)
        })
    },
    filterOutDuplicateMboxActionsInExperience: function(c) {
        var a = c.zones,
            d = [],
            f, b, e;
        a.length = c.mboxPointer + 1;
        a = _.sortBy(a, function(g) {
            return g["jcr:title"]
        });
        e = a.length;
        for(b = 0; b < e; b++) {
            f = d[d.length - 1];
            if(f && f["jcr:title"] === a[b]["jcr:title"]) {
                a[b].control = f.control;
                d.pop()
            }
            d.push(a[b])
        }
        c.zones = d
    },
    filterOutDuplicateVTActionsInExperience: function(e) {
        var c = e.actions,
            h = [],
            g, f, d, b, i = false,
            a;
        c.length = e.vtPointer + 1;
        a = c.length;
        for(g = 0; g < a; g++) {
            d = c[g];
            i = false;
            for(f = g + 1; f < a; f++) {
                b = c[f];
                if((this.isXpathModifyingAction(d.action)) || (this.isXpathModifyingAction(b.action))) {
                    i = false;
                    break
                }
                i = this.checkActionDuplicateCriteria(d, b);
                if(i) {
                    b.control = d.control;
                    break
                }
            }
            if(!i) {
                h.push(d)
            }
        }
        e.actions = h
    },
    checkActionDuplicateCriteria: function(c, b) {
        var a;
        if((c.selector === b.selector) && (c.action === b.action)) {
            a = true;
            if(c.attribute && b.attribute && c.attribute !== b.attribute) {
                a = false
            }
        }
        return a
    },
    isXpathModifyingAction: function(a) {
        var b = [ELM.ExperienceEditorActions.REARRANGE, ELM.ExperienceEditorActions.INSERT_AFTER];
        return b.indexOf(a) !== -1
    },
    saveReferencedOffer: function(b, a, c, e, d) {
        b.zones.push({
            "jcr:title": c.el.mboxName,
            "ref:offer": d,
            control: a.control
        });
        e();
        this.resetBoxes()
    },
    saveAnonymousOffer: function(b, a, c, d) {
        b.zones.push({
            "jcr:title": c.el.mboxName,
            data: a.content,
            control: a.control
        });
        d();
        this.resetBoxes()
    },
    showNoticeMessage: function(a) {
        var b = this;
        if(a.selector[0] !== this.getIdSelectorParameter()) {
            F.trigger("noticeNotification", {
                message: this.messages.nonUniqueId
            })
        }
        this.cdq.getElementsCountForSelector(a.selector, function(c) {
            if(c.count > 1) {
                F.trigger("noticeNotification", {
                    message: b.messages.multipleElements
                })
            }
        });
        this.checkForScriptTagInAction(a)
    },
    hideBoxes: function() {
        this.hideBoxStyles.display = "none";
        this.cdq.setStyle(".AT_border, #AT_box_selected", this.hideBoxStyles);
        this.actionMenuPopover.hide()
    },
    resetSelection: function(a) {
        if((this.mode === this.modes.edit || this.mode === this.modes.experienceTargeting) && this.isVisible()) {
            if(!$(a.target).hasClass("icon-gear")) {
                this.markConfigButtonAsUnselected()
            }
            this.actionMenuPopover.hide();
            this.resetSelectedBox()
        }
    },
    resetBoxes: function() {
        delete this.hideBoxStyles.display;
        this.cdq.setStyle(".AT_border, #AT_box_selected", this.hideBoxStyles);
        this.cdq.setContent(".AT_box_label", "")
    },
    resetHoverBox: function() {
        this.hideBoxStyles.display = "block";
        this.cdq.setStyle(".AT_border", this.hideBoxStyles)
    },
    resetSelectedBox: function() {
        this.hideBoxStyles.display = "block";
        this.cdq.setStyle("#AT_box_selected", this.hideBoxStyles);
        this.cdq.setContent("#AT_box_selected .AT_box_label", "");
        this.actionMenuPopover.hide()
    },
    stopSubmit: function() {
        console.log("Stopped form submit")
    },
    switchToEditMode: function() {
        this.cdq.updatePageState("IS_INTERACT", false);
        this.cdq.removeListener(this.clickListenerId);
        this.cdq.removeListener(this.formListenerId);
        this.cdq.copyAttribute("a", this.cdqPrefix + "href", "href");
        this.cdq.removeAttribute("a", this.cdqPrefix + "href");
        this.cdq.copyAttribute("a", this.cdqPrefix + "target", "target");
        this.cdq.removeAttribute("a", this.cdqPrefix + "target");
        this.clickListenerId = this.cdq.addListener("*", "at-click", this.handleHostClick, null, true, true);
        this.formListenerId = this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.cdq.addListener("document", "scroll", this.handleScroll);
        this.removeAttributesToAvoidNavigation();
        this.resetHoverBox();
        this.cdq.setStyle("#AT_box_selected", "display", "block")
    },
    removeAttributesToAvoidNavigation: function() {
        this.cdq.copyAttribute("*", "onclick");
        this.cdq.removeAttribute("*", "onclick")
    },
    switchToClickTrackMode: function() {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = this.getPreviousMode() === this.modes.INTERACT;
        if(a && (b && c.model)) {
            this.resetJavaScriptInEE();
            this.showModeChangeNotification(this.messages.SWITCHED_TO_CLICKTRACK)
        }
        delete this.components.interactModeToolbar;
        this.cdq.updatePageState("IS_INTERACT", false);
        this.cdq.removeListener(this.clickListenerId);
        this.cdq.removeListener(this.formListenerId);
        this.cdq.copyAttribute("a", this.cdqPrefix + "href", "href");
        this.cdq.removeAttribute("a", this.cdqPrefix + "href");
        this.cdq.copyAttribute("a", this.cdqPrefix + "target", "target");
        this.cdq.removeAttribute("a", this.cdqPrefix + "target");
        this.clickListenerId = this.cdq.addListener("*", "at-click", this.toggleElement, null, true, true);
        this.formListenerId = this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.cdq.setStyle("#AT_box_selected", "display", "none");
        this.removeAttributesToAvoidNavigation();
        this.resetHoverBox();
        this.markClickedElementsAsSelected({
            poll: true
        });
        this.hideActionButtons();
        this.hideInteractToolbar();
        this.showExperiencesTabs()
    },
    unmarkClickedElementsAsSelected: function() {
        _.each(this.clickedElements, function(b, a) {
            this.unmarkElementAsSelected(b)
        }, this)
    },
    markClickedElementsAsSelected: function(a) {
        this.cdq.markClickedElementsAsSelected({
            selectors: this.clickedElements,
            poll: a.poll
        })
    },
    toggleElement: function(d) {
        var a = null,
            b = null,
            c = this;
        if($("#object-highlighter-popover-ab-xt-apct").is(":visible")) {
            this.hideOverlayPopover()
        }
        this.getSelector("#" + d.el.id, function(e) {
            a = e.selector;
            b = c.clickedElements.indexOf(a);
            if(b === -1) {
                c.showNoticeMessage({
                    selector: a
                });
                c.clickedElements.push(a);
                c.markElementAsSelected(a)
            } else {
                c.clickedElements.splice(b, 1);
                c.unmarkElementAsSelected(a)
            }
        })
    },
    markElementAsSelected: function(a) {
        this.cdq.addClass(a, "AT_highlighted AT_blue");
        this.cdq.setAttribute(a, "data-at_label", "selected")
    },
    unmarkElementAsSelected: function(a) {
        this.cdq.removeClass(a, "AT_highlighted AT_blue");
        this.cdq.setAttribute(a, "data-at_label", "")
    },
    saveClickedElements: function() {
        F.trigger(ELM.evtNamespace + ":experienceEditor:saveClickedElements", this.getMetricComponent(), this.getClickedElements())
    },
    editModeNavigationHandler: function(a) {
        this.mode = this.modes.edit;
        this.navigationHandler(a)
    },
    showActionButtons: function() {
        this.view.$(this.hideActionButtonsCssRule).removeClass("hidden")
    },
    hideActionButtons: function() {
        this.view.$(this.hideActionButtonsCssRule).addClass("hidden")
    },
    showClickTrackBreakWarning: function() {
        var a = this.components.rearrangeInstructionsDialog;
        a.model.set({
            warning: this.messages.WARN_CT_IN_REARRANGED_CONTAINER
        })
    },
    setupRearrange: function(c) {
        var b = this,
            a = this.components.rearrangeInstructionsDialog;
        this.rearrangementActions = [];
        a.show({
            model: new ELM.Model({})
        });
        this.cdq.setupRearrangement(c, function(d) {
            d.action = ELM.ExperienceEditorActions.REARRANGE;
            d.control = {
                from: d.to,
                to: d.from,
                selector: d.selector,
                action: ELM.ExperienceEditorActions.REARRANGE
            };
            b.rearrangementActions.push(d);
            b.trigger("elements:rearranged", d)
        })
    },
    saveJsonAndDestroyRearrangeSetup: function() {
        _.each(this.rearrangementActions, this.saveJson, this);
        this.destroySetup("destroyRearrangeSetup")
    },
    cancelRearrangeOperation: function() {
        _.each(this.rearrangementActions.reverse(), function(a) {
            this.cdq.applyActions([a.control])
        }, this);
        this.destroySetup("destroyRearrangeSetup")
    },
    setupMove: function(e) {
        var c = this,
            b = this.components.moveInstructionsDialog,
            f = this.lastData.el.style,
            a = isNaN(parseInt(f.left)) ? 0 : parseInt(f.left),
            d = isNaN(parseInt(f.top)) ? 0 : parseInt(f.top);
        this.currentActionJson = {};
        this.currentActionJson.control = {
            selector: "#" + e.el.id,
            action: ELM.ExperienceEditorActions.MOVE,
            position: f.position,
            finalLeftPosition: a,
            finalTopPosition: d
        };
        b.show({
            model: new ELM.Model({
                xValue: a,
                yValue: d
            })
        }).enableMoveMode();
        this.cdq.setupMove(e, function(g) {
            c.currentActionJson = _.extend(c.currentActionJson, g);
            c.currentActionJson.action = ELM.ExperienceEditorActions.MOVE;
            b.setCoordinates({
                x: g.finalLeftPosition,
                y: g.finalTopPosition
            })
        })
    },
    moveElementInMoveMode: function(a) {
        var b = this;
        this.cdq.moveElementInMoveMode({
            selector: this.currentActionJson.control.selector,
            finalLeftPosition: a.x,
            finalTopPosition: a.y
        }, function(c) {
            b.currentActionJson = _.extend(b.currentActionJson, c);
            b.currentActionJson.action = ELM.ExperienceEditorActions.MOVE
        })
    },
    saveJsonAndDestroyMoveSetup: function() {
        this.saveJson(this.currentActionJson);
        this.destroySetup("destroyMoveSetup")
    },
    cancelMoveOperation: function() {
        this.destroySetup("destroyMoveSetup");
        this.cdq.applyActions([this.currentActionJson.control])
    },
    setupResize: function(c) {
        var b = this,
            e = this.components.resizeInstructionsDialog,
            d = this.lastData.el.offsetWidth + "px",
            a = this.lastData.el.offsetHeight + "px";
        this.currentActionJson = {};
        this.currentActionJson.control = {
            selector: "#" + c.el.id,
            action: ELM.ExperienceEditorActions.RESIZE,
            finalWidth: d,
            finalHeight: a
        };
        this.cdq.setupResize(c, function(f) {
            b.currentActionJson = _.extend(b.currentActionJson, f);
            b.currentActionJson.action = ELM.ExperienceEditorActions.RESIZE;
            e.setDimensions({
                w: f.finalWidth,
                h: f.finalHeight
            })
        });
        e.show({
            model: new ELM.Model({
                width: d,
                height: a
            })
        })
    },
    resizeElementInResizeMode: function(b) {
        var a = this;
        this.cdq.resizeElementInResizeMode({
            selector: this.currentActionJson.control.selector,
            finalWidth: b.w,
            finalHeight: b.h
        }, function(c) {
            a.currentActionJson = _.extend(a.currentActionJson, c);
            a.currentActionJson.action = ELM.ExperienceEditorActions.RESIZE
        })
    },
    saveJsonAndDestroyResizeSetup: function() {
        this.saveJson(this.currentActionJson);
        this.destroySetup("destroyResizeSetup")
    },
    cancelResizeOperation: function() {
        this.destroySetup("destroyResizeSetup");
        this.cdq.applyActions([this.currentActionJson.control])
    },
    destroySetup: function(a) {
        this.cdq.perform(a)
    },
    saveJson: function(a) {
        if(a && a.selector) {
            this.pushActionToQueue(a);
            this.generateThumbnail(this.getCurrentExperienceIndex())
        }
    },
    pushActionToQueue: function(a) {
        this.processEditAction(this.getCurExperience(), a, null, null, null)
    },
    sendCdqApplyActionsRequest: function(i) {
        var b = ELM.Util.clone(i.actions),
            f = b.length,
            e, d = ["setContent", "appendContent", "prependContent"],
            h = "setAttribute",
            g = ["src", "href"],
            a = {
                src: "IMG",
                href: "A"
            },
            c;
        for(e = f - 1; e >= 0; e--) {
            c = b[e];
            if(c.asset) {
                continue
            }
            if(_.contains(d, c.action)) {
                c.content = this.updateProxyWrapperOnElements({
                    content: c.content,
                    action: "add"
                })
            } else {
                if(h == c.action && g.indexOf(c.attribute) !== -1) {
                    c.value = this.updateProxyWrapperOnSpecifiedElementUrl({
                        type: a[c.attribute],
                        url: c.value,
                        action: "add"
                    })
                }
            }
        }
        this.cdq.applyActions(b, i.callback, i.poll)
    },
    setupInsertElement: function(b) {
        var a = this.defaultDialogButtons;
        this.components.insertElementAction.showInsertElementEnvironment({
            editHTMLDialog: this.dialog,
            popoverPosition: this.components.actionMenu.getPosition(b),
            parentElementId: b.el.id,
            model: new ELM.Models.ActionsInsertElement(),
            cdq: this.cdq
        });
        this.insertElementModel = this.components.insertElementAction.model;
        this.dialogAction = ELM.ExperienceEditorActions.INSERT_ELEMENT;
        a[1]["label"] = Granite.I18n.get("Insert");
        this.dialog.set("buttons", a)
    },
    destroySetupForInsertElementAction: function(a) {
        this.cdq.sendRemoveHighlightFromElementRequest("#" + a);
        this.components.insertElementAction.popover.hide();
        this.components.insertElementInstructionsDialog.hide()
    },
    isProxyEnabled: function() {
        return ELM.isProxyEnabled && ELM.isProxyEnabledInEE && ELM.proxyURL && ELM.proxyURLForImage
    },
    authenticateAndShowExperienceEditor: function(a) {
        var b = this;
        this.authenticateProxyIfNeeded(function() {
            b.showExperienceEditor(a || {})
        })
    },
    handleUrlChange: function(a) {
        var b = this.getActivityUrl();
        if(!ELM.Util.compareURLs(a.activityUrl, b, {
                similar: true
            })) {
            this.showControlUrlChangeNotification(a.activityUrl)
        } else {
            if(a.disableJavaScript !== this.cdq.disableJavaScript) {
                this.cdq.disableJavaScript = !this.cdq.disableJavaScript;
                this.resetJavaScriptInEE()
            }
        }
    },
    destroy: function() {
        this.removeCdqListeners();
        this.destruct()
    },
    removeCdqListeners: function() {
        if(this.cdq) {
            this.cdq.off("host:loaded", this.handleHostLoad);
            this.cdq.off("thumbnailGeneratedComplete", this.handleThumbnailGenerate);
            this.cdq.off("host:loadTimeOut", this.handleHostLoadTimeout);
            this.cdq.off("host:handshake", this.handleHostHandShake)
        }
    },
    moveIframeElement: function(a) {
        this.frame = a.frame;
        $(this.frame).appendTo(this.view.$el.find(".iframe-container"))
    },
    showExperienceForSelectedAudience: function() {},
    setCdqReference: function(a) {
        this.cdq = a.cdq
    },
    setPreviousMode: function(a) {
        this.lastMode = a
    },
    getPreviousMode: function() {
        return this.lastMode
    },
    clearPreviousMode: function() {
        this.lastMode = ""
    },
    showFrame: function() {
        $(this.frame).removeClass("hidden")
    },
    hideFrame: function() {
        $(this.frame).addClass("hidden")
    },
    isLinkAbsolute: function(a) {
        return new RegExp(/^[a-z]+:\/\//).test(a)
    },
    resolveUrl: function(a, f) {
        var i = this.getDummyDocument(),
            c = i.getElementsByTagName("base")[0],
            b = c && c.href,
            g = i.head || i.getElementsByTagName("head")[0],
            h = c || g.appendChild(i.createElement("base")),
            d = i.createElement("a"),
            e;
        h.href = f;
        d.href = a;
        e = d.href;
        if(c) {
            c.href = b
        } else {
            g.removeChild(h)
        }
        return e
    },
    getDummyDocument: function() {
        var a = document.getElementById("at-dummy-iframe");
        return a.contentWindow.document
    },
    isInsertElementAction: function(a) {
        return(a == "insertAfter") || (a == "insertBefore")
    },
    highlightObjects: function(a) {
        var e = this.getOverlayPopoverCUIObject().$element,
            h = [],
            i = true,
            g = e.find(".element-options").find(":selected").val(),
            f = e.find(".color-options").find(":selected").val(),
            d = e.find(".overlay-enable-switch"),
            b, c = this.experiences;
        if(d.length) {
            i = d.is(":checked")
        }
        if(g === "none") {
            i = false
        }
        if(g === "modifications") {
            if(this.toString() === "oneToOneEEClickTrackMode") {
                c = this.model.getLocations();
                _.each(c, function(j) {
                    h.push(this.model.getSelectorFromLocation(j))
                }, this)
            } else {
                _.each(c, function(j) {
                    b = this.getExperienceSnapshot(j);
                    _.each(b.actions, function(k) {
                        h.push(k.selector)
                    });
                    _.each(b.zones, function(k) {
                        if(_.isObject(k)) {
                            h.push('[data-mboxname="' + k["jcr:title"] + '"]')
                        }
                    })
                }, this)
            }
        } else {
            h.push(this.overlayElementTypeMap[g].selector)
        }
        this.cdq.applyOverlay({
            isOverlayEnabled: i,
            elementType: g,
            elementSelectors: h,
            color: f,
            label: this.overlayElementTypeMap[g].label
        });
        this.hideOverlayPopover()
    },
    updateButtonColor: function(a) {
        $(a.target).find("button").attr("data-value", a.selected)
    },
    hideOverlayPopover: function() {
        var a = this.getOverlayPopoverCUIObject();
        a.hide()
    },
    getOverlayPopoverCUIObject: function() {
        return this.overlayPopoverCUIObject || (this.toolbar && this.toolbar.getOverlayPopoverCUIObject())
    },
    getExperienceSnapshot: function(b) {
        var a = ELM.Util.clone(b);
        a.actions.length = a.vtPointer + 1;
        a.zones.length = a.mboxPointer + 1;
        return a
    },
    showScriptUseNotification: function() {
        this.$scriptUseNotifier.removeClass("hidden")
    },
    hideScriptUseNotification: function(a) {
        a && a.stopPropagation();
        this.$scriptUseNotifier.addClass("hidden")
    },
    checkForScriptTag: function(c) {
        var b = document.createElement("div"),
            a;
        if(typeof c == "undefined") {
            return
        }
        b.appendChild(ELM.Util.getFragment(c));
        a = b.getElementsByTagName("script");
        if(a.length) {
            this.showScriptUseNotification()
        }
    },
    getOfferContent: function(c) {
        var b = this,
            a;
        this.offerMetaDataRequest({
            url: c,
            async: false
        }).done(function(d) {
            if(d["dc:format"] === "text/html") {
                return b.offerRequest({
                    url: c,
                    async: false
                }).done(function(e) {
                    a = e
                })
            }
        });
        return a
    },
    checkForScriptTagInAction: function(b) {
        var c = b["ref:offer"],
            a = b.content;
        if(c) {
            a = this.getOfferContent(c)
        }
        this.checkForScriptTag(a)
    },
    checkForScriptTagInZone: function(a) {
        var c = a["ref:offer"],
            b = a.content;
        if(c) {
            b = this.getOfferContent(c)
        }
        this.checkForScriptTag(b)
    },
    checkForScriptTagInExperience: function(b) {
        var c = this,
            a = ELM.Util.clone(b);
        this.hideScriptUseNotification();
        a.actions.length = a.vtPointer + 1;
        a.zones.length = a.mboxPointer + 1;
        _.each(a.actions, function(d) {
            c.checkForScriptTagInAction(d)
        });
        _.each(a.zones, function(d) {
            c.checkForScriptTagInZone(d)
        })
    },
    checkForScriptTagInExperiences: function() {
        var a = this;
        _.each(this.getExperiences(), function(b) {
            a.checkForScriptTagInExperience(b)
        })
    },
    disableClick: function(a) {
        return false
    },
    disableHover: function(a) {
        return false
    },
    hideRedirectOverlay: function() {
        this.view.$(".redirect-overlay").addClass("display-none")
    },
    showRedirectOverlay: function(a) {
        var b = this.view.$(".redirect-overlay");
        b.removeClass("display-none");
        b.find(".success").html(a)
    },
    isRedirectExperience: function(a) {
        return a.redirect && a.redirect.url
    },
    isExperienceEmpty: function(b, d) {
        var a = b.stackPointer !== -1 || b.mboxPointer !== -1 || b.vtPointer !== -1,
            c = b.redirect && b.redirect.url;
        return d ? !(a || c) : !a
    },
    changeMode: function(a) {
        if(this.getMode() === a) {
            return
        }
        if(a === this.modes.preview) {
            this.setPreviousMode(this.getMode());
            this.setMode(a);
            return
        }
        if(a !== this.modes.INTERACT) {
            if(this.getMode() === this.modes.preview) {
                this.setMode(this.getPreviousMode());
                this.setPreviousMode(this.modes.preview);
                return
            }
            this.setMode(this.getPreviousMode());
            this.setPreviousMode(this.modes.INTERACT);
            return
        }
        this.setPreviousMode(this.getMode());
        this.setMode(a)
    },
    isInteractMode: function() {
        return this.getMode() === this.modes.INTERACT
    },
    updateExperienceEditorBuildMode: function(d) {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = b && c.model.getControlUrl(),
            e = $(d.currentTarget).data("mode"),
            f = function() {
                this.changeMode(e);
                this.updateEditorMode()
            }.bind(this);
        if(e !== this.modes.INTERACT && b && !ELM.Util.compareURLs(a, this.getBuildModeUrl(), {
                similar: true
            })) {
            this.showControlUrlChangeNotification(a, true, f);
            return
        }
        f.call(this)
    },
    getAdminParams: function() {
        var a = this.adminParameter;
        if(this.isProxyEnabled()) {
            a = ELM.proxyURL.substr(ELM.proxyURL.indexOf("?") + 1)
        }
        return a
    },
    showModeChangeNotification: function(c) {
        var b = this,
            d = this.view.$el.find(".interact-build-switch-message"),
            a = 5000;
        d.find(".notificationMessage").empty().html(c);
        d.show();
        if(this.modeChangeNotificationId) {
            clearTimeout(this.modeChangeNotificationId)
        }
        this.modeChangeNotificationId = setTimeout(function() {
            d.fadeOut(function() {
                b.modeChangeNotificationId = null
            })
        }, a)
    },
    switchToInteractMode: function() {
        var c, b = this.getAdminParams(),
            a = this.messages.SWITCHED_TO_INTERACT;
        if(typeof this.components.interactModeToolbar === "undefined" && this.getPreviousMode() !== this.modes.ONE_TO_ONE) {
            c = new ELM.Models.ExperienceEditorInteractMode({
                controlUrl: this.getActivityUrl(),
                history: [this.getActivityUrl()],
                historyIndex: 0,
                oldWorkflow: true
            });
            this.addInteractModeToolbar(c);
            if(this.isProxyEnabled()) {
                a += this.messages.WARN_JS_LINKS
            }
            this.showModeChangeNotification(a)
        }
        this.enableJavaScriptInEE();
        this.cdq.showUnloadWarning(false);
        this.cdq.updatePageState("IS_INTERACT", true);
        this.resetBoxes();
        this.cdq.setStyle(".AT_border, #AT_box_selected", "display", "none");
        c = this.components.interactModeToolbar ? this.components.interactModeToolbar.model : this.interactModeModel;
        this.cdq.modifyHrefForInteractMode({
            baseURL: c.getControlUrl(),
            adminParameter: b,
            isProxyEnabled: this.isProxyEnabled()
        });
        this.cdq.copyAttribute("a", "target", this.cdqPrefix + "target");
        this.cdq.removeAttribute("a", "target");
        this.cdq.copyAttribute("*", this.cdqPrefix + "onclick", "onclick");
        this.cdq.removeAttribute("*", this.cdqPrefix + "onclick");
        this.cdq.removeListener(this.clickListenerId);
        this.cdq.removeListener(this.formListenerId);
        this.clickListenerId = this.cdq.addListener("a", "click", this.handleAnchorClickInteractMode, null, false, false);
        this.formListenerId = this.cdq.addListener("form", "submit", this.handleFormSubmitInteractMode, null, false, false);
        this.hideActionButtons()
    },
    enableJavaScriptInEE: function() {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = b && c.model.getControlUrl();
        this.cdq.toggleJavaScript({
            callback: function() {
                if(b && ELM.Util.compareURLs(a, this.getBuildModeUrl(), {
                        similar: true
                    })) {
                    this.switchExperience(this.currentExperienceIndex, false)
                }
            }.bind(this),
            disableJavaScript: false
        })
    },
    resetJavaScriptInEE: function() {
        this.cdq.toggleJavaScript({
            callback: this.updatePage.bind(this)
        })
    },
    updatePage: function() {
        this.switchExperience(this.currentExperienceIndex, false)
    },
    isJavaScript: function(a) {
        return a.indexOf("javascript:") !== -1
    },
    handleAnchorClickInteractMode: function(a) {
        var b = a.el.href;
        if(typeof b === "undefined" || !b) {
            return
        }
        b = this.getOriginalUrlInInteractMode(b);
        if(b && !this.isJavaScript(b)) {
            $(".ee-browse-url").val(b)
        }
    },
    handleFormSubmitInteractMode: function(a) {},
    getOriginalUrlInInteractMode: function(a) {
        var b = this.components.interactModeToolbar ? this.components.interactModeToolbar.model : this.interactModeModel;
        return this.getOriginalUrl({
            url: a,
            baseURL: b.getControlUrl()
        })
    },
    initializeAfterLoadInInteractMode: function(a) {
        var b = this.components.interactModeToolbar ? this.components.interactModeToolbar.model : this.interactModeModel;
        b.addToHistory(a);
        b.setControlUrl(a);
        this.isHostLoaded = true;
        this.resetBoxes();
        this.updateEditorMode();
        if(ELM.Util.compareURLs(a, this.getActivityUrl(), {
                similar: true
            })) {
            this.switchExperience(this.getCurrentExperienceIndex(), false)
        }
        this.stopHostLoadingProgress();
        this.view.$(".unableToLoadPageNotifier").addClass("hidden")
    },
    updateFrameSource: function(a) {
        this.setFrameSrc(this.getProxiedUrl({
            url: a
        }))
    },
    reloadFrame: function() {
        this.cdq.reload()
    },
    addInteractModeToolbar: function(a) {
        this.addComponent(new ELM.Activities.ExperienceEditorInteractModeToolbar({
            el: this.$interactToolbar,
            visible: true,
            component: this,
            model: a
        }), "interactModeToolbar").on("hideFrame", this.hideFrame, this).on("showFrame", this.showFrame, this).on("updateFrameSource", this.updateFrameSource, this).on("reloadFrame", this.reloadFrame, this)
    },
    hideExperiencesTabs: function() {
        this.view.$(".tabs nav.experiences").addClass("display-none");
        this.view.$(".tabs a.addExperience").addClass("display-none")
    },
    showExperiencesTabs: function() {
        this.view.$(".tabs nav.experiences").removeClass("display-none");
        this.view.$(".tabs a.addExperience").removeClass("display-none")
    },
    hideInteractToolbar: function() {
        this.$interactToolbar.addClass("display-none")
    },
    showInteractToolbar: function() {
        this.$interactToolbar.removeClass("display-none")
    },
    switchToEditModeForABandXT: function() {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = this.getPreviousMode() === this.modes.INTERACT;
        if(a && (b && c.model)) {
            this.resetJavaScriptInEE();
            this.showModeChangeNotification(this.messages.SWITCHED_TO_BUILD)
        }
        delete this.components.interactModeToolbar;
        this.switchToEditMode();
        this.showActionButtons();
        this.hideInteractToolbar();
        this.showExperiencesTabs()
    },
    isClickTrackMode: function() {
        return this.getMode() === this.modes.clicktrack
    },
    setBuildModeUrl: function(a) {
        this.buildModeUrl = a
    },
    getBuildModeUrl: function() {
        return this.buildModeUrl
    },
    handleHostHandShake: function(c) {
        var e = c.pageURL,
            a = ELM.proxyURL,
            d = this.isPageURLUpdateRequired(c),
            f = "",
            b = a.substring(a.indexOf("<"), a.indexOf(">") + 1);
        if(d) {
            e = this.isInteractMode() ? this.getOriginalUrlInInteractMode(c.pageURL) : this.getOriginalUrl({
                url: c.pageURL
            });
            if(this.isProxyEnabled()) {
                f = a.replace(b, encodeURIComponent(e))
            } else {
                f = this.getAdminURL(e)
            }
        }
        this.cdq.sendTargetJSHandShakeACK({
            updatePageURL: d,
            pageURL: f
        })
    },
    isPageURLUpdateRequired: function(b) {
        var c = true,
            a = this.getVizProxyHost();
        if(b.isAdmin && !this.isProxyEnabled()) {
            c = false
        }
        if(b.isAdmin && this.isProxyEnabled() && b.pageURL.indexOf(a) !== -1) {
            c = false
        }
        return c
    },
    getVizProxyHost: function() {
        var a = ELM.proxyURL;
        return a.substring(a.indexOf("//") + 2, a.indexOf("<") - 1)
    },
    checkForMultipleElements: function(a) {
        var b = this;
        this.getSelector(a, function(c) {
            b.showNoticeMessage({
                selector: c.el.cssSelector
            })
        })
    }
});
ELM.Activities.ExperienceEditor.EditMode = new Class({
    toString: "ExperienceEditorEditMode",
    extend: ELM.Activities.ExperienceEditor,
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.cacheSelectors();
        this.addSubComponents()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    initView: function(a) {
        var b = $('<div class="experienceEditorEditMode experienceEditor" style="display: none;" tabindex="0"></div>').appendTo(a);
        this.view = new this.View({
            el: b,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    registerVars: function() {
        var a = this;
        this.superClass.registerVars.apply(this, arguments);
        this.defaultDialogButtons = [{
            label: Granite.I18n.get("Cancel"),
            click: function(b) {
                this.hide();
                a.resetBoxes();
                if(a.dialogAction === ELM.ExperienceEditorActions.INSERT_ELEMENT) {
                    a.destroySetupForInsertElementAction(a.components.insertElementInstructionsDialog.selector)
                }
            }
        }, {
            label: Granite.I18n.get("Save"),
            className: "primary",
            click: function(b) {
                a.dialogSave();
                b.dialog.hide()
            }.bind(this)
        }]
    },
    cacheSelectors: function() {
        this.superClass.cacheSelectors.apply(this, arguments);
        this.$moveDialog = this.view.$("#moveDialogContainer");
        this.$resizeDialog = this.view.$("#resizeDialogContainer");
        this.$rearrangeDialog = this.view.$("#rearrangeDialogContainer");
        this.$insertElementDialog = this.view.$("#insert-element-dialog-container")
    },
    registerGlobalTriggers: function() {
        F.on("A-B:content-picker:closed A-B-analytics:content-picker:closed", this.handleContentPickerClosed);
        F.on("A-B:content:selected A-B-analytics:content:selected", this.handleContentSelected)
    },
    unregisterGlobalTriggers: function() {
        F.off("A-B:content-picker:closed A-B-analytics:content-picker:closed", this.handleContentPickerClosed);
        F.off("A-B:content:selected A-B-analytics:content:selected", this.handleContentSelected)
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleScroll);
        this.bind(this.resetHoverBox);
        this.bind(this.resetSelectedBox);
        this.bind(this.resetSelection);
        this.bind(this.handleThumbnailGenerate);
        this.bind(this.startHostLoadingProgress);
        this.bind(this.stopHostLoadingProgress);
        this.bind(this.handleHostLoadTimeout);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleKeyBoardEvents);
        this.bind(this.setupRearrange);
        this.bind(this.setupMove);
        this.bind(this.setupResize);
        this.bind(this.setupInsertElement);
        this.bind(this.saveJsonAndDestroyRearrangeSetup);
        this.bind(this.cancelRearrangeOperation);
        this.bind(this.saveJsonAndDestroyMoveSetup);
        this.bind(this.cancelMoveOperation);
        this.bind(this.moveElementInMoveMode);
        this.bind(this.cancelResizeOperation);
        this.bind(this.saveJsonAndDestroyResizeSetup);
        this.bind(this.resizeElementInResizeMode);
        this.bind(this.removeKeyboardListeners);
        this.bind(this.handleExperienceEditorClose);
        this.bind(this.handleExperiencesSave);
        this.bind(this.undoAction);
        this.bind(this.redoAction);
        this.bind(this.deleteExperienceHandler);
        this.bind(this.duplicateExperienceHandler);
        this.bind(this.renameExperienceHandler);
        this.bind(this.redirectToURLHandler);
        this.bind(this.handleUrlChange);
        this.bind(this.handleContentPickerClosed);
        this.bind(this.handleContentSelected);
        this.bind(this.destroySetupForInsertElementAction);
        this.bind(this.updateButtonColor);
        this.bind(this.highlightObjects);
        this.bind(this.hideOverlayPopover);
        this.bind(this.updateRedirectOffer);
        this.bind(this.saveRedirectOffer);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.handleUnsavedDialogClose)
    },
    addSubComponents: function() {
        this.superClass.addSubComponents.apply(this, arguments);
        this.addExperienceEditorToolbar();
        this.addExperienceEditorNavPopover();
        this.addRearrangeInstructionsDialog();
        this.addMoveInstructionsDialog();
        this.addResizeInstructionsDialog();
        this.addExperienceEditorActionMenu();
        this.addInsertElementInstructionDialog();
        this.addInsertElement();
        this.addRedirectToUrlComponent()
    },
    addInsertElement: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorInsertElement({
            visible: true,
            instructionsDialog: this.components.insertElementInstructionsDialog,
            cdq: this.cdq
        })).on("insertElement:destroy-initial-setup", this.destroySetupForInsertElementAction)
    },
    addRearrangeInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.RearrangeInstructionsDialog({
            el: this.$rearrangeDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.RearrangeInstructionsDialog
        })).on("rearrange:complete", this.saveJsonAndDestroyRearrangeSetup).on("rearrange:cancel", this.cancelRearrangeOperation)
    },
    addInsertElementInstructionDialog: function() {
        this.addComponent(new ELM.Activities.InsertElementInstructionsDialog({
            el: this.$insertElementDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.InsertElementInstructionsDialog
        })).on("insert-element:cancel", this.destroySetupForInsertElementAction.bind(this))
    },
    addMoveInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.MoveInstructionsDialog({
            el: this.$moveDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.MoveInstructionsDialog
        })).on("move:complete", this.saveJsonAndDestroyMoveSetup).on("move:cancel", this.cancelMoveOperation).on("coordinates:changed", this.moveElementInMoveMode)
    },
    addResizeInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.ResizeInstructionsDialog({
            el: this.$resizeDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.ResizeInstructionsDialog
        })).on("resize:cancel", this.cancelResizeOperation).on("resize:complete", this.saveJsonAndDestroyResizeSetup).on("dimensions:changed", this.resizeElementInResizeMode)
    },
    addExperienceEditorActionMenu: function() {
        $(".-e2e-abExperienceEditorActionMenu").remove();
        this.addComponent(new ELM.Activities.ExperienceEditorActionMenu({
            el: $('<div class="experienceEditorPopover -e2e-abExperienceEditorActionMenu width-12" />').appendTo(document.body),
            component: this
        }), "actionMenu").on("action:rearrange", this.setupRearrange).on("action:move", this.setupMove).on("action:resize", this.setupResize).on("action:insert-element", this.setupInsertElement)
    },
    addActionHandlerDialog: function() {
        this.dialog = new CUI.Modal({
            element: $('<div class="actionHandlerDialog" />').appendTo(document.body),
            visible: false,
            heading: "",
            content: "",
            buttons: this.defaultDialogButtons
        })
    },
    addRedirectToUrlComponent: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.RedirectToUrl({
            el: this.view.$(".redirect-to-url-dialog")
        }), "redirectToUrlDialog").on("A-B:update-redirect-offer", this.saveRedirectOffer).on("A-B-analytics:update-redirect-offer", this.saveRedirectOffer)
    },
    showExperienceEditor: function(b) {
        var c = b.name,
            a;
        this.cdq = b.cdq;
        this.moveIframeElement(this.cdq);
        this.setMode(this.modes.edit);
        this.load(b.model);
        this.clearExperiences();
        this.addCdqClientListeners();
        this.setExperiences(b.experiences);
        this.setActivityUrl(b.url);
        a = this.getExperiencesLength();
        this.updateExperiencesData(this.getExperiences());
        if(!this.isSetup) {
            this.setup(b)
        }
        if(c) {
            this.setSpecificExperience(this.getExperiences(), c)
        } else {
            if(a) {
                this.addExperience(true)
            }
        }
        this.show();
        if(!this.getExperiencesLength()) {
            this.hideFrame();
            this.handleAddressBarNavigation(false)
        }
        this.renderExperienceTabs();
        this.toolbar.setActivityNameOnToolbar(this.model.getTitle());
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.resetHostSite(true);
        this.addKeyboardListeners()
    },
    setup: function(a) {
        var b = a.url || ELM.defaultSimulatorUrl;
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.setPath([]);
        this.setCurrentExperienceIndex(-1);
        this.setControlString(" [Control]");
        this.useDefaultThumbnailSrc();
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.setLastExperienceIndex(-1);
        this.superClass.setup.apply(this, arguments);
        if(this.experiences.length) {
            this.frame.src = this.getProxiedUrl({
                url: this.getActivityUrl()
            })
        } else {
            if(b) {
                this.setActivityUrl(b);
                this.setFrameSrc(this.getProxiedUrl({
                    url: this.getActivityUrl()
                }))
            }
        }
        this.addActionHandlerDialog();
        this.actionMenuPopover = this.components.actionMenu.popover
    },
    updateEditorMode: function() {
        if(this.isABEditMode()) {
            this.switchToEditModeForABandXT()
        }
        if(this.isInteractMode()) {
            this.showInteractToolbar();
            this.hideExperiencesTabs();
            this.switchToInteractMode()
        }
    },
    renderExperienceTabs: function() {
        this.hideGearButton = false;
        this.superClass.renderExperienceTabs.apply(this, arguments)
    },
    hideActionMenu: function() {
        this.actionMenuPopover.hide()
    },
    actionMenuAdjustPosition: function(a) {
        this.components.actionMenu.adjustPosition(a)
    },
    handleContentPickerClosed: function(a) {
        if(a.requestAction == ELM.ExperienceEditorActions.INSERT_ELEMENT) {
            this.destroySetupForInsertElementAction(this.components.insertElementInstructionsDialog.selector)
        }
        this.resetBoxes()
    },
    isABEditMode: function() {
        return this.getMode() === this.modes.edit
    }
});
ELM.Activities.ExperienceEditor.ExperienceTargetingMode = new Class({
    toString: "ExperienceEditorExperienceTargetingMode",
    extend: ELM.Activities.ExperienceEditor,
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.cacheSelectors();
        this.addSubComponents()
    },
    destruct: function() {
        this.confirmDeleteModal.destruct();
        this.confirmDeleteModal.$element.remove();
        this.unregisterGlobalTriggers()
    },
    initView: function(a) {
        var b = $('<div class="experience-editor-experience-targeting-mode experienceEditor" style="display: none;" tabindex="0"></div>').appendTo(a);
        this.view = new this.View({
            el: b,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    registerVars: function() {
        var a = this;
        this.superClass.registerVars.apply(this, arguments);
        this.defaultDialogButtons = [{
            label: Granite.I18n.get("Cancel"),
            click: function(b) {
                this.hide();
                a.resetBoxes();
                if(a.dialogAction === ELM.ExperienceEditorActions.INSERT_ELEMENT) {
                    a.destroySetupForInsertElementAction(a.components.insertElementInstructionsDialog.selector)
                }
            }
        }, {
            label: Granite.I18n.get("Save"),
            className: "primary",
            click: function(b) {
                a.dialogSave();
                b.dialog.hide()
            }.bind(this)
        }]
    },
    cacheSelectors: function() {
        this.superClass.cacheSelectors.apply(this, arguments);
        this.$moveDialog = this.view.$("#moveDialogContainer");
        this.$resizeDialog = this.view.$("#resizeDialogContainer");
        this.$rearrangeDialog = this.view.$("#rearrangeDialogContainer");
        this.$insertElementDialog = this.view.$("#insert-element-dialog-container")
    },
    registerGlobalTriggers: function() {
        F.on("Experience-Targeting:content-picker:closed", this.handleContentPickerClosed);
        F.on("Experience-Targeting:content:selected", this.handleContentSelected)
    },
    unregisterGlobalTriggers: function() {
        F.off("Experience-Targeting:content-picker:closed", this.handleContentPickerClosed);
        F.off("Experience-Targeting:content:selected", this.handleContentSelected)
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleScroll);
        this.bind(this.resetHoverBox);
        this.bind(this.resetSelectedBox);
        this.bind(this.resetSelection);
        this.bind(this.handleThumbnailGenerate);
        this.bind(this.startHostLoadingProgress);
        this.bind(this.stopHostLoadingProgress);
        this.bind(this.handleHostLoadTimeout);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleKeyBoardEvents);
        this.bind(this.setupRearrange);
        this.bind(this.setupMove);
        this.bind(this.setupResize);
        this.bind(this.setupInsertElement);
        this.bind(this.saveJsonAndDestroyRearrangeSetup);
        this.bind(this.cancelRearrangeOperation);
        this.bind(this.saveJsonAndDestroyMoveSetup);
        this.bind(this.cancelMoveOperation);
        this.bind(this.moveElementInMoveMode);
        this.bind(this.cancelResizeOperation);
        this.bind(this.saveJsonAndDestroyResizeSetup);
        this.bind(this.resizeElementInResizeMode);
        this.bind(this.handleExperienceEditorClose);
        this.bind(this.handleExperiencesSave);
        this.bind(this.removeKeyboardListeners);
        this.bind(this.undoAction);
        this.bind(this.redoAction);
        this.bind(this.deleteExperienceHandler);
        this.bind(this.duplicateExperienceHandler);
        this.bind(this.renameExperienceHandler);
        this.bind(this.handleUrlChange);
        this.bind(this.handleContentSelected);
        this.bind(this.handleContentPickerClosed);
        this.bind(this.updateButtonColor);
        this.bind(this.highlightObjects);
        this.bind(this.hideOverlayPopover);
        this.bind(this.redirectToURLHandler);
        this.bind(this.updateRedirectOffer);
        this.bind(this.saveRedirectOffer);
        this.bind(this.showDeleteConfirmationDialog);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.handleUnsavedDialogClose)
    },
    addSubComponents: function() {
        this.superClass.addSubComponents.apply(this, arguments);
        this.addExperienceEditorToolbar();
        this.addExperienceEditorNavPopover();
        this.addRearrangeInstructionsDialog();
        this.addMoveInstructionsDialog();
        this.addResizeInstructionsDialog();
        this.addExperienceEditorActionMenu();
        this.addInsertElementInstructionDialog();
        this.addInsertElement();
        this.addExperienceEditorActionMenu();
        this.addExperienceDeleteConfirmationDialog();
        this.addRedirectToUrlComponent()
    },
    addInsertElement: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorInsertElement({
            visible: true,
            instructionsDialog: this.components.insertElementInstructionsDialog,
            cdq: this.cdq
        }))
    },
    addRearrangeInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.RearrangeInstructionsDialog({
            el: this.$rearrangeDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.RearrangeInstructionsDialog
        })).on("rearrange:complete", this.saveJsonAndDestroyRearrangeSetup).on("rearrange:cancel", this.cancelRearrangeOperation)
    },
    addInsertElementInstructionDialog: function() {
        this.addComponent(new ELM.Activities.InsertElementInstructionsDialog({
            el: this.$insertElementDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.InsertElementInstructionsDialog
        })).on("insert-element:cancel", this.destroySetupForInsertElementAction.bind(this))
    },
    addMoveInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.MoveInstructionsDialog({
            el: this.$moveDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.MoveInstructionsDialog
        })).on("move:complete", this.saveJsonAndDestroyMoveSetup).on("move:cancel", this.cancelMoveOperation).on("coordinates:changed", this.moveElementInMoveMode)
    },
    addResizeInstructionsDialog: function() {
        this.addComponent(new ELM.Activities.ResizeInstructionsDialog({
            el: this.$resizeDialog,
            visible: false,
            template: ELM.Activities.Templates.ExperienceEditor.ResizeInstructionsDialog
        })).on("resize:cancel", this.cancelResizeOperation).on("resize:complete", this.saveJsonAndDestroyResizeSetup).on("dimensions:changed", this.resizeElementInResizeMode)
    },
    addExperienceEditorActionMenu: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorActionMenu({
            el: $('<div class="experienceEditorPopover width-12" />').appendTo(document.body),
            component: this
        }), "actionMenu").on("action:rearrange", this.setupRearrange).on("action:move", this.setupMove).on("action:resize", this.setupResize).on("action:insert-element", this.setupInsertElement)
    },
    addActionHandlerDialog: function() {
        this.dialog = new CUI.Modal({
            element: $('<div class="actionHandlerDialog" />').appendTo(document.body),
            visible: false,
            heading: "",
            content: "",
            buttons: this.defaultDialogButtons
        })
    },
    addExperienceDeleteConfirmationDialog: function() {
        var a = this;
        this.confirmDeleteModal = new CUI.Modal({
            heading: Granite.I18n.get("Confirm Delete"),
            type: "notice",
            element: $('<div class="delete-experience-modal"></div>').appendTo(document.body),
            visible: false,
            content: "",
            buttons: [{
                label: Granite.I18n.get("Cancel"),
                click: "hide"
            }, {
                label: Granite.I18n.get("Delete"),
                className: "primary",
                click: function() {
                    a.deleteExperience(a.getCurrentExperienceIndex());
                    this.hide()
                }
            }]
        })
    },
    addRedirectToUrlComponent: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.RedirectToUrl({
            el: this.view.$(".redirect-to-url-dialog")
        }), "redirectToUrlDialog").on("Experience-Targeting:update-redirect-offer", this.saveRedirectOffer)
    },
    showExperienceEditor: function(a) {
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.setMode(this.modes.experienceTargeting);
        this.load(a.model);
        this.clearExperiences();
        this.addCdqClientListeners();
        this.setExperiences(a.experiences);
        this.setActivityUrl(a.url);
        this.updateExperiencesData(this.getExperiences());
        if(!this.isSetup) {
            this.setup(a)
        }
        if(typeof a.index != "undefined") {
            this.setCurrentExperienceIndex(a.index)
        }
        this.show();
        if(!this.getExperiencesLength()) {
            this.hideFrame();
            this.handleAddressBarNavigation(false)
        }
        this.renderExperienceTabs();
        this.toolbar.setActivityNameOnToolbar(this.model.getTitle());
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.resetHostSite(true);
        this.addKeyboardListeners()
    },
    setup: function(a) {
        var b = a.url || ELM.defaultSimulatorUrl;
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.setPath([]);
        this.setCurrentExperienceIndex(-1);
        this.setControlString(" [Control]");
        this.useDefaultThumbnailSrc();
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.setLastExperienceIndex(-1);
        this.superClass.setup.apply(this, arguments);
        if(this.getActivityUrl()) {
            this.frame.src = this.getProxiedUrl({
                url: this.getActivityUrl()
            })
        } else {
            if(b) {
                this.setActivityUrl(b);
                this.setFrameSrc(this.getProxiedUrl({
                    url: this.getActivityUrl()
                }))
            }
        }
        this.addActionHandlerDialog();
        this.actionMenuPopover = this.components.actionMenu.popover
    },
    updateEditorMode: function() {
        if(this.isETEditMode()) {
            this.switchToEditModeForABandXT()
        }
        if(this.isInteractMode()) {
            this.showInteractToolbar();
            this.hideExperiencesTabs();
            this.switchToInteractMode()
        }
    },
    renderExperienceTabs: function() {
        var e = this.view.$el.find(".tabs nav.experiences").removeClass("left"),
            d = this.getExperiences(),
            b = this.getCurrentExperienceIndex(),
            a = 0,
            c = this.getExperienceByIndex(b)["jcr:title"] || this.generateExperienceName(b + 1);
        _.each(this.getExperiences(), function(f) {
            if(f["ref:audiences"] && f["ref:audiences"].length > 0) {
                a++
            }
        });
        if(a <= 1) {
            this.$popover.find(".deleteExperience").hide()
        } else {
            this.$popover.find(".deleteExperience").show()
        }
        e.html(ELM.Activities.Templates.ExperienceTargetingTab({
            activeIndex: b,
            experiences: d,
            experienceName: c,
            elmReferences: this.model.get("elm:references")
        }));
        this.view.$(".targeted-audience-list").select()
    },
    hideActionMenu: function() {
        this.actionMenuPopover.hide()
    },
    actionMenuAdjustPosition: function(a) {
        this.components.actionMenu.adjustPosition(a)
    },
    handleContentPickerClosed: function(a) {
        if(a.requestAction == ELM.ExperienceEditorActions.INSERT_ELEMENT) {
            this.destroySetupForInsertElementAction(this.components.insertElementInstructionsDialog.selector)
        }
        this.resetBoxes()
    },
    showExperienceForSelectedAudience: function(b) {
        var c = $(b.currentTarget).find(":selected"),
            a = parseInt(c.attr("data-index"));
        this.switchExperience(a, false);
        this.renderExperienceTabs()
    },
    renameExperienceHandler: function(b) {
        var a = this.view.$el.find("nav.experiences");
        a.addClass("editing").find(".experienceName").hide().end().find(".experienceNameInput").show().focus();
        this.navPopover.hideExperienceNavPopover()
    },
    getControlString: function() {
        return ""
    },
    updateEqualSplitValues: function(a) {},
    showDeleteConfirmationDialog: function() {
        var c = this.getCurExperience(),
            b = '{{i18n "<strong>{0}</strong> will be deleted and can not be recovered" "' + c["jcr:title"] + '" html=true}}',
            a = Handlebars.compile(b);
        this.confirmDeleteModal.set({
            content: a()
        }).show()
    },
    addExperienceEditorNavPopover: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorNavPopover({
            el: this.$popover,
            template: ELM.Activities.Templates.ExperienceEditor.ETNavPopover,
            visible: false
        }), "navPopover").on("ExperienceEditorNavPopover:experienceDeletion", this.showDeleteConfirmationDialog).on("ExperienceEditorNavPopover:experienceRename", this.renameExperienceHandler).on("ExperienceEditorNavPopover:redirectToURL", this.redirectToURLHandler)
    },
    clearExperiences: function() {
        var b = this.getExperiences(),
            a = [];
        _.each(b, function(c) {
            var d = this.newExperienceJson();
            c = _.extend(c, d);
            delete c.redirect;
            a.push(c)
        }, this);
        this.setExperiences(a)
    },
    changeControlUrl: function(a) {
        this.clearExperiences();
        this.setBuildModeUrl(a);
        this.setActivityUrl(a);
        this.reloadHost();
        this.renderExperienceTabs()
    },
    isETEditMode: function() {
        return this.getMode() === this.modes.experienceTargeting
    }
});
ELM.Activities.ExperienceEditor.ClickTrackMode = new Class({
    toString: "ExperienceEditorClickTrackMode",
    extend: ELM.Activities.ExperienceEditor,
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.cacheSelectors();
        this.addSubComponents()
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleScroll);
        this.bind(this.toggleElement);
        this.bind(this.handleExperienceEditorClose);
        this.bind(this.handleExperiencesSave);
        this.bind(this.updateButtonColor);
        this.bind(this.highlightObjects);
        this.bind(this.hideOverlayPopover);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.handleUnsavedDialogClose)
    },
    registerVars: function() {
        this.superClass.registerVars.apply(this, arguments)
    },
    registerGlobalTriggers: function() {},
    cacheSelectors: function() {
        this.superClass.cacheSelectors.apply(this, arguments)
    },
    addSubComponents: function() {
        this.superClass.addSubComponents.apply(this, arguments);
        this.addExperienceEditorToolbar();
        this.addExperienceEditorNavPopover()
    },
    initView: function(a) {
        var b = $('<div class="experienceEditorClickTrackMode experienceEditor" style="display: none;" tabindex="0"></div>').appendTo(a);
        this.view = new this.View({
            el: b,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    showExperienceEditor: function(a) {
        var b = a.name;
        this.setMode(this.modes.clicktrack);
        this.setClickedElements(a.clickedElements);
        this.setMetricComponent(a.metricComponent);
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.load(a.model);
        this.clearExperiences();
        this.addCdqClientListeners();
        this.setExperiences(a.experiences);
        this.setActivityUrl(a.url);
        this.updateExperiencesData(this.getExperiences());
        if(!this.isSetup) {
            this.setup(a)
        }
        if(b) {
            this.setSpecificExperience(this.getExperiences(), b)
        }
        this.show();
        if(this.model.getActivityUrl() && this.getExperiencesLength()) {
            this.setCurrentExperienceIndex(this.getExperiencesLength() - 1);
            this.resetHostSite(true);
            this.renderExperienceTabs()
        } else {
            this.hideFrame();
            this.handleAddressBarNavigation(false);
            this.showErrorNotification(this.messages.emptyControlUrl)
        }
        this.toolbar.setActivityNameOnToolbar(this.model.getTitle());
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.updateEditorMode()
    },
    setup: function(a) {
        var b = a.url || ELM.defaultSimulatorUrl;
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.setCurrentExperienceIndex(-1);
        this.setControlString(" [Control]");
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.setLastExperienceIndex(-1);
        this.superClass.setup.apply(this, arguments);
        if(this.experiences.length) {
            this.frame.src = this.getProxiedUrl({
                url: this.getActivityUrl()
            })
        } else {
            if(b) {
                this.setFrameSrc(this.getProxiedUrl({
                    url: b
                }));
                this.setActivityUrl(this.getActivityUrl())
            }
        }
    },
    renderExperienceTabs: function() {
        this.hideGearButton = true;
        this.superClass.renderExperienceTabs.apply(this, arguments)
    },
    changeControlUrl: function(a) {
        this.setClickedElements([]);
        this.setBuildModeUrl(a);
        this.setActivityUrl(a)
    },
    updateEditorMode: function() {
        if(this.isClickTrackMode()) {
            this.switchToClickTrackMode()
        }
        if(this.isInteractMode()) {
            this.showInteractToolbar();
            this.hideExperiencesTabs();
            this.switchToInteractMode()
        }
    }
});
ELM.Activities.ExperienceEditor.ETClickTrackMode = new Class({
    toString: "ExperienceTargetingClickTrackMode",
    extend: ELM.Activities.ExperienceEditor,
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.cacheSelectors();
        this.addSubComponents()
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleScroll);
        this.bind(this.toggleElement);
        this.bind(this.handleExperienceEditorClose);
        this.bind(this.handleExperiencesSave);
        this.bind(this.updateButtonColor);
        this.bind(this.hideOverlayPopover);
        this.bind(this.highlightObjects);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.handleUnsavedDialogClose)
    },
    registerVars: function() {
        this.superClass.registerVars.apply(this, arguments)
    },
    registerGlobalTriggers: function() {},
    cacheSelectors: function() {
        this.superClass.cacheSelectors.apply(this, arguments)
    },
    addSubComponents: function() {
        this.superClass.addSubComponents.apply(this, arguments);
        this.addExperienceEditorToolbar();
        this.addExperienceEditorNavPopover()
    },
    initView: function(a) {
        var b = $('<div class="experienceEditor-ET-ClickTrackMode experienceEditor" style="display: none;" tabindex="0"></div>').appendTo(a);
        this.view = new this.View({
            el: b,
            component: this,
            template: ELM.Activities.Templates.ExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    showExperienceEditor: function(a) {
        var b = a.name,
            c = -1;
        this.setMode(this.modes.clicktrack);
        this.setClickedElements(a.clickedElements);
        this.setMetricComponent(a.metricComponent);
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.load(a.model);
        this.clearExperiences();
        this.addCdqClientListeners();
        this.setExperiences(a.experiences);
        this.setActivityUrl(a.url);
        this.updateExperiencesData(this.getExperiences());
        if(!this.isSetup) {
            this.setup(a)
        }
        if(b) {
            this.setSpecificExperience(this.getExperiences(), b)
        }
        this.show();
        _.each(this.getExperiences(), function(e, d) {
            if(e["ref:audiences"] && e["ref:audiences"].length > 0) {
                c = d
            }
        });
        if(this.model.getActivityUrl() && c != -1) {
            this.setCurrentExperienceIndex(c);
            this.resetHostSite(true);
            this.renderExperienceTabs()
        } else {
            this.hideFrame();
            this.handleAddressBarNavigation(false);
            this.showErrorNotification(this.messages.emptyControlUrl)
        }
        this.toolbar.setActivityNameOnToolbar(this.model.getTitle());
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.updateEditorMode()
    },
    setup: function(a) {
        var b = a.url || ELM.defaultSimulatorUrl;
        this.setOffsetTop(this.view.$el.find(".content-container").offset().top);
        this.setCurrentExperienceIndex(-1);
        this.setControlString("");
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.setLastExperienceIndex(-1);
        this.superClass.setup.apply(this, arguments);
        if(this.getActivityUrl()) {
            this.frame.src = this.getProxiedUrl({
                url: this.getActivityUrl()
            })
        } else {
            if(b) {
                this.setActivityUrl(b);
                this.setFrameSrc(this.getProxiedUrl({
                    url: this.getActivityUrl()
                }))
            }
        }
    },
    renderExperienceTabs: function() {
        var d = this.view.$el.find(".tabs nav.experiences"),
            c = this.getExperiences(),
            a = this.getCurrentExperienceIndex(),
            b = this.getExperienceByIndex(a)["jcr:title"] || this.generateExperienceName(a + 1);
        d.html(ELM.Activities.Templates.ExperienceTargetingTab({
            activeIndex: a,
            experiences: c,
            experienceName: b,
            elmReferences: this.model.get("elm:references"),
            hidePopoverIcon: true
        }));
        this.view.$(".targeted-audience-list").select()
    },
    updateEditorMode: function() {
        if(this.isClickTrackMode()) {
            this.switchToClickTrackMode()
        }
        if(this.isInteractMode()) {
            this.showInteractToolbar();
            this.hideExperiencesTabs();
            this.switchToInteractMode()
        }
    },
    showExperienceForSelectedAudience: function(b) {
        var c = $(b.currentTarget).find(":selected"),
            a = parseInt(c.attr("data-index"));
        this.switchExperience(a, false);
        this.renderExperienceTabs()
    }
});
ELM.Activities.ExperienceEditor.RedirectToUrl = new Class({
    toString: "RedirectToUrlModal",
    extend: ELM.Activities.NewActivityDialog,
    View: F.View.extend({
        events: {
            "blur .redirect-dialog-url": "addProtocolToUrl",
            "keyup #redirectUrl": "handleFieldChange",
            "change #redirectUrl": "handleFieldChange",
            "click .primary": "saveRedirectOffer",
            "click .toggle-query-parameters": "toggleQueryParameters"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerTriggers();
        this.registerListeners();
        this.render()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.ExperienceEditor.RedirectURLModal
        })
    },
    registerBinders: function() {
        this.bind(this.showModal);
        this.bind(this.handleFieldChange);
        this.bind(this.addProtocolToUrl)
    },
    registerTriggers: function() {
        this.on("show:redirect-url-dialog", this.showModal)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete.bind(this))
    },
    cacheSelectors: function() {
        this.$urlInput = this.view.$("#redirectUrl");
        this.$saveButton = this.view.$(".primary");
        this.$queryParamCheckbox = this.view.$(".toggle-query-parameters");
        this.$errorAlert = this.view.$(".redirect-url-error")
    },
    handleRenderComplete: function() {
        var a = this.view.$el;
        this.cacheSelectors();
        a.modal("hide");
        this.modal = a.data("modal")
    },
    showModal: function(b) {
        var a = b.redirectOffer;
        this.redirectOffer = a;
        this.activityUrl = b.activityUrl;
        this.modal.show();
        this.$urlInput.removeClass("error");
        this.$errorAlert.addClass("display-none");
        this.setUrlInputValue(a.url || "");
        this.$queryParamCheckbox[0].checked = a.options.includeAllUrlParameters
    },
    handleFieldChange: function(a) {
        this.$errorAlert.addClass("display-none");
        this.inherited(arguments)
    },
    saveRedirectOffer: function(a) {
        var d = this.getUrlInputValue(),
            c, e, b;
        if(!this.isUrlValid()) {
            this.$urlInput.addClass("error");
            return
        }
        if(d.replace("www.", "") === this.activityUrl.replace("www.", "")) {
            this.$urlInput.addClass("error");
            this.$errorAlert.removeClass("display-none");
            return
        }
        c = document.createElement("a");
        c.href = this.activityUrl;
        e = c.hostname.replace("www.", "");
        c.href = d;
        b = c.hostname.replace("www.", "");
        this.modal.hide();
        this.redirectOffer.url = d;
        this.redirectOffer.options.passMboxSession = (e !== b);
        this.trigger(ELM.evtNamespace + ":update-redirect-offer", this.redirectOffer)
    },
    toggleQueryParameters: function(a) {
        this.redirectOffer.options.includeAllUrlParameters = a.target.checked
    }
});
ELM.Models.Offer = Backbone.Model.extend({
    getTitle: function() {
        return this.get("jcr:title")
    },
    setTitle: function(a) {
        return this.set("jcr:title", a, {
            validate: true,
            key: "jcr:title"
        })
    },
    getContent: function() {
        return this.get("content")
    },
    setContent: function(a) {
        return this.set("content", a, {
            validate: true,
            key: "content"
        })
    },
    isDefault: function() {
        return this.get("isDefault")
    },
    setDefault: function(a) {
        return this.set("isDefault", a)
    },
    isAnonymous: function() {
        return this.get("isAnonymous")
    },
    setAnonymous: function(a) {
        return this.set("isAnonymous", a)
    },
    getPath: function() {
        return this.get("ref:offer")
    },
    isIncluded: function() {
        return this.get("included")
    },
    setIncluded: function(a) {
        return this.set("included", a)
    },
    validate: function(c, b) {
        var a = b && b.key;
        if(_.isEmpty(c)) {
            c = this.attributes
        }
        if(!a || a === "jcr:title") {
            if(c["jcr:title"] === "") {
                return {
                    id: this.cid,
                    field: "jcr:title",
                    message: Granite.I18n.get("Name cannot be empty.")
                }
            }
        }
        if(!a || a === "content") {
            if(c.content === "") {
                return {
                    id: this.cid,
                    field: "content",
                    message: Granite.I18n.get("Content cannot be empty.")
                }
            }
        }
        return null
    },
    triggerError: function(a) {
        this.trigger("error", a)
    },
    triggerFocus: function(a) {
        this.trigger("focus:error", a)
    },
    unsetTroubledFields: function() {
        if(this.validationError && this.validationError.field) {
            this.unset(this.validationError.field, {
                silent: true
            })
        }
    },
    defaults: {
        "jcr:title": "",
        content: "",
        isAnonymous: true
    }
});
ELM.Collections.OfferList = Backbone.Collection.extend({
    model: ELM.Models.Offer,
    getDAMOffersJSON: function() {
        return _.map(this.getDAMOffers(), function(a) {
            return a.toJSON()
        })
    },
    getDAMOffers: function() {
        return _.map(this.where({
            isAnonymous: false
        }), function(a) {
            return a
        })
    },
    _removeDAMOffers: function() {
        var a = this.getDAMOffers();
        _.each(a, function(b) {
            b.destroy()
        })
    },
    getDefaultOffer: function() {
        return this.models[0]
    },
    hasOnlyDefaultOffer: function() {
        var a;
        var b = this.models.length;
        if(b !== 1) {
            return false
        }
        a = this.models[0];
        return(a.isDefault && a.isDefault())
    },
    checkUniqueness: function(b) {
        var a = _.filter(b.collection.models, function(e) {
            return e.cid !== b.cid
        });
        var c = _.any(a, function(e) {
            return e.getTitle() === b.getTitle()
        });
        if(c) {
            var d = {
                id: b.cid,
                field: "jcr:title",
                message: Granite.I18n.get("Name is not unique.")
            };
            b.trigger("error", d);
            return false
        }
        return true
    },
    getAllButDefaultContentModels: function() {
        return this.slice(1)
    },
    validate: function() {
        var b = true,
            d, c, a = this.getAllButDefaultContentModels();
        _.each(a, function(e) {
            var f = e.validate();
            if(f) {
                c = f;
                e.triggerError(f);
                d = e;
                b = false
            }
        });
        if(d && c) {
            d.triggerFocus(c)
        }
        return b
    }
});
ELM.Activities.ExperienceEditor.OfferView = Backbone.View.extend({
    tagName: "li",
    template: function() {
        return ELM.Activities.Templates.Offer.apply(this, arguments)
    },
    events: {
        "change .offer": "updateOffer",
        'click input[name="include"]': "includeOffer",
        "click .icon-delete": "removeOffer"
    },
    initialize: function() {
        this.listenTo(this.model, "destroy", this.remove);
        this.listenTo(this.model, "error", function(a) {
            this.addErrorMarkup(a)
        });
        this.listenTo(this.model, "valid:title", this.clearTitleErrors);
        this.listenTo(this.model, "focus:error", this.focusOnError);
        this.listenTo(this.model, "update", this.update);
        this.$el.attr("data-id", this.model.cid)
    },
    clearFieldFromError: function(a) {
        a.removeClass("error")
    },
    clearTitleErrors: function() {
        var a = this.$el.find(".offer-title.error");
        this.clearFieldFromError(a)
    },
    updateOffer: function(b) {
        var a = b.currentTarget,
            c = $(a),
            d = $.trim(c.val());
        this.clearFieldFromError(c);
        if(c.hasClass("offer-title")) {
            this.model.setTitle(d)
        } else {
            if(c.hasClass("offer-content")) {
                this.model.setContent(d)
            } else {
                throw "not a valid input " + b.currentTarget
            }
        }
        if(this.model.validationError) {
            this.model.unsetTroubledFields();
            this.addErrorMarkup(this.model.validationError)
        }
    },
    addErrorMarkup: function(a) {
        if(!a || !a.field) {
            throw new Error("OfferView: invalid error format.")
        }
        this._getField(a.field).addClass("error")
    },
    focusOnError: function(a) {
        if(!a || !a.field) {
            throw new Error("OfferView: cannot focus on error.")
        }
        this._getField(a.field).focus()
    },
    update: function(a) {
        if(a) {
            this._getField(a).val(this.model.get(a))
        }
    },
    _getField: function(a) {
        return this.$el.find('[name="' + a + '"]')
    },
    render: function() {
        this.$el.empty().append(this.template(this.model.toJSON()));
        return this
    },
    includeOffer: function(a) {
        this.model.setIncluded(a.currentTarget.checked)
    },
    removeOffer: function() {
        this.model.destroy();
        return this
    }
});
ELM.Activities.ExperienceEditor.TextOffersView = Backbone.View.extend({
    toString: "TextOffersView",
    template: function() {
        return ELM.Activities.Templates.TextOfferIndex.apply(this, arguments)
    },
    count: 0,
    defaultOfferName: Granite.I18n.get("Text Offer "),
    useDefaultContent: false,
    events: {
        "click .icon-add": "addEmptyOffer"
    },
    initialize: function() {
        this.Collection = new ELM.Collections.OfferList();
        this.listenTo(this.Collection, "add", this.addOne);
        this.listenTo(this.Collection, "reset", this.addAll);
        this.$el.html(this.template());
        this.$offersPlaceholder = this.$el.find("ul.offers");
        this._onInitialize()
    },
    _onInitialize: function() {},
    resetView: function() {
        this.$offersPlaceholder.empty();
        this._onResetView()
    },
    _onResetView: function() {},
    addOne: function(b) {
        var a = new ELM.Activities.ExperienceEditor.OfferView({
            model: b
        });
        var c = this;
        this.$offersPlaceholder.prepend(a.render().el);
        b.on("change", function(e, d) {
            c.triggerChangeEvent({
                id: e.cid,
                field: d.key
            });
            c.validateModel(e, d)
        }).on("invalid", function(e, d) {
            c.triggerErrorMessage(d)
        }).on("error", function(d) {
            c.triggerErrorMessage(d)
        }).on("remove", function() {
            c.triggerChangeEvent({
                id: b.cid
            });
            c.cleanFromDuplicates()
        });
        this._onAddOne(b)
    },
    _onAddOne: function() {},
    setOffers: function(a) {
        this.resetView();
        _.each(a, function(b) {
            delete b.id
        });
        this.Collection.reset(a);
        this.count = this._getStartCount(a);
        this._onSetOffers()
    },
    _onSetOffers: function() {
        if(this.Collection.hasOnlyDefaultOffer()) {
            this.addEmptyOffer()
        }
    },
    _getStartCount: function(c) {
        var b;
        var d = new ELM.Strategy.IndexedName(this.defaultOfferName);
        var a = _.map(c, function(e) {
            return e["jcr:title"]
        });
        b = d.getLastUsedIndex(a);
        return b + 1
    },
    getOffers: function() {
        return this.Collection
    },
    addEmptyOffer: function() {
        var a = new this.Collection.model({
            "jcr:title": this.defaultOfferName + this.count,
            content: this.useDefaultContent && this.Collection.getDefaultOffer().getContent() || ""
        });
        this.Collection.add(a);
        this._checkIfOffersAreEnough();
        this.Collection.checkUniqueness(a);
        this.count += 1
    },
    addAll: function() {
        this.Collection.each(this.addOne, this);
        this._onAddAll()
    },
    _onAddAll: function() {},
    validateModel: function(a, b) {
        if(b.key === "jcr:title" && !this.Collection.checkUniqueness(a)) {
            return
        }
        this.cleanFromDuplicates()
    },
    cleanFromDuplicates: function() {
        var b = this;
        var d = this.$offersPlaceholder.find('[name="jcr:title"].error');
        var a = _.map(d, function(e) {
            return e.value
        });
        var c = _.groupBy(this.Collection.models, function(e) {
            return e.getTitle()
        });
        _.each(a, function(e) {
            var f = c[e];
            if(f && f.length === 1) {
                f[0].trigger("valid:title");
                b.triggerChangeEvent({
                    id: f[0].cid,
                    field: "jcr:title"
                })
            }
        })
    },
    containsErrors: function() {
        return this.$offersPlaceholder.find(".error").size() !== 0
    },
    triggerErrorMessage: function(a) {
        this.trigger("error", a)
    },
    triggerChangeEvent: function(a) {
        this.trigger("changed", a)
    },
    _checkIfOffersAreEnough: function() {
        var b;
        var a = {
            id: "collection",
            field: ""
        };
        b = this.Collection.length > 1;
        if(!b) {
            a.message = Granite.I18n.get("You must create at least one new offer in order to save a location.");
            this.triggerErrorMessage(a)
        } else {
            this.triggerChangeEvent(a)
        }
        return b
    },
    isValid: function() {
        return this.Collection.validate() && !this.containsErrors() && this._checkIfOffersAreEnough()
    }
});
"use strict";
ELM.Activities.ExperienceEditor.HTMLOffersView = ELM.Activities.ExperienceEditor.TextOffersView.extend({
    toString: "HTMLOffersView",
    template: function() {
        return ELM.Activities.Templates.HTMLOfferIndex.apply(this, arguments)
    },
    defaultOfferName: Granite.I18n.get("HTML Offer "),
    useDefaultContent: true,
    events: {
        "click .icon-open": "openHtmlContentPicker"
    },
    offerSelectorTemplate: Handlebars.compile('<button type="button">Select</button><select></select>'),
    offerOptionTemplate: Handlebars.compile('<option value="{{offer.cid}}">{{offer.attributes.[jcr:title]}}</option>'),
    _onInitialize: function() {
        _.extend(this.events, ELM.Activities.ExperienceEditor.TextOffersView.prototype.events);
        this.$el.find(".offer-selector").html(this.offerSelectorTemplate());
        this.$offerSelector = this.$el.find("select")
    },
    _onSetOffers: function() {},
    _onResetView: function() {
        this.$offerSelector.empty()
    },
    _onAddAll: function() {
        var a = this;
        var b = this.Collection.models;
        this.$el.find("select").on("change", function(c) {
            var d = c.currentTarget.value;
            a._setActive(d)
        });
        a._setActive(b[b.length - 1].cid);
        new CUI.Select({
            element: this.$el.find(".offer-selector"),
            nativewidget: true
        })
    },
    _onAddOne: function(b) {
        var a = this.offerOptionTemplate({
            offer: b
        });
        this.$offerSelector.prepend(a);
        var c = this;
        b.on("destroy", function() {
            c.$offerSelector.find('option[value="' + b.cid + '"]').remove();
            c._selectPreviousModel(b)
        }).on("change", function(d) {
            c.$offerSelector.find('option[value="' + d.cid + '"]').text(d.getTitle());
            c.$el.find(".offer-selector button").text(d.getTitle())
        }).on("error", function() {
            c._setActive(b.cid)
        });
        this.Collection.checkUniqueness(b);
        if(!this.containsErrors()) {
            c._setActive(b.cid)
        }
    },
    _selectPreviousModel: function(c) {
        var b;
        var a = null;
        if(this.Collection) {
            a = this.Collection.indexOf(c) - 1
        }
        if(a < 0) {
            throw "index is negative, meaning default offer is deletable"
        }
        b = this.Collection.at(a);
        this._setActive(b.cid)
    },
    _setActive: function(c) {
        var a, b = this.$offersPlaceholder.find(".active");
        if(b.data("id") === c) {
            return
        }
        a = this.$offersPlaceholder.find('li[data-id="' + c + '"]');
        b.removeClass("active");
        a.addClass("active");
        this.$offerSelector.val(c).trigger("change.select")
    },
    openHtmlContentPicker: function() {
        this.trigger("openHtmlContentPicker", this.Collection.getDAMOffersJSON())
    },
    addDAMOffers: function(d) {
        var c = this;
        var b = [];
        var a = [];
        this.Collection._removeDAMOffers();
        _.each(d, function(e) {
            if(e.content) {
                b.push(e)
            } else {
                a.push(e)
            }
        });
        if(b.length) {
            this.Collection.add(b)
        }
        _.each(a, function(f) {
            var e = new c.Collection.model(f);
            c.Collection.add(e);
            c._checkIfOffersAreEnough();
            c.count += 1;
            c.loadDAMOfferContent(e)
        });
        this._checkIfOffersAreEnough()
    },
    loadDAMOfferContent: function(a) {
        ELM.Util.sendGETRequest({
            url: a.getPath(),
            async: false
        }).done(function(b) {
            a.setContent(b || "");
            a.trigger("update", "content")
        })
    }
});
ELM.Activities.ExperienceEditor.OffersDialog = new Class({
    toString: "OffersDialog",
    extend: F.Component,
    title: Granite.I18n.get("A Title"),
    View: F.View.extend({
        events: {
            "click .primary": "triggerApplyEvent"
        },
        template: Handlebars.compile('<div class="modal-header"><h2>{{title}}</h2></div><div class="modal-body padding-0-imp"></div><div class="modal-footer"><button data-dismiss="modal">{{i18n "Cancel"}}</button><button class="primary">{{i18n "Apply"}}</button></div>')
    }),
    dialogTmpl: '<div class="modal"/>',
    construct: function() {
        this.view = new this.View({
            el: $(this.dialogTmpl).appendTo(document.body),
            component: this
        });
        this.render()
    },
    render: function() {
        this.view.$el.html(this.view.template({
            title: this.title
        }));
        this.$primaryButton = this.view.$el.find(".primary")
    },
    showDialog: function() {
        this.view.$el.modal().data("modal").show()
    },
    hideDialog: function() {
        this.view.$el.modal().data("modal").hide()
    },
    disablePrimaryButton: function() {
        this.$primaryButton.attr("disabled", "disabled")
    },
    enablePrimaryButton: function() {
        this.$primaryButton.removeAttr("disabled")
    },
    triggerApplyEvent: function() {
        this.trigger("apply")
    }
});
ELM.Activities.ExperienceEditor.TextOffersDialog = new Class({
    toString: "TextOffersDialog",
    title: Granite.I18n.get("Change Text"),
    extend: ELM.Activities.ExperienceEditor.OffersDialog,
    dialogTmpl: '<div class="modal change-text-dialog"/>'
});
ELM.Activities.ExperienceEditor.HTMLOffersDialog = new Class({
    toString: "HTMLOffersDialog",
    title: Granite.I18n.get("Change HTML"),
    extend: ELM.Activities.ExperienceEditor.OffersDialog,
    dialogTmpl: '<div class="modal change-html-dialog"/>'
});
ELM.Activities.ExperienceEditor.OfferErrorsView = Backbone.View.extend({
    template: Handlebars.compile('<strong>{{i18n "ERROR"}}</strong><div>{{#each errors}}{{this}}{{/each}}</div>'),
    initialize: function() {
        this.$el.hide()
    },
    errors: [],
    _getId: function(a) {
        var b = a.id + "-" + (a.field ? a.field : "");
        return b
    },
    _getFilteredErrors: function(d) {
        var c = this;
        var b = this._getId(d);
        var e = function(f, g) {
            return f !== g
        };
        if(_.isUndefined(d.field)) {
            e = function(f, g) {
                return f.indexOf(g) !== 0
            }
        }
        var a = _.filter(this.errors, function(f) {
            var g = c._getId(f);
            return e(g, b)
        });
        return a
    },
    showError: function(a) {
        if(_.isUndefined(a.id) || _.isUndefined(a.field)) {
            throw new Error("Mandatory fields are missing (id, field).")
        }
        this.errors = [a].concat(this._getFilteredErrors(a));
        this.renderError();
        this.$el.show()
    },
    renderError: function() {
        var a;
        var b = this.$el.find(".alert");
        a = this.errors[0];
        b.html(this.template({
            errors: [a.message]
        }))
    },
    hasError: function(b) {
        var c = this._getId(b),
            d = this;
        var a = _.find(this.errors, function(e) {
            return d._getId(e).indexOf(c) !== -1
        });
        return typeof a !== "undefined"
    },
    hasErrors: function() {
        return this.errors.length !== 0
    },
    hideError: function(a) {
        if(!this.hasError(a)) {
            return
        }
        this.errors = this._getFilteredErrors(a);
        if(this.hasErrors()) {
            this.renderError()
        } else {
            this.hide()
        }
    },
    clearErrors: function() {
        this.errors = [];
        return this
    },
    hide: function() {
        this.$el.hide().find(".alert").empty()
    }
});
ELM.Activities.ExperienceEditor.TextOffers = new Class({
    toString: "TextOffers",
    extend: F.Component,
    OffersView: ELM.Activities.ExperienceEditor.TextOffersView,
    OffersDialog: ELM.Activities.ExperienceEditor.TextOffersDialog,
    construct: function() {
        var e = this;
        var d, c;
        var a = this.addComponent(new this.OffersDialog(), "dialog");
        var b = a.view.$el.find(".modal-body");
        d = new this.OffersView({
            el: b
        });
        a.on("apply", function() {
            var f = d.getOffers();
            if(d.isValid() && !c.hasErrors()) {
                e.hideDialog();
                e.trigger("done", f)
            }
        });
        c = new ELM.Activities.ExperienceEditor.OfferErrorsView({
            el: $('<div class="container-absolute width-50p margin-auto margin-l-25p pos-t-n-0-2"><div class="alert error"></div></div>').prependTo(b)
        });
        d.on("error", function(f) {
            c.showError(f)
        }).on("changed", function(f) {
            c.hideError(f);
            if(f.id === "collection") {
                a.enablePrimaryButton()
            }
        });
        this.errorView = c;
        this.textOffersView = d
    },
    showDialog: function(a) {
        this.components.dialog.showDialog();
        this.errorView.clearErrors().hide();
        this.textOffersView.setOffers(a);
        this._onShowDialog()
    },
    _onShowDialog: function() {
        if(this.textOffersView.Collection.hasOnlyDefaultOffer()) {
            this.components.dialog.disablePrimaryButton()
        }
    },
    hideDialog: function() {
        this.components.dialog.hideDialog()
    },
    remove: function() {
        this.textOffersView.remove();
        this.errorView.remove();
        this.destruct()
    }
});
ELM.Activities.ExperienceEditor.HTMLOffers = new Class({
    toString: "HTMLOffersComponent",
    extend: ELM.Activities.ExperienceEditor.TextOffers,
    OffersView: ELM.Activities.ExperienceEditor.HTMLOffersView,
    OffersDialog: ELM.Activities.ExperienceEditor.HTMLOffersDialog,
    construct: function() {
        var a = this.components.dialog;
        this.textOffersView.on("openHtmlContentPicker", function(b) {
            F.trigger(ELM.evtNamespace + ":ee:selectOffer", {
                offerType: "htmlOffer"
            }, b);
            a.hideDialog()
        })
    },
    addOffers: function(a) {
        this.textOffersView.addDAMOffers(a)
    },
    destruct: function() {
        F.off(ELM.evtNamespace + ":content:selected", this.addDAMOffers)
    }
});
ELM.Activities.ExperienceEditor.LocationNameDialog = new Class({
    toString: "LocationNameDialog",
    extend: F.Component,
    locationMaxLength: 20,
    View: F.View.extend({
        events: {
            "click .primary": "handleSaveClick",
            "keyup #location-name": "updateApplyButtonState"
        }
    }),
    construct: function() {
        this.initView();
        this.initDialog()
    },
    initView: function() {
        this.view = new this.View({
            el: $('<div class="modal rename-location-dialog"/>').appendTo(document.body),
            template: ELM.Activities.Templates.ExperienceEditor.LocationNameDialog,
            component: this
        }).render()
    },
    initDialog: function() {
        this.view.$el.modal("hide");
        this.modal = this.view.$el.data("modal");
        this.$input = this.view.$("#location-name");
        this.$errorAlert = this.view.$(".location-alert")
    },
    updateApplyButtonState: function() {
        var a = $.trim(this.$input.val());
        if(_.isEmpty(a) || this.originalName === a) {
            this._disableApplyButton()
        } else {
            this.resetError();
            this._enableApplyButton()
        }
    },
    _disableApplyButton: function() {
        this.view.$(".primary").attr("disabled", "disabled")
    },
    _enableApplyButton: function() {
        this.view.$(".primary").removeAttr("disabled")
    },
    handleSaveClick: function() {
        this.trigger("done", this.$input.val())
    },
    handleError: function(b) {
        var a = "<strong>" + Granite.I18n.get("Error") + "</strong> " + b;
        this.$errorAlert.html(a).show();
        this.$input.addClass("error");
        this._disableApplyButton()
    },
    resetError: function() {
        this.$errorAlert.hide();
        this.$input.removeClass("error")
    },
    showDialog: function(a) {
        this.originalName = a;
        this.$input.val(a);
        this.resetError();
        this.modal.show()
    },
    closeDialog: function() {
        this.modal.hide()
    }
});
ELM.Activities.Editor = new Class({
    toString: "Editor",
    extend: F.ModelComponent,
    options: {
        singly: true
    },
    View: F.View.extend({
        commonEvents: {
            "click .clickable li": "handleStepClick",
            "click .icon-back": "checkAndShowIfWarningNeeded"
        },
        additionalEvents: {},
        events: function() {
            return _.extend({}, this.commonEvents, this.additionalEvents)
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.cacheSelectors();
        this.registerVars();
        this.registerBinders();
        this.registerGlobalTriggers();
        this.registerListeners();
        this.initializeWidgets();
        this.addSubComponents();
        this.initializeMixContentWarning()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            model: {
                isProxyEnabled: this.isProxyEnabled()
            },
            el: a,
            template: this.Template
        }).render();
        this.view.render = function() {}
    },
    cacheSelectors: function() {
        this.frame = this.view.$el.find("#cdq-frame").get(0)
    },
    registerBinders: function() {
        this.bind(this.nextStep);
        this.bind(this.updateUrlSettings);
        this.bind(this.handleTemplateTestingDialogClose);
        this.bind(this.showAudiencePicker);
        this.bind(this.setScrollableHeight)
    },
    registerListeners: function() {},
    initializeMixContentWarning: function() {
        this.isMixContentDisabled = !this.isProxyEnabled();
        this.addListenerForMixContentCheck()
    },
    addListenerForMixContentCheck: function() {
        var a = this;
        $(window).on("message", function b(f) {
            var d, f = f.originalEvent,
                c = f.origin,
                g = ["http://d4isvpgrs7dwu.cloudfront.net", "http://mboxedge6.qa.tt.omtrdc.net", "http://cdn.tt.omtrdc.net"];
            if(g.indexOf(c) > -1) {
                d = JSON.parse(f.data);
                if(d.info == "httpSiteLoaded") {
                    a.isMixContentDisabled = false
                }
            }
        })
    },
    isProxyEnabled: function() {
        return !!(ELM.isProxyEnabled && ELM.isProxyEnabledInEE && ELM.proxyURL && ELM.proxyURLForImage)
    },
    show: function() {
        var a = 4000;
        this.inherited(arguments);
        this.setScrollableHeight();
        if(!this.mixContentWarningShownEarlier) {
            setTimeout(this.showWarningIfMixContentDisabled.bind(this), a)
        }
        this.showWarningForPageUnload()
    },
    showWarningForPageUnload: function() {
        var a = this;
        window.onbeforeunload = null;
        window.onbeforeunload = function() {
            if(a.isVisible() && a.isActivityChanged()) {
                return Granite.I18n.get("The page is trying to exit. To stay in Adobe Target, do not reload or leave the page.")
            }
        }
    },
    setScrollableHeight: function() {
        var a = this.view.$(".scrollable"),
            b;
        if(this.isVisible() && a.length !== 0) {
            b = window.innerHeight - a.offset().top;
            a.height(b)
        }
    },
    showWarningIfMixContentDisabled: function() {
        if(!ELM.BrowserDetector.supportsMixContent() && this.isMixContentDisabled && this.isVisible()) {
            this.showModalForMixContentWarning(ELM.BrowserDetector.browser);
            this.mixContentWarningShownEarlier = true
        }
    },
    showModalForMixContentWarning: function(b) {
        var a;
        if(this.mixContentWarningShownEarlier) {
            return false
        }
        if(!this.mixContentWarningModal) {
            this.createMixContentWarningModal()
        }
        a = {
            Firefox: function() {
                return ELM.Activities.Templates.MixContentWarningFirefox()
            },
            Chrome: function() {
                return ELM.Activities.Templates.MixContentWarningChrome()
            }
        };
        if(a[b]) {
            this.mixContentWarningModal.set({
                content: a[b]()
            }).show()
        }
    },
    createMixContentWarningModal: function() {
        this.mixContentWarningModal = new CUI.Modal({
            element: $('<div class="mixContentWarningModal"></div>').appendTo(document.body),
            visible: false,
            type: "notice",
            heading: Granite.I18n.get("Enable your browser for mixed content"),
            content: "",
            buttons: [{
                label: Granite.I18n.get("Done"),
                className: "primary",
                click: function(a) {
                    this.hide()
                }
            }]
        })
    },
    isActivityChanged: function() {
        return !this.isViewMode && this.model.isChanged(this.activityBackupAttributes, this.getCompareParams())
    },
    clearBackupActivityAttributes: function() {
        this.activityBackupAttributes = null
    },
    isStepComplete: function() {
        var a = this.components[this.steps[this.curStep].component];
        if(this.isViewMode) {
            return true
        }
        if(typeof a.onComplete === "function") {
            if(!a.onComplete()) {
                return false
            }
        }
        return true
    },
    lateSave: function() {
        if(this.isStepComplete()) {
            this.saveActivity("lateSave")
        }
    },
    getDialogButtons: function() {
        var b, a = [];
        b = {
            DONT_SAVE: {
                label: Granite.I18n.get("Don't Save"),
                click: function(c) {
                    c.dialog.hide();
                    this.navigateToPreviousPage()
                }.bind(this)
            },
            CANCEL: {
                label: Granite.I18n.get("Cancel"),
                click: function(c) {
                    c.dialog.hide()
                }.bind(this)
            },
            SAVE: {
                label: Granite.I18n.get("Save Activity"),
                className: "primary",
                click: function(c) {
                    this.unsavedDialog.$element.find(".primary").eq(0).attr("disabled", "disabled");
                    c.dialog.hide();
                    this.lateSave()
                }.bind(this)
            }
        };
        if(Backbone.history.fragment === "") {
            a.push(b.DONT_SAVE, b.SAVE)
        } else {
            a.push(b.DONT_SAVE, b.CANCEL, b.SAVE)
        }
        return a
    },
    addUnsavedDialog: function() {
        this.unsavedDialog = new CUI.Modal({
            element: $('<div class="confirmSaveDialog"></div>').appendTo(document.body),
            visible: false,
            type: "notice",
            heading: Granite.I18n.get("Unsaved changes"),
            content: "<p>" + Granite.I18n.get("Save activity?") + "</p><p>" + Granite.I18n.get("If you don't save, your changes will be lost.") + "</p>",
            buttons: this.getDialogButtons()
        })
    },
    showConfirmSaveDialog: function(a) {
        this.unsavedDialog.set({
            content: "<p>" + Granite.I18n.get('Save activity "{0}" ?', ELM.Util.escape(a)) + "</p><p>" + Granite.I18n.get("If you don't save, your changes will be lost.") + "</p>",
            buttons: this.getDialogButtons()
        }).show();
        $(this.unsavedDialog.$element.find(".primary")[0]).removeAttr("disabled")
    },
    addErrorDialog: function() {
        this.errorDialog = new CUI.Modal({
            element: $("<div />").appendTo(document.body),
            visible: false,
            type: "error",
            heading: Granite.I18n.get("Error")
        })
    },
    showErrorDialog: function(a) {
        this.errorDialog.set({
            content: "<p>" + a + "</p>"
        }).show()
    },
    showWaitMessage: function(a) {
        F.trigger("waitNotification", {
            message: a,
            duration: "infinity"
        })
    },
    handleStepComplete: function() {
        if(this.nextStep()) {
            this.wizard.changePage(this.wizard.getCurrentPageNumber() + 1)
        }
    },
    switchToStep: function(a) {
        this.curStep = a;
        this.showStep(a);
        this.wizard.changePage(a + 1)
    },
    prevStep: function() {
        var a = this.components[this.steps[this.curStep].component];
        if(this.curStep < 1) {
            return true
        }
        if(typeof a.partialSave === "function") {
            a.partialSave()
        }
        this.curStep--;
        this.showStep(this.curStep);
        return true
    },
    nextStep: function() {
        var a = this.curStep === this.steps.length - 1;
        if(!this.isStepComplete()) {
            return false
        }
        if(a) {
            if(this.isViewMode) {
                this.trigger("editor:closed", this.model)
            } else {
                this.saveActivity()
            }
            return false
        }
        this.curStep++;
        this.showStep(this.curStep);
        return true
    },
    clearCurStep: function() {
        this.curStep = null
    },
    addCdqClient: function() {
        this.cdq = new cdq.Client({
            frame: this.frame,
            allowedHost: "*"
        })
    },
    checkAndShowIfWarningNeeded: function() {
        var b = this.components[this.steps[this.curStep].component],
            a = false;
        if(typeof b.hasChanged === "function") {
            a = b.hasChanged()
        }
        if(this.isViewMode || !(a || this.isActivityChanged())) {
            return this.navigateToPreviousPage()
        }
        this.showConfirmSaveDialog(this.model.getTitleOrDefault());
        return false
    },
    navigateToPreviousPage: function() {
        this.clearCurStep();
        this.clearBackupActivityAttributes();
        return this.trigger("model:noChange")
    },
    addTemplateTestingComponent: function() {
        this.addComponent(new ELM.Activities.TemplateTesting({
            el: this.view.$("#template-testing-dialog")
        }), "templateTestingRulesCreationDialog").on("templateTestingDialogClose", this.handleTemplateTestingDialogClose)
    },
    updateUrlSettings: function(a) {
        this.components.templateTestingRulesCreationDialog.trigger("template-testing:select-url-dialog", {
            url: this.getActivityUrl(),
            isShownFromEE: a,
            criteria: this.getTemplatesCriteria(),
            disableJavascript: this.isJavascriptDisabledinEE(),
            activityType: this.model.getActivityType()
        })
    },
    handleActivityUrlChange: function(a) {
        this.components.experienceEditor.handleUrlChange({
            activityUrl: a.activityUrl,
            disableJavaScript: a.disableJavaScript
        })
    },
    isJavascriptDisabledinEE: function() {
        return this.components.experienceEditor.cdq.disableJavaScript
    },
    getActivityUrl: function(b) {
        var a = this.components.experienceEditor.getActivityUrl();
        if(typeof b === "function") {
            b.call(null, a);
            return
        }
        return a
    },
    getBuildModeUrl: function(b) {
        var a = this.components.experienceEditor.getBuildModeUrl();
        if(typeof b === "function") {
            b.call(null, a);
            return
        }
        return a
    },
    getTemplatesCriteria: function() {
        var b = this.model.getTemplates(),
            a;
        if(b.legacy) {
            return {
                isLegacy: true,
                templateString: b.templateString
            }
        }
        a = b.targets;
        if(a && a.length && a[0].children) {
            return a[0]["children"]
        }
        return a
    },
    setTemplatesCriteria: function(b) {
        var a = this.model.getTemplates();
        if(!_.isEqual(a.targets, b)) {
            a.targets = b;
            this.model.trigger("change")
        }
    },
    handleTemplateTestingDialogClose: function(b) {
        var a = this.steps[this.curStep].component;
        if(b.criteria !== "default") {
            this.setTemplatesCriteria(b.criteria)
        }
        if(a === "experienceEditor" || a === "infoGraphic") {
            this.handleActivityUrlChange(b)
        }
    },
    addAudiencePicker: function() {
        this.addComponent(new ELM.Activities.AudiencePicker({
            el: this.view.$(".audience-picker"),
            viewMode: this.audiencePickerViewMode,
            visible: false
        }), "audiencePicker")
    },
    showAudiencePicker: function(a) {
        if(_.isUndefined(this.components.audiencePicker)) {
            this.addAudiencePicker()
        }
        this.components.audiencePicker.showPicker(a)
    },
    handleStepClick: function(b) {
        var a = $(b.currentTarget).data("index"),
            c = this.components[this.steps[this.curStep].component];
        if(a === this.curStep || a > this.curStep && !this.isStepComplete()) {
            return
        }
        if(typeof c.partialSave === "function") {
            c.partialSave()
        }
        $(b.currentTarget).siblings().removeClass("active").end().addClass("active");
        this.switchToStep(a)
    }
});
ELM.Activities.ABEditor = new Class({
    toString: "ABEditor",
    extend: ELM.Activities.Editor,
    Model: ELM.Models.Activity,
    Template: function() {
        return ELM.Activities.Templates.ABEditor.apply(this, arguments)
    },
    registerVars: function() {
        this.steps = [{
            name: "properties",
            component: "properties",
            complete: false,
            helpText: "Name & describe activity",
            hasSaveButton: true
        }, {
            name: "audiences",
            component: "infoGraphic",
            complete: false,
            helpText: "Choose audience and add experiences"
        }, {
            name: "metrics",
            component: "metrics",
            complete: false,
            helpText: "Select metrics"
        }, {
            name: "settings",
            component: "settings",
            complete: false,
            helpText: "Specify duration and priority"
        }];
        this.curStep = null;
        this.activityBackupAttributes = null
    },
    registerBinders: function() {
        this.superClass.registerBinders.apply(this, arguments);
        this.bind(this.showExperienceEditorForEditMode);
        this.bind(this.showExperienceEditorForClickTrackMode);
        this.bind(this.showMetricsStep);
        this.bind(this.renderExperiences);
        this.bind(this.validateClickTracking);
        this.bind(this.changeExperienceEditorMode);
        this.bind(this.destructEditorModes)
    },
    registerGlobalTriggers: function() {
        F.on("A-B:experienceEditor:experiencesSaved A-B-analytics:experienceEditor:experiencesSaved", this.renderExperiences);
        F.on("A-B:metric:showClickTracking A-B-analytics:metric:showClickTracking", this.showExperienceEditorForClickTrackMode);
        F.on("A-B:clickTrack:saved A-B-analytics:clickTrack:saved", this.showMetricsStep);
        F.on("window:resize", this.setScrollableHeight);
        F.on("activities:ee:destruct", this.destructEditorModes)
    },
    unregisterGlobalTriggers: function() {
        F.off("A-B:experienceEditor:experiencesSaved A-B-analytics:experienceEditor:experiencesSaved", this.renderExperiences);
        F.off("A-B:metric:showClickTracking A-B-analytics:metric:showClickTracking", this.showExperienceEditorForClickTrackMode);
        F.off("A-B:clickTrack:saved A-B-analytics:clickTrack:saved", this.showMetricsStep);
        F.off("window:resize", this.setScrollableHeight);
        F.off("activities:ee:destruct", this.destructEditorModes)
    },
    addSubComponents: function() {
        this.addProperties();
        this.addInfoGraphic();
        this.addTemplateTestingComponent();
        this.addMetrics();
        this.addSettings();
        this.addUnsavedDialog();
        this.addErrorDialog();
        this.addContentPicker();
        this.addCdqClient()
    },
    addContentPicker: function() {
        this.addComponent(new ELM.Activities.ContentPicker({
            el: this.view.$(".contentPickerContainer"),
            visible: false
        }))
    },
    addProperties: function() {
        this.addComponent(new ELM.Activities.Properties({
            el: this.view.$(".activityProperties"),
            visible: false
        }), "properties").on("step:complete", this.handleStepComplete).on("invalid", function(b, a) {
            alert(a)
        })
    },
    addInfoGraphic: function() {
        this.addComponent(new ELM.Activities.InfoGraphic({
            el: this.view.$(".infoGraphic"),
            visible: false
        }), "infoGraphic").on("chooseAudience", this.showAudiencePicker).on("triggerExperienceChooser", this.showExperienceEditorForEditMode.bind(this)).on("triggerAddNewExperience", this.showExperienceEditorForEditMode.bind(this)).on("triggerShowSpecificExperience", this.showExperienceEditorForEditMode.bind(this))
    },
    addEditMode: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.EditMode({
            el: this.view.$(".experienceEditorPlaceHolder"),
            visible: false,
            contentPicker: this.components.contentPicker
        }), "experienceEditor").on("elements:rearranged", this.validateClickTracking).on("updateUrlSettings", this.updateUrlSettings).on("experience-editor:mode-changed", this.changeExperienceEditorMode)
    },
    addClickTrackMode: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.ClickTrackMode({
            el: this.view.$(".experienceEditorPlaceHolder"),
            visible: false
        }), "experienceEditorClickTrackMode").on("experience-editor:mode-changed", this.changeExperienceEditorMode)
    },
    addMetrics: function() {
        this.addComponent(new ELM.Activities.Metrics({
            el: this.view.$(".metrics"),
            visible: false
        }), "metrics").on("metrics:addAudience", this.showAudiencePicker)
    },
    addSettings: function() {
        this.addComponent(new ELM.Activities.ABSettings({
            el: this.view.$(".settings"),
            visible: false
        }), "settings").on("chooseReportingAudience", this.showAudiencePicker)
    },
    initializeWidgets: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: "#ab-wizard",
            component: this,
            onPageChanged: {
                step1: function() {},
                step2: function() {
                    a.triggerSwitchToAStepWithAudiencesEvent("FlowDiagramStep")
                },
                step3: function() {},
                step4: function() {
                    if(a.isViewMode) {
                        a.wizard.setNextButtonLabel(Granite.I18n.get("Close"))
                    }
                }
            },
            onNextButtonClick: function() {
                return a.nextStep()
            },
            onBackButtonClick: function() {
                return a.prevStep()
            },
            onLeaving: function() {
                a.checkAndShowIfWarningNeeded()
            }
        })
    },
    triggerSwitchToAStepWithAudiencesEvent: function(b) {
        var a = this.getAudiences();
        if(a) {
            F.trigger("A-B:editor:switchingTo" + b, a)
        }
    },
    getAudiences: function() {
        if(!this.model) {
            throw this.toString() + ": has no model"
        }
        var a = this.model.getAudiencesRef();
        var b;
        if(a) {
            b = this.model.getAudienceDataFromRef(a)
        }
        return b
    },
    renderExperiences: function() {
        this.showStep(this.curStep);
        this.triggerSwitchToAStepWithAudiencesEvent("FlowDiagramStep")
    },
    showStep: function(a) {
        var c = this.steps[a],
            b = this.components[c.component],
            d = this.model.getTitle().trim().length === 0 ? Granite.I18n.get("Untitled Activity") : this.model.getTitle();
        b.show({
            model: this.model
        });
        $("#ab_title").text(d)
    },
    showEditor: function(a) {
        this.curStep = 0;
        if(a.curStep) {
            this.curStep = a.curStep
        }
        if(a.model) {
            this.load(a.model);
            this.isViewMode = a.isViewMode || false;
            if(this.isViewMode) {
                F.trigger("noticeNotification", {
                    message: Granite.I18n.get("You do not have sufficient privileges to edit the activity. However, you can still view it.")
                })
            }
            this.activityBackupAttributes = this.model.createBackUp()
        } else {
            this.clearBackupActivityAttributes()
        }
        this.showStep(this.curStep);
        this.wizard.changePage(this.curStep + 1);
        this.show()
    },
    showExperienceEditorForEditMode: function(c) {
        var b = c.name || c.previousName || "",
            e = c.previousExperiences || ELM.Util.clone(this.model.getExperiences()),
            a = c.url || this.model.getActivityUrl() || "",
            d = c.previousMode || "";
        this.destructEditorModes();
        this.addEditMode();
        this.components.experienceEditor.authenticateAndShowExperienceEditor({
            model: this.model,
            name: b,
            url: a,
            previousMode: d,
            cdq: this.cdq,
            experiences: e
        })
    },
    showExperienceEditorForClickTrackMode: function(a) {
        var b = ELM.Util.clone(this.model.getExperiences());
        this.destructEditorModes();
        this.addClickTrackMode();
        this.components.experienceEditorClickTrackMode.authenticateAndShowExperienceEditor({
            model: this.model,
            cdq: this.cdq,
            experiences: b,
            url: this.model.getActivityUrl(),
            metricComponent: a.metricComponent,
            clickedElements: a.clickedElements
        })
    },
    showMetricsStep: function() {
        this.showStep(this.curStep)
    },
    getCompareParams: function() {
        return {
            ignoreKeysOfArrayElements: {
                metrics: ["isGoalMetric"]
            }
        }
    },
    isExperiencesEmpty: function() {
        var a = this.model.getExperiences() || [];
        return(a.length <= 0)
    },
    saveActivity: function(d) {
        var f = this,
            c = this.isExperiencesEmpty(),
            e = this.view.$(".saveAndContinueButton"),
            a = Granite.I18n.get("DD MMM. YYYY HH:mm:ssZ", null, "Date format pattern for moment.js. e.g. 12 Jun. 2014 13:00+5:30 (http://momentjs.com/docs)"),
            b = this.components.metrics;
        d = d || "saved";
        e.attr("disabled", "disabled");
        if(!this.model.getTitle()) {
            this.model.setTitle(this.model.getTitleOrDefault() + " " + moment().format(a))
        }
        if(b.hasMetricsToBeSaved() && !b.validateMetrics()) {
            this.switchToStep(2);
            b.validateMetrics();
            return
        }
        e.attr("disabled", "disabled");
        this.model.setStatus(ELM.Activities.status.SYNCING);
        this.showWaitMessage(Granite.I18n.get("Please wait while we save your activity."));
        this.model.save(null, {
            success: function(g) {
                f.clearBackupActivityAttributes();
                f.clearCurStep();
                f.trigger("model:" + d, g);
                if(c) {
                    F.trigger("infoNotification", {
                        message: Granite.I18n.get("{0} will stay in draft status until experiences are edited.", g.getTitle()),
                        heading: Granite.I18n.get("Note")
                    })
                } else {
                    F.trigger("successNotification", {
                        message: Granite.I18n.get("{0} has been saved.", g.getTitle()),
                        heading: Granite.I18n.get("SUCCESS")
                    })
                }
            },
            error: function(h, g) {
                var i;
                if((typeof g !== "undefined") && g !== null && (typeof g.responseText !== "undefined") && g.responseText !== null) {
                    var j = JSON.parse(g.responseText);
                    i = j["error.message"]
                }
                if(f.unsavedDialog.$element.is(":visible")) {
                    f.clearCurStep();
                    f.clearBackupActivityAttributes();
                    f.unsavedDialog.hide();
                    f.showErrorDialog(i);
                    f.trigger("model:saveFailed")
                } else {
                    e.removeAttr("disabled");
                    F.trigger("errorNotification", {
                        message: i || Granite.I18n.get("Activity cannot be saved."),
                        heading: Granite.I18n.get("ERROR")
                    })
                }
            }
        })
    },
    validateClickTracking: function(f) {
        var e = this.model.getMetrics() || [],
            h, g = [],
            b = f.selector.split(" > ").join(" "),
            a = false;
        h = _.filter(e, function(i) {
            return i.action == "elementClick"
        }) || [];
        _.each(h, function(i) {
            i.constraints = i.constraints || [];
            g = g.concat(i.constraints)
        });
        for(var d = 0; d < g.length; d++) {
            var c = g[d].term || "";
            if(c.indexOf(b) != -1) {
                a = true;
                break
            }
        }
        if(a) {
            this.components.experienceEditor.showClickTrackBreakWarning()
        }
    },
    destructEditorModes: function() {
        var b = ["experienceEditor", "experienceEditorClickTrackMode"];
        for(var a in this.components) {
            if(b.indexOf(a) != -1) {
                this.components[a].destroy();
                this.components[a].isSetup = false
            }
        }
        this.cdq.domListeners = {};
        this.cdq.domListenersCount = 0;
        this.cdq.requests = [];
        return this
    },
    changeExperienceEditorMode: function(a) {
        var b = {
            edit: this.showExperienceEditorForEditMode,
            clicktrack: this.showExperienceEditorForClickTrackMode
        };
        if(!a.newMode) {
            this.showStep(this.curStep);
            return
        }
        b[a.newMode].call(this, a.data || {})
    }
});
ELM.Activities.OneToOneContentPicker = new Class({
    toString: "OneToOneContentPicker",
    extend: ELM.Activities.ContentPicker,
    View: F.View.extend({
        events: {
            "click #content-picker-close": "hidePicker",
            "click #content-picker-add": "onAddButtonClick",
            "click .default-image": "onClickDefaultImage"
        }
    }),
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            visible: false,
            template: ELM.Activities.Templates.OneToOneContentPicker
        }).render()
    },
    registerVars: function() {
        this.superClass.registerVars.apply(this, arguments);
        this.offers = []
    },
    cacheSelectors: function() {
        this.$addButton = this.view.$("#content-picker-add");
        this.$defaultImagePlaceholder = this.view.$(".default-image")
    },
    registerGlobalTriggers: function() {
        F.on("1-1:ee:selectOffer MVT:ee:selectOffer", this.onSelectOffer)
    },
    unregisterGlobalTriggers: function() {
        F.off("1-1:ee:selectOffer MVT:ee:selectOffer", this.onSelectOffer)
    },
    registerBinders: function() {
        this.bind(this.onSelectOffer);
        this.inherited(arguments)
    },
    onSelectOffer: function(b, a) {
        this.offers = ELM.Util.clone(a) || [];
        if(b.offerType === "imageOffer") {
            this.showDefaultImagePlaceholder();
            this.updateDefaultImagePlaceholderState()
        } else {
            this.hideDefaultImagePlaceholder()
        }
        this.fetchDefaultContent(b)
    },
    showDefaultImagePlaceholder: function() {
        this.$defaultImagePlaceholder.removeClass("hidden")
    },
    hideDefaultImagePlaceholder: function() {
        this.$defaultImagePlaceholder.addClass("hidden")
    },
    selectDefaultImagePlaceholder: function() {
        this.$defaultImagePlaceholder.addClass("selected")
    },
    deselectDefaultImagePlaceholder: function() {
        this.$defaultImagePlaceholder.removeClass("selected")
    },
    triggerContentSelectedEvent: function(a) {
        var b = $.extend(a, this.requestOptions);
        this.handleModeSelection(b)
    },
    updateContentPickerHeading: function() {},
    showContentPicker: function() {
        this.inherited(arguments);
        this.selectOffers(this.offers);
        this.updateAddButtonState()
    },
    selectOffers: function(b) {
        var a = this.components["content-list"];
        _.each(b, function(c) {
            var d = c["ref:offer"];
            if(d) {
                a.selectContent("path", d)
            }
        })
    },
    hidePicker: function() {
        this.inherited(arguments)
    },
    handleModeSelection: function(c) {
        var b = c.model,
            a = b.getName(),
            d = b.getPath();
        c.listItem.toggleClass("selected");
        if(c.listItem.hasClass("selected")) {
            this.offers.push({
                "jcr:title": a,
                isAnonymous: false,
                "ref:offer": d
            })
        } else {
            this.offers = _.reject(this.offers, function(e) {
                return e["jcr:title"] === a
            })
        }
        this.updateAddButtonState()
    },
    updateAddButtonState: function() {
        var a = (this.requestOptions.offerType === "imageOffer") ? 2 : 1;
        this.toggleAddButton(this.offers.length >= a)
    },
    updateDefaultImagePlaceholderState: function() {
        if(this.offers[0]["included"]) {
            this.selectDefaultImagePlaceholder()
        } else {
            this.deselectDefaultImagePlaceholder()
        }
    },
    toggleAddButton: function(a) {
        if(a) {
            this.$addButton.removeAttr("disabled")
        } else {
            this.$addButton.attr("disabled", "disabled")
        }
    },
    onAddButtonClick: function() {
        this.hidePicker();
        F.trigger(ELM.evtNamespace + ":content:selected", this.offers, this.requestOptions.offerType)
    },
    onClickDefaultImage: function() {
        this.$defaultImagePlaceholder.toggleClass("selected");
        this.offers[0]["included"] = this.$defaultImagePlaceholder.hasClass("selected")
    }
});
ELM.Activities.ExperienceEditor.CombinationsFilter = new Class({
    toString: "ContentCombinationsFilter",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "selected .criteria-match-selector": "updateCriteriaMatch",
            "selected .criteria-location-selector": "updateCriteriaLocation",
            "selected .criteria-operator-selector": "updateCriteriaOperator",
            "selected .criteria-offer-selector": "updateCriteriaOffer",
            "click .add-criteria": "addCriteria",
            "click .icon-delete": "deleteCriteria",
            "click .clear-all": "clearAllFilters",
            "click .cancel-button": "cancelFilters",
            "click .apply-button": "saveFilters"
        }
    }),
    construct: function(a) {
        this.initVars();
        this.initModel(a);
        this.initView(a.el);
        this.registerEvents();
        this.render()
    },
    initVars: function() {
        this.isFilterChanged = false
    },
    initModel: function(a) {
        this.model = new ELM.Model({
            locations: a.locations,
            criteriaMatch: a.criteriaMatch || "all",
            filters: a.filters.length && a.filters || [{}]
        })
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            template: ELM.Activities.Templates.CombinationsFilter,
            component: this,
            model: this.model
        })
    },
    registerEvents: function() {
        this.listenTo(this.model, "change", this.render.bind(this));
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.updateApplyButtonState()
        })
    },
    initWidgets: function() {
        this.view.$(".select").select()
    },
    updateApplyButtonState: function() {
        this.view.$(".apply-button").attr("disabled", !this.isFilterChanged)
    },
    cancelFilters: function() {
        this.trigger("filters:cancelled")
    },
    saveFilters: function() {
        var c = this.getFilters(),
            d = this.getCriteriaMatch(),
            b = this.view.$(".criteria-steps"),
            a = [],
            e = true;
        _.each(c, function(g, f) {
            if(!_.isEmpty(g)) {
                if(g.locationIndex >= 0 && g.operator && g.offer) {
                    a.push(g);
                    $(b.get(f)).removeClass("incomplete")
                } else {
                    $(b.get(f)).addClass("incomplete");
                    e = false
                }
            }
        });
        if(e) {
            this.trigger("filters:saved", a, d)
        }
    },
    updateCriteriaLocation: function(b) {
        var d = b.selected,
            e = $(b.currentTarget).closest(".criteria").data("index"),
            a = this.getLocations(),
            c = a[d].offers;
        this.updateCriteria(e, "locationIndex", d);
        this.updateCriteria(e, "offers", c)
    },
    updateCriteriaOperator: function(a) {
        var b = a.selected,
            c = $(a.currentTarget).closest(".criteria").data("index");
        this.updateCriteria(c, "operator", b)
    },
    updateCriteriaOffer: function(a) {
        var b = a.selected,
            c = $(a.currentTarget).closest(".criteria").data("index");
        this.updateCriteria(c, "offer", b)
    },
    updateCriteria: function(a, d, c) {
        var b = this.getFilters();
        b[a][d] = c;
        this.isFilterChanged = true;
        this.render()
    },
    deleteCriteria: function(a) {
        var c = this.getFilters(),
            b = $(a.currentTarget).closest(".criteria").data("index");
        c.splice(b, 1);
        this.isFilterChanged = true;
        this.render()
    },
    clearAllFilters: function() {
        this.isFilterChanged = false;
        this.setFilters([{}])
    },
    addCriteria: function() {
        var a = this.getFilters();
        a.push({});
        this.isFilterChanged = true;
        this.render()
    },
    updateCriteriaMatch: function(a) {
        this.isFilterChanged = true;
        this.model.set("criteriaMatch", a.selected)
    },
    getCriteriaMatch: function() {
        return this.model.get("criteriaMatch")
    },
    getFilters: function() {
        return this.model.get("filters")
    },
    setFilters: function(a) {
        this.model.set("filters", a)
    },
    getLocations: function() {
        return this.model.get("locations")
    }
});
ELM.Activities.OneToOneManageContentDialog = new Class({
    toString: "OneToOneManageContentDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .close-button": "closeDialog",
            "click .toggle-fullscreen": "toggleFullscreenMode"
        }
    }),
    construct: function() {
        this.initView();
        this.registerEvents()
    },
    initView: function() {
        this.view = new this.View({
            el: $('<div class="modal manage-content-dialog"/>').appendTo(document.body),
            template: ELM.Activities.Templates.OneToOneManageContentDialog,
            noRerender: true,
            component: this
        }).render()
    },
    registerEvents: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addSubComponents()
        })
    },
    initWidgets: function() {
        this.view.$el.modal().data("modal").show();
        this.view.$(".tabs").tabs()
    },
    addSubComponents: function() {
        var a = this.model.getLocations().length;
        this.addContentTab();
        if(a > 1 && this.model.getActivityType() === ELM.Activities.activityTypes.ONE_TO_ONE) {
            this.addCombinationsTab()
        }
    },
    addContentTab: function() {
        this.addComponent(new ELM.Activities.OneToOneManageContentDialog.Content({
            el: ".content-tab",
            model: this.model,
            visible: true
        }), "contentTab")
    },
    addCombinationsTab: function() {
        this.addComponent(new ELM.Activities.OneToOneManageContentDialog.Combinations({
            el: ".combinations-tab",
            model: this.model,
            visible: true
        }), "combinationsTab")
    },
    toggleFullscreenMode: function(a) {
        var b = $(a.currentTarget);
        this.view.$el.toggleClass("fullscreen");
        b.toggleClass("icon-fullscreen icon-fullscreenexit")
    },
    closeDialog: function() {
        this.hide();
        this.destructAllSubComponents()
    },
    destructAllSubComponents: function() {
        _.each(this.components, function(a) {
            a.destruct()
        })
    }
});
ELM.Activities.OneToOneManageContentDialog.Content = new Class({
    toString: "OneToOneManageContentDialogContent",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .select-content": "selectContentRow",
            "change .select-all": "selectAllContentRows",
            "click .delete-content": "showDeleteConfirmationPopup",
            "click .delete-confirmation-popup .icon-close": "hideDeleteConfirmationPopup",
            "click .delete-confirmation-popup .icon-delete": "deleteSelectedContent"
        }
    }),
    construct: function(a) {
        this.activityModel = a.model;
        this.initView(a.el);
        this.registerEvents();
        this.setup()
    },
    setup: function() {
        this.locations = this.activityModel && this.activityModel.getLocations() || [];
        this.initializeContent();
        this.selectedGroupIndex = 0;
        this.initModel();
        this.render()
    },
    initModel: function() {
        this.load(new ELM.Model({
            locations: this.locations,
            content: this.content
        }))
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            template: ELM.Activities.Templates.OneToOneManageContentDialog.Content,
            component: this
        })
    },
    registerEvents: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addReportGroupPopover()
        });
        this.listenTo(this.activityModel, "change:locations", this.setup.bind(this))
    },
    initWidgets: function() {
        this.view.$(".tooltip").tooltip().hide()
    },
    addReportGroupPopover: function() {
        this.addComponent(new ELM.Activities.OneToOneManageContentDialog.Content.ReportGroup({
            el: ".report-group-placeholder",
            reportGroups: this.getReportGroups(),
            selectedGroupIndex: this.selectedGroupIndex,
            visible: true
        }), "reportGroupPopover").on("reportGroup:cancelled", this.closeReportGroupPopover.bind(this)).on("reportGroup:selected", this.applyReportGroup.bind(this))
    },
    closeReportGroupPopover: function() {
        this.view.$(".tool-report-group").click()
    },
    applyReportGroup: function(a) {
        _.each(this.getSelectedContent(), function(b) {
            this.updateReportGroup(b, a)
        }, this);
        if(a !== -1) {
            this.selectedGroupIndex = a
        }
        this.activityModel.removeEmptyReportingGroups();
        this.render()
    },
    selectContentRow: function(a) {
        var b = $(a.currentTarget);
        b.closest(".content-row").toggleClass("selected");
        this.updateToolbarButtonsState()
    },
    selectAllContentRows: function(a) {
        var b = $(a.currentTarget);
        if(b.is(":checked")) {
            this.view.$(".content-row").addClass("selected").find(".select-content").attr("checked", true)
        } else {
            this.view.$(".content-row").removeClass("selected").find(".select-content").attr("checked", false)
        }
        this.updateToolbarButtonsState()
    },
    updateToolbarButtonsState: function() {
        this.updateReportGroupButtonState();
        this.updateDeleteButtonState()
    },
    updateReportGroupButtonState: function() {
        this.view.$(".tool-report-group").attr("disabled", this.getSelectedContent().length === 0)
    },
    updateDeleteButtonState: function() {
        var c = false,
            b = this.getSelectedContent(),
            a;
        this.hideDeleteConfirmationPopup();
        if(b.length) {
            a = _.groupBy(b, function(d) {
                return d.locationIndex
            });
            _.each(a, function(e, f) {
                var g = this.locations[f].offers,
                    d = g.length - e.length,
                    h, i;
                if(d === 0) {
                    c = true
                } else {
                    if(d === 1) {
                        h = _.some(g, function(j) {
                            return j.isDefault
                        });
                        i = _.some(e, function(j) {
                            return j.offer.isDefault
                        });
                        if(h && !i) {
                            c = true
                        }
                    }
                }
            }, this)
        } else {
            c = true
        }
        this.view.$(".delete-content").attr("disabled", c)
    },
    getSelectedContent: function() {
        return _.map(this.view.$(".selected"), function(a) {
            return this.content[$(a).data("index")]
        }, this)
    },
    initializeContent: function() {
        var d = [],
            c, a = 0,
            b;
        _.each(this.locations, function(e, f) {
            c = [];
            _.each(e.offers, function(h, g) {
                if(h.isDefault) {
                    return
                }
                b = this.getReportGroup(f, g);
                c.push({
                    index: a++,
                    offerIndex: g,
                    offer: h,
                    locationIndex: f,
                    location: e,
                    reportGroup: b
                })
            }, this);
            c = _.sortBy(c, function(g) {
                return g.offer
            });
            d = d.concat(c)
        }, this);
        this.content = d
    },
    getReportGroup: function(d, a) {
        var c = this.getReportGroups(),
            f, e, b;
        for(f = 0; f < c.length; f++) {
            e = c[f].locationsandoffers;
            for(b = 0; b < e.length; b++) {
                if(e[b].locationIndex === d && e[b].offerIndex === a) {
                    return c[f]
                }
            }
        }
    },
    updateReportGroup: function(f, g) {
        var d = this.getReportGroups(),
            c = d[g],
            b = f.reportGroup,
            e = f.locationIndex,
            a = f.offerIndex;
        if(b) {
            b.locationsandoffers = _.reject(b.locationsandoffers, function(h) {
                return h.locationIndex === e && h.offerIndex === a
            })
        }
        if(c) {
            c.locationsandoffers.push({
                locationIndex: e,
                offerIndex: a
            });
            f.reportGroup = c
        } else {
            delete f.reportGroup
        }
    },
    deleteSelectedContent: function() {
        var a = this.getSelectedContent();
        a.sort(function(d, c) {
            var b = d.locationIndex - c.locationIndex;
            return b === 0 ? c.offerIndex - d.offerIndex : b
        });
        _.each(a, function(b) {
            this.activityModel.removeOffer(b.locationIndex, b.offerIndex);
            F.trigger(ELM.evtNamespace + ":offer:deleted", b.locationIndex, b.offerIndex)
        }, this);
        this.hideDeleteConfirmationPopup()
    },
    showDeleteConfirmationPopup: function() {
        this.view.$(".delete-confirmation-popup").toggle()
    },
    hideDeleteConfirmationPopup: function() {
        this.view.$(".delete-confirmation-popup").hide()
    },
    getReportGroups: function() {
        return this.activityModel.getReportingGroups()
    }
});
ELM.Activities.OneToOneManageContentDialog.Content.ReportGroup = new Class({
    toString: "OneToOneManageContentDialogReportGroup",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change input[name=report-group-mode]": "updateCheckedMode",
            "focusin input[name=new-report-group-name].error": "updateNewReportGroupInput",
            "click .cancel-button": "cancelReportGroup",
            "click .apply-button": "applyReportGroup"
        }
    }),
    construct: function(a) {
        this.initModel(a);
        this.initView(a.el);
        this.registerEvents();
        this.render()
    },
    initModel: function(a) {
        this.model = new ELM.Model({
            reportGroups: a.reportGroups,
            selectedIndex: a.selectedGroupIndex,
            isNewOptionChecked: a.reportGroups.length ? false : true
        })
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            template: ELM.Activities.Templates.OneToOneManageContentDialog.Content.ReportGroup,
            component: this,
            model: this.model
        })
    },
    registerEvents: function() {
        this.listenTo(this.model, "change", this.render.bind(this));
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets()
        })
    },
    initWidgets: function() {
        this.view.$(".select").select()
    },
    updateCheckedMode: function(a) {
        this.setIsNewOptionChecked($(a.currentTarget).val() === "new")
    },
    updateNewReportGroupInput: function(a) {
        $(a.currentTarget).removeClass("error")
    },
    cancelReportGroup: function(a) {
        this.view.$(".report-group-input").removeClass("error");
        this.trigger("reportGroup:cancelled")
    },
    applyReportGroup: function() {
        var a, d, b, c;
        if(this.getIsNewOptionChecked()) {
            d = this.view.$(".report-group-input");
            a = d.val().trim();
            if(a) {
                d.removeClass("error");
                c = this.addNewReportGroup(a);
                this.setIsNewOptionChecked(false)
            } else {
                d.addClass("error");
                return false
            }
        } else {
            b = this.view.$(".report-group-selector :selected");
            c = parseInt(b.val())
        }
        this.setSelectedIndex(c);
        this.trigger("reportGroup:selected", c)
    },
    addNewReportGroup: function(a) {
        var b = this.model.get("reportGroups"),
            c = _.pluck(b, "jcr:title").indexOf(a);
        if(c === -1) {
            b.push({
                "jcr:title": a,
                locationsandoffers: []
            });
            c = b.length - 1
        }
        return c
    },
    setSelectedIndex: function(a) {
        this.model.set("selectedIndex", a)
    },
    setIsNewOptionChecked: function(a) {
        this.model.set("isNewOptionChecked", a)
    },
    getIsNewOptionChecked: function() {
        return this.model.get("isNewOptionChecked")
    }
});
ELM.Activities.OneToOneManageContentDialog.Combinations = new Class({
    toString: "OneToOneManageContentDialogCombinations",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .select-combination": "selectCombination",
            "change .select-all": "selectAllCombinations",
            "click .include-button": "includeSelectedCombinations",
            "click .exclude-button": "excludeSelectedCombinations",
            "click .display-filter-popover a": "changeDisplayFilter"
        }
    }),
    construct: function(a) {
        this.activityModel = a.model;
        this.initView(a.el);
        this.registerEvents();
        this.setup()
    },
    setup: function() {
        this.locations = this.activityModel && this.activityModel.getLocations() || [];
        this.exclusions = this.activityModel && this.activityModel.getExclusions() || [];
        this.offerCombinations = this.locations.length && this.getAllOfferCombinations();
        this.initModel();
        this.render()
    },
    initModel: function() {
        this.load(new ELM.Model({
            locations: this.locations,
            offerCombinations: this.offerCombinations,
            displayFilter: "all",
            displayFilterText: Granite.I18n.get("All"),
            filters: []
        }))
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            template: ELM.Activities.Templates.OneToOneManageContentDialog.Combinations,
            component: this
        })
    },
    registerEvents: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addFilterPopover()
        });
        this.listenTo(this.activityModel, "change:locations", this.setup.bind(this))
    },
    initWidgets: function() {
        this.$includeButton = this.view.$(".include-button");
        this.$excludeButton = this.view.$(".exclude-button");
        this.view.$(".pulldown").pulldown()
    },
    addFilterPopover: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.CombinationsFilter({
            el: ".criteria-placeholder",
            locations: this.locations,
            filters: this.getFilters(),
            criteriaMatch: this.getCriteriaMatch(),
            visible: true
        }), "filterPopover").on("filters:cancelled", this.closeFilterPopover.bind(this)).on("filters:saved", this.applyFilters.bind(this))
    },
    closeFilterPopover: function() {
        this.view.$(".icon-filter").click()
    },
    applyFilters: function(b, c) {
        this.closeFilterPopover();
        var a = _.filter(this.offerCombinations, function(g) {
            var d = true,
                k, f, e, j, i;
            for(var h in b) {
                k = b[h];
                f = k.locationIndex;
                e = k.operator;
                j = k.offer;
                i = g.combination[f].title;
                if((e === "contains" && j === i) || (e === "doesNotContain" && j !== i)) {
                    if(c === "any") {
                        return true
                    }
                } else {
                    d = false
                }
            }
            return d
        }, this);
        this.setFilters(b);
        this.setCriteriaMatch(c);
        this.setOfferCombinations(a)
    },
    selectCombination: function(a) {
        var b = $(a.currentTarget);
        b.closest(".combination").toggleClass("selected");
        this.updateToolbarButtonsState()
    },
    selectAllCombinations: function(a) {
        var b = $(a.currentTarget);
        if(b.is(":checked")) {
            this.view.$(".combination").addClass("selected").find(".select-combination").attr("checked", true)
        } else {
            this.view.$(".combination").removeClass("selected").find(".select-combination").attr("checked", false)
        }
        this.updateToolbarButtonsState()
    },
    updateToolbarButtonsState: function() {
        var b = false,
            a = false;
        _.each(this.getSelectedCombinations(), function(c) {
            b = b || c.status === "excluded";
            a = a || c.status === "included"
        });
        this.$excludeButton.attr("disabled", !a);
        this.$includeButton.attr("disabled", !b)
    },
    changeDisplayFilter: function(a) {
        var b = $(a.currentTarget);
        this.setDisplayFilter(b.data("value"), b.text())
    },
    excludeSelectedCombinations: function() {
        var a = this.getSelectedCombinations();
        if(a.length) {
            _.each(a, function(b) {
                b.status = "excluded"
            }, this);
            this.updateExclusions();
            this.view.render()
        }
    },
    includeSelectedCombinations: function() {
        var a = this.getSelectedCombinations();
        if(a.length) {
            _.each(a, function(b) {
                b.status = "included"
            }, this);
            this.updateExclusions();
            this.view.render()
        }
    },
    updateExclusions: function() {
        var b = this.getExcludedCombinations(),
            a = [];
        _.each(b, function(c) {
            _.each(c.combination, function(e, d) {
                a.push({
                    locationIndex: d,
                    offerIndex: e.index
                })
            })
        });
        this.setExclusions(a)
    },
    getExcludedCombinations: function() {
        return _.filter(this.offerCombinations, function(a) {
            return a.status === "excluded"
        })
    },
    getSelectedCombinations: function() {
        var b = [],
            a;
        _.each(this.view.$(".selected"), function(c) {
            a = $(c).data("index");
            b.push(this.offerCombinations[a])
        }, this);
        return b
    },
    getAllOfferCombinations: function() {
        var c = [],
            a = this.locations,
            g = a.length,
            b = 0,
            f = 0,
            d = this;

        function e(h, i) {
            if(i === g) {
                if(f !== g) {
                    c.push({
                        combination: h,
                        index: b++,
                        status: d.getStatus(h)
                    })
                }
                f = 0;
                return
            }
            _.each(a[i].offers, function(l, k) {
                var j, m = l["jcr:title"];
                if(l.isDefault) {
                    if(l.included) {
                        f++
                    } else {
                        return
                    }
                }
                if(m) {
                    j = h.concat([{
                        title: m,
                        index: k
                    }]);
                    e(j, i + 1)
                }
            })
        }
        e([], 0);
        return c
    },
    getStatus: function(f) {
        var h = this.exclusions.length,
            c = this.locations.length,
            g, b, a;
        for(var e = 0; e < h; e += c) {
            a = true;
            for(var d = 0; d < c; d++) {
                g = this.exclusions[e + d].locationIndex;
                b = this.exclusions[e + d].offerIndex;
                if(b !== f[g].index) {
                    a = false;
                    break
                }
            }
            if(a) {
                return "excluded"
            }
        }
        return "included"
    },
    setOfferCombinations: function(a) {
        this.model.set("offerCombinations", a)
    },
    setDisplayFilter: function(b, a) {
        this.model.set("displayFilter", b);
        this.model.set("displayFilterText", a)
    },
    getDisplayFilter: function() {
        return this.model.get("displayFilter")
    },
    setExclusions: function(a) {
        this.exclusions = a;
        this.activityModel.setExclusions(a)
    },
    setFilters: function(a) {
        this.model.silentSet("filters", a)
    },
    getFilters: function() {
        return this.model.get("filters")
    },
    setCriteriaMatch: function(a) {
        this.model.set("criteriaMatch", a)
    },
    getCriteriaMatch: function() {
        return this.model.get("criteriaMatch")
    }
});
"use strict";
ELM.Activities.OneToOneEditorTooltip = new Class({
    toString: "OneToOneEditorTooltip",
    extend: F.ModelComponent,
    template: Handlebars.compile('<div class="explore-info tooltip arrow-bottom"> {{i18n "Explore the page, then click an element to make a change."}}  <br/> {{#if links.experienceComposer}}  {{i18n "Learn more about using Experience Composer <a href=\'{0}\' target=\'_blank\'>here</a>." links.experienceComposer html=true}} {{/if}}</div><div class="preview-info tooltip arrow-left {{#equals activityType "1-1"}}margin-l-11-imp{{/equals}}"> {{#equals activityType "1-1"}}    {{i18n "Preview generated combinations from here."}} {{else}}   {{i18n "Preview generated combinations and exclude the undesired ones from here."}} {{/equals}} {{#if links.previewAndExcludeFeature}}  <br/>  {{i18n "Learn more about using Experience Composer <a href=\'{0}\' target=\'_blank\'>here</a>." links.previewAndExcludeFeature html=true}} {{/if}}</div>'),
    View: F.View.extend({
        events: {
            click: "hide"
        }
    }),
    construct: function(a) {
        var b = $(".explore-info-background");
        if(b.size() === 0) {
            b = $('<div class="explore-info-background"></div>').appendTo("body")
        }
        this.view = new this.View({
            el: b,
            model: new this.Model(a),
            template: this.template
        });
        this.setActivityType(a.activityType);
        this.view.render()
    },
    _getLinks: function(b) {
        var a = "//marketing.adobe.com/resources/help/en_US";
        var c = {
            "1-1": {
                experienceComposer: a + "/tnt/help/t_Creating_a_11_Campaign.html"
            },
            MVT: {
                experienceComposer: a + "/target/mvt/t_create_multivariate_test.html",
                previewAndExcludeFeature: a + "/target/mvt/t_preview_experiences.html"
            }
        };
        return c[b]
    },
    showExploreTooltip: function() {
        this.view.$(".tooltip").hide();
        this.view.$(".explore-info").show();
        this.show()
    },
    showPreviewTooltip: function() {
        this.view.$(".tooltip").hide();
        this.view.$(".preview-info").show();
        this.show()
    },
    setActivityType: function(a) {
        this.view.model.set({
            activityType: a,
            links: this._getLinks(a)
        });
        return this
    },
    show: function() {
        this.view.show()
    },
    hide: function() {
        this.view.hide()
    }
});
"use strict";
ELM.Activities.OneToOneEditor = new Class({
    toString: "OneToOneEditor",
    extend: ELM.Activities.Editor,
    Model: ELM.Models.OneToOneActivity,
    Template: function() {
        return ELM.Activities.Templates.OneToOneEditor.apply(this, arguments)
    },
    registerVars: function() {
        this.curStep = 0;
        this.steps = [{
            name: "create",
            component: "experienceEditor"
        }, {
            name: "target",
            component: "oneToOneTarget"
        }, {
            name: "settings",
            component: "oneToOneSettings"
        }];
        this.activityBackupAttributes = null;
        this.additionalProperties = ["algorithms", "reportingSolution"];
        this.on("component:hidden", this._hideExploreInfo)
    },
    getNewActivityTooltip: function() {
        if(_.isUndefined(this.components.oneToOneEditorTooltip)) {
            this.addComponent(new ELM.Activities.OneToOneEditorTooltip({
                activityType: this.model.getActivityType()
            }))
        }
        return this.components.oneToOneEditorTooltip
    },
    registerBinders: function() {
        this.superClass.registerBinders.apply(this, arguments);
        this.bind(this.updateTitle);
        this.bind(this.backupInitialState);
        this.bind(this.fetchAlgorithms);
        this.bind(this.updateTrafficEstimator);
        this.bind(this.updateTrafficEstimatorState);
        this.bind(this.updateToolbarWidgets);
        this.bind(this.setExperienceEditorMode);
        this.bind(this.updateUrlSettings);
        this.bind(this.undoAction);
        this.bind(this.redoAction);
        this.bind(this.showManageContentDialog);
        this.bind(this.updateToolbarTitle);
        this.bind(this.updateExclusions);
        this.bind(this.showPreviewTooltipOnce);
        this.bind(this._hideExploreInfo);
        this.bind(this.showExperienceEditorForClickTrackMode);
        this.bind(this.updateUndoRedoIcons)
    },
    registerGlobalTriggers: function() {
        F.on("1-1:metric:showClickTracking MVT:metric:showClickTracking", this.showExperienceEditorForClickTrackMode)
    },
    unRegisterGlobalTriggers: function() {
        F.off("1-1:metric:showClickTracking MVT:metric:showClickTracking", this.showExperienceEditorForClickTrackMode)
    },
    registerListeners: function() {
        var a = this;
        this.on("model:loaded", function() {
            a.fetchAlgorithms();
            a.resetTrafficEstimator();
            a.listenTo(a.model, "change:locations", a.updateToolbarWidgets);
            a.listenTo(a.model, "change:exclusions", a.updateToolbarWidgets);
            a.listenTo(a.model, "change:startDate", a.updateTrafficEstimator);
            a.listenTo(a.model, "change:endDate", a.updateTrafficEstimator)
        })
    },
    initializeWidgets: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: "#one-to-one-wizard",
            component: this,
            onPageChanged: {
                step3: function() {
                    if(a.isViewMode) {
                        a.wizard.setNextButtonLabel(Granite.I18n.get("Close"))
                    }
                }
            },
            onNextButtonClick: function() {
                return a.nextStep()
            },
            onBackButtonClick: function() {
                return a.prevStep()
            },
            onLeaving: function() {
                a.checkAndShowIfWarningNeeded()
            }
        })
    },
    addSubComponents: function() {
        this.addToolbar();
        this.addTemplateTestingComponent();
        this.addEditableLabel();
        this.addOneToOneTarget();
        this.addOneToOneSettings();
        this.addUnsavedDialog();
        this.addErrorDialog();
        this.addContentPicker();
        this.addCdqClient()
    },
    addToolbar: function() {
        var a = this;
        this.addComponent(new ELM.Activities.OneToOneExperienceEditor.Toolbar({
            el: this.view.$("#one-to-one-toolbar"),
            model: {
                type: "1-1",
                mode: "build"
            },
            visible: true
        }), "oneToOneToolbar").on("action:preview", function(b) {
            a.setExperienceEditorMode(b)
        }).on("action:preview", this.showPreviewTooltipOnce).on("action:build", this.setExperienceEditorMode).on("action:interact", this.setExperienceEditorMode).on("action:url", this.updateUrlSettings).on("action:undo", this.undoAction).on("action:redo", this.redoAction).on("action:title", this.updateTitle).on("action:content", this.showManageContentDialog).on("action:exclude", this.updateExclusions).on("action:hideFrame", this.hideFrame, this).on("action:showFrame", this.showFrame, this).on("action:updateFrameSource", this.updateFrameSource, this).on("action:reloadFrame", this.reloadFrame, this).on("action:getActivityUrl", this.getActivityUrl, this).on("action:getBuildModeUrl", this.getBuildModeUrl, this).on("action:showControlUrlChangeNotification", this.showControlUrlChangeNotificationInEE, this)
    },
    addTrafficEstimator: function() {
        var a = this.getTrafficEstimator();
        this.addComponent(new a({
            el: this.view.$("#trafficEstimatorPopover div"),
            visible: true,
            trafficStatusNotificationOptions: {
                pointAtEl: this.view.$(".icon-bell")
            }
        }), "trafficEstimatorPopover")
    },
    getTrafficEstimator: function() {
        if(this.model.getActivityType() === ELM.Activities.activityTypes.ONE_TO_ONE) {
            return ELM.Activities.TrafficEstimatorPopoverOneToOne
        }
        return ELM.Activities.TrafficEstimatorPopoverMVT
    },
    addEditableLabel: function() {
        this.addComponent(new ELM.EditableLabel({
            el: this.view.$(".title"),
            visible: true
        }), "oneToOneTitle").on("change", this.updateTitle)
    },
    updateTitle: function(a) {
        this.model.setTitle(a.value)
    },
    _hideExploreInfo: function() {
        this.getNewActivityTooltip().hide()
    },
    addOneToOneExperienceEditor: function() {
        var a = this;
        this.addComponent(new ELM.Activities.OneToOneExperienceEditor({
            el: this.view.$("#one-to-one-ee"),
            visible: false
        }), "experienceEditor").on("experienceEditor:loaded", this.backupInitialState).on("component:hidden", this._hideExploreInfo).on("ee:experience:preview", this.updateToolbarTitle).on("experience:select:excluded", function(b) {
            var d = a.components.oneToOneToolbar,
                c = a.model.getExclusionsLimitLeft(),
                e;
            if(!b) {
                throw new Error("ELM.Activities.OneToOneEditor: OneToOneExperienceEditor must provide event with parameter")
            }
            e = c === 0 || b.length > a.model.getExclusionsLimitLeft();
            d.updateExcludeButton(e)
        }).on("checkAll", function(b) {
            var c = a.components.oneToOneToolbar;
            if(c) {
                c.updateExcludeButton(b)
            }
        }).on("ee:toggleSwitchToInteractMode", this.toggleSwitchToInteractMode).on("action:updateUndoRedoIcons", this.updateUndoRedoIcons)
    },
    addOneToOneTarget: function() {
        this.addComponent(new ELM.Activities.OneToOneTarget({
            el: this.view.$("#one-to-one-target"),
            visible: false
        }), "oneToOneTarget").on("show:templateTestingModal", this.updateUrlSettings).on("choose:audience", this.showAudiencePicker)
    },
    addOneToOneSettings: function() {
        this.addComponent(new ELM.Activities.Settings({
            el: this.view.$("#one-to-one-settings"),
            visible: false
        }), "oneToOneSettings").on("chooseReportingAudience", this.showAudiencePicker)
    },
    addContentPicker: function() {
        this.addComponent(new ELM.Activities.OneToOneContentPicker({
            el: this.view.$("#one-to-one-content-picker"),
            visible: false
        }))
    },
    showExperienceEditorForClickTrackMode: function(a) {
        var b = a.previousTemplates || ELM.Util.clone(this.model.getTemplates());
        this.destructEditorModes();
        this.addClickTrackMode();
        this.components.oneToOneEEClickTrackMode.authenticateAndShowExperienceEditor({
            model: this.model,
            cdq: this.cdq,
            templates: b,
            metricComponent: a.metricComponent,
            clickedElements: a.clickedElements
        })
    },
    addClickTrackMode: function() {
        var a = "oneToOneEEClickTrackMode",
            b = this.components.oneToOneSettings,
            c = this;
        this.addComponent(new ELM.Activities.OneToOneExperienceEditor.ClickTrackMode({
            el: $("#one-to-one-ee-clickTrackMode"),
            visible: false
        }), a).on("saveTrackedElements", function() {
            var e = c.components[a],
                d = e.getMetricComponent(),
                f = e.getClickedElements();
            c.cdq.showUnloadWarning(false);
            b.saveClickedElements(d, f);
            e.close()
        })
    },
    getCompareParams: function() {
        return {
            ignoreKeys: _.union(this.additionalProperties, ["thumbnailSrc"]),
            ignoreKeysOfArrayElements: {
                metrics: ["isGoalMetric"]
            }
        }
    },
    backupInitialState: function() {
        this.activityBackupAttributes = this.activityBackupAttributes || this.model.createBackUp()
    },
    showEditor: function(a) {
        if(a.model) {
            this.load(a.model);
            this.isViewMode = a.isViewMode || false;
            if(this.isViewMode) {
                ELM.Util.showNoticeNotification({
                    message: Granite.I18n.get("You do not have sufficient privileges to edit the activity. However, you can still view it.")
                })
            }
            if(ELM.isAnalyticsEnabledForRecsMVT && this.model.getActivityType() !== ELM.Activities.activityTypes.ONE_TO_ONE) {
                this.model.initReportingSolution()
            }
        }
        this.switchToStep(a.curStep || 0);
        this.show();
        if(a.isNew) {
            this.getNewActivityTooltip().setActivityType(a.model.getActivityType()).showExploreTooltip()
        }
    },
    showStep: function(a) {
        var c = this.steps[a],
            b = {
                model: this.model
            };
        this.destructEditorModes();
        if(!a) {
            this.addOneToOneExperienceEditor();
            _.extend(b, {
                cdq: this.cdq
            });
            this.showToolbar()
        }
        this.components[c.component].show(b);
        this.showEditableLabel()
    },
    showToolbar: function() {
        this.components.oneToOneToolbar.init({
            title: this.model.getTitle(),
            mode: "build",
            type: this.model.getActivityType()
        }).show();
        this.addTrafficEstimator();
        this.updateTrafficEstimator();
        this.updateToolbarWidgets()
    },
    showEditableLabel: function() {
        this.components.oneToOneTitle.show({
            model: {
                title: this.model.getTitle(),
                placeholder: Granite.I18n.get("Untitled Activity"),
                required: false,
                maxlength: 200
            },
            silent: true
        })
    },
    navigateToPreviousPage: function() {
        this.components.experienceEditor.cdq.showUnloadWarning(false);
        this.view.hide();
        this.inherited(arguments)
    },
    fetchAlgorithms: function() {
        if(this.model.getActivityType() === ELM.Activities.activityTypes.MVT) {
            return
        }
        var a = this;
        new ELM.Models.ProfileTargetedAlgorithms().fetch({
            success: function(c, b) {
                a.model.setAlgorithms(b.items)
            }
        })
    },
    resetTrafficEstimator: function() {
        if(this.components.trafficEstimatorPopover) {
            this.components.trafficEstimatorPopover.model.reset();
            this.updateTrafficEstimator()
        }
    },
    areLocationsEmpty: function() {
        return this.model.getLocations().length === 0
    },
    saveActivity: function() {
        var e = this,
            f = this.components.oneToOneSettings,
            c = f.metrics,
            g = this.areLocationsEmpty(),
            b = {},
            d = this.view.$(".save-continue-button"),
            a = Granite.I18n.get("DD MMM. YYYY HH:mm:ssZ", null, "Date format pattern for moment.js. e.g. 12 Jun. 2014 13:00+5:30 (http://momentjs.com/docs)");
        d.attr("disabled", "disabled");
        if(!f.isReportSuiteValid()) {
            this.switchToStep(2);
            return
        }
        if(c && c.hasMetricsToBeSaved() && !c.validateMetrics()) {
            this.switchToStep(2);
            c = f.metrics;
            c.validateMetrics();
            return
        }
        d.attr("disabled", "disabled");
        if(!this.model.getTitle()) {
            this.model.setTitle(this.model.getTitleOrDefault() + " " + moment().format(a))
        }
        _.each(this.additionalProperties, function(h) {
            b[h] = undefined
        });
        this.showWaitMessage(Granite.I18n.get("Please wait while we save your activity."));
        this.model.save(b, {
            wait: true,
            success: function(h) {
                if(g) {
                    F.trigger("infoNotification", {
                        message: Granite.I18n.get("{0} will stay in draft status until experiences are edited.", h.getTitle()),
                        heading: Granite.I18n.get("Note")
                    })
                } else {
                    F.trigger("successNotification", {
                        message: Granite.I18n.get("{0} has been saved.", h.getTitle()),
                        heading: Granite.I18n.get("Success")
                    })
                }
                e.trigger("model:saved", h)
            },
            error: function(j, h) {
                var i = JSON.parse(h.responseText);
                d.removeAttr("disabled");
                F.trigger("errorNotification", {
                    message: i["error.message"],
                    heading: Granite.I18n.get("ERROR")
                })
            }
        })
    },
    destructEditorModes: function() {
        var b = ["experienceEditor", "oneToOneEEClickTrackMode"];
        for(var a in this.components) {
            if(b.indexOf(a) != -1) {
                this.components[a].destroy();
                this.components[a].isSetup = false
            }
        }
        this.cdq.domListeners = {};
        this.cdq.domListenersCount = 0;
        this.cdq.requests = [];
        return this
    },
    updateToolbarWidgets: function() {
        var b, a;
        b = this.model.getGeneratedExperiencesNumber();
        a = this.model.getExperiencesAfterExclusionOrGeneratedExperiencesNumber();
        this.components.oneToOneToolbar.updateCounts(b, b - a);
        if(this.model.getActivityType() === ELM.Activities.activityTypes.MVT) {
            this.components.oneToOneToolbar.togglePreviewButton(this.model.getLocationsNumber() > 0)
        }
        this.updateTrafficEstimatorState(a)
    },
    updateTrafficEstimatorState: function(b) {
        var a = this.components.trafficEstimatorPopover;
        if(this.model.getLocations().length > 1) {
            a.enable().setExperienceCount(b)
        } else {
            a.disable()
        }
    },
    updateTrafficEstimator: function() {
        this.components.trafficEstimatorPopover.setActivityDates(this.model.getStartDate(), this.model.getEndDate())
    },
    showPreviewTooltipOnce: function() {
        if(this.model.isNew()) {
            this.getNewActivityTooltip().showPreviewTooltip();
            this.components.oneToOneToolbar.off("action:preview", this.showPreviewTooltipOnce)
        }
    },
    setExperienceEditorMode: function(c) {
        var a = {},
            b = this.components.oneToOneToolbar.components.interactModeToolbar;
        a.interactModeModel = b ? b.model : {};
        if(c === "preview") {
            this.updateToolbarView()
        }
        this.components.experienceEditor.changeMode(c, a)
    },
    updateToolbarView: function() {
        this.components.oneToOneToolbar.updateExcludeButton(this.model.getExclusionsLimitLeft() === 0)
    },
    showManageContentDialog: function() {
        this.components.experienceEditor.showManageContentDialog()
    },
    undoAction: function() {
        this.components.experienceEditor.execUndoAction(this.components.oneToOneToolbar)
    },
    redoAction: function() {
        this.components.experienceEditor.execRedoAction(this.components.oneToOneToolbar)
    },
    updateUndoRedoIcons: function(a) {
        this.components.oneToOneToolbar.updateUndoRedoIcons(a)
    },
    updateToolbarTitle: function(a) {
        this.components.oneToOneToolbar.setIndex(a + 1)
    },
    updateExclusions: function(d) {
        var b = this.components.experienceEditor,
            e = b.components.oneToOnePreviewPanel,
            c, f, a = e.getCheckedItems(d);
        c = d === true;
        f = a.length > this.model.getExclusionsLimitLeft();
        if(c && f) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("You are only allowed to exclude up to {0} experiences for an optimal multivariate test design", this.model.getExclusionsLimit()),
                heading: Granite.I18n.get("ERROR")
            });
            return
        }
        if(!_.isEmpty(a)) {
            this.model.updateExperiencesState(a, d);
            this.updateToolbarView();
            b.renderPreviewPanel()
        }
    },
    hideFrame: function() {
        this.components.experienceEditor.hideFrame()
    },
    showFrame: function() {
        this.components.experienceEditor.showFrame()
    },
    updateFrameSource: function(a) {
        this.components.experienceEditor.updateFrameSource(a)
    },
    reloadFrame: function() {
        this.components.experienceEditor.reloadFrame()
    },
    toggleSwitchToInteractMode: function() {
        var a;
        if(this.isInteractMode()) {
            a = this.components.oneToOneToolbar.view.$(".build-mode-toggle input[data-mode=interact]");
            a.prop("checked", true);
            a.focus()
        }
    },
    showControlUrlChangeNotificationInEE: function(a) {
        this.components.experienceEditor.showControlUrlChangeNotification(a.url, a.reloadOnCancel, a.callbackOnDialogAction)
    }
});
ELM.Activities.OneToOneExperienceEditor = new Class({
    toString: "OneToOneExperienceEditor",
    extend: ELM.Activities.ExperienceEditor,
    LOCATION_MINIMUM: 2,
    EXPERIENCES_MINIMUM: 5,
    View: F.View.extend({
        events: {
            "click .script-use-notification .close": "hideScriptUseNotification",
            'click input[type="checkbox"]': "updateCheckAll",
            "click #checkAll": "updateCheckboxes"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerGlobalTriggers();
        this.cacheSelectors();
        this.addSubComponents()
    },
    initView: function(a) {
        this.view = new this.View({
            el: $('<div class="experienceEditorOneToOneMode height-100p" tabindex="0" />').appendTo(a),
            component: this,
            template: ELM.Activities.Templates.OneToOneExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleScroll);
        this.bind(this.resetHoverBox);
        this.bind(this.resetSelectedBox);
        this.bind(this.resetSelection);
        this.bind(this.handleThumbnailGenerate);
        this.bind(this.startHostLoadingProgress);
        this.bind(this.stopHostLoadingProgress);
        this.bind(this.handleHostLoadTimeout);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleKeyBoardEvents);
        this.bind(this._saveOffers);
        this.bind(this._saveTextOffers);
        this.bind(this._saveHTMLOffers);
        this.bind(this.onContentPickerClosed);
        this.bind(this.addNewLocation);
        this.bind(this.handleContentDeletion);
        this.bind(this.deleteLocation);
        this.bind(this.showDefaultImage);
        this.bind(this._hideExploreInfo);
        this.bind(this.removeOffer);
        this.bind(this.previewExperience);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.handleUnsavedDialogClose);
        this.bind(this.updateUndoRedoIcons)
    },
    registerVars: function() {
        var b = this,
            a;
        this.defaultDialogButtons = [{
            label: Granite.I18n.get("Cancel"),
            click: function() {
                this.hide();
                b.resetBoxes()
            }
        }, {
            label: Granite.I18n.get("Save"),
            className: "primary",
            click: function(c) {
                b.dialogSave();
                c.dialog.hide()
            }.bind(this)
        }];
        this.initialState = null;
        this.generateNewExperiences = false;
        this.inherited(arguments);
        a = this.view.$(".explore-info-background").appendTo("body").click(function() {
            a.hide()
        });
        this.$exploreInfoBg = a;
        this.on("hideExploreInfo", this._hideExploreInfo)
    },
    registerGlobalTriggers: function() {
        F.on("1-1:content:selected MVT:content:selected", this._saveOffers);
        F.on("1-1:content-picker:closed MVT:content-picker:closed", this.onContentPickerClosed);
        F.on("1-1:offer:deleted MVT:offer:deleted", this.handleContentDeletion)
    },
    unRegisterGlobalTriggers: function() {
        F.off("1-1:content:selected MVT:content:selected", this._saveOffers);
        F.off("1-1:content-picker:closed MVT:content-picker:closed", this.onContentPickerClosed);
        F.off("1-1:offer:deleted MVT:offer:deleted", this.handleContentDeletion)
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    cacheSelectors: function() {
        this.$previewPanel = this.view.$(".preview-panel");
        this.$frameView = this.view.$(".frame-view");
        this.inherited(arguments)
    },
    addSubComponents: function() {
        this.addExperienceEditorActionMenu();
        this.addManageContentDialog();
        this.addContentLogic();
        this.addLocationLogic();
        this.addPreviewPanel();
        this.inherited(arguments);
        this._addSingletonActionTracker()
    },
    addExperienceEditorActionMenu: function() {
        this.addComponent(new ELM.Activities.OneToOneExperienceEditor.ActionMenu({
            el: $('<div class="experienceEditorPopover min-width-12 max-width-20-875" id="one-to-one-action-menu" />').appendTo(document.body),
            component: this
        }), "oneToOneActionMenu")
    },
    addPreviewPanel: function() {
        var a = this;
        this.addComponent(new ELM.Activities.OneToOneExperienceEditor.PreviewPanel({
            el: this.$previewPanel.find("#preview-panel-list"),
            visible: false
        }), "oneToOnePreviewPanel").on("experience:preview", this.previewExperience).on("experience:select:excluded", function(b) {
            a.trigger("experience:select:excluded", b)
        })
    },
    _getCurrentLocation: function(b) {
        var a = this.lastData.location;
        if(!a) {
            a = {
                type: b
            }
        }
        return a
    },
    _hideExploreInfo: function() {
        this.$exploreInfoBg.hide()
    },
    showExploreTooltip: function() {
        this.$exploreInfoBg.find(".tooltip").hide();
        this.$exploreInfoBg.find(".explore-info").show();
        this.$exploreInfoBg.show()
    },
    showPreviewTooltip: function() {
        this.$exploreInfoBg.find(".tooltip").hide();
        this.$exploreInfoBg.find(".preview-info").show();
        this.$exploreInfoBg.show()
    },
    addLocationLogic: function() {
        var c = this,
            a = this.components.oneToOneActionMenu,
            b = this.addComponent(new ELM.Activities.ExperienceEditor.LocationNameDialog(), "locationNameDialog"),
            d;
        a.on("renameLocation", function(e) {
            d = e.location;
            b.showDialog(e.location["jcr:title"])
        });
        b.on("done", function(f) {
            var e;
            if(_.isEmpty(f)) {
                e = Granite.I18n.get("Location name cannot be empty.")
            } else {
                if(!c.model.isLocationNameUnique(f)) {
                    e = Granite.I18n.get("Location name cannot be a duplicate.")
                }
            }
            if(!_.isEmpty(e)) {
                b.handleError(e)
            } else {
                b.closeDialog();
                c._renameLocation(d, f)
            }
        });
        a.on("deleteLocation", this.deleteLocation)
    },
    _renameLocation: function(i, a, c, l) {
        var f = ELM.Util.clone(i),
            j = this.currentLocationIndex,
            h = this,
            k, g, d, e, b;
        if(c) {
            i = this.model.getLocationBySelector(l.location.selector);
            a = l.location["jcr:title"]
        }
        i["jcr:title"] = a;
        this._setLocationTitle(i);
        k = ELM.Util.clone(i);
        if(!c) {
            g = {
                data: null,
                locationIndex: j,
                location: f
            };
            d = function() {
                h._renameLocation(null, null, true, g)
            };
            e = {
                data: null,
                locationIndex: j,
                location: k
            };
            b = function() {
                h._renameLocation(null, null, true, e)
            };
            this.actionTracker.addAction(d, b, "AP_LOCATION")
        }
    },
    addContentLogic: function() {
        var c = this,
            a = this.components.oneToOneActionMenu,
            b = this.addComponent(new ELM.Activities.ExperienceEditor.TextOffers(), "textOffers"),
            d = this.addComponent(new ELM.Activities.ExperienceEditor.HTMLOffers(), "htmlOffers");
        b.on("done", function(e) {
            c._saveTextOffers(e)
        });
        d.on("done", function(e) {
            c._saveHTMLOffers(e)
        });
        a.on("changeText", function(f) {
            var e = c.getDefaultOffer(f, "text");
            b.showDialog(e)
        });
        a.on("changeHTML", function(f) {
            var e = c.getDefaultOffer(f, "html");
            d.showDialog(e)
        });
        a.on("changeImage", function(f) {
            var e = c.getDefaultImageOffer(f);
            c.showImageContentPicker(e)
        });
        a.on("editContent", function(h) {
            var f = h.location,
                e = f.type,
                g = f.offers;
            switch(e) {
                case "text":
                    c.updateContentInOffers(g);
                    b.showDialog(g);
                    return;
                case "html":
                    c.updateContentInOffers(g);
                    d.showDialog(g);
                    return;
                case "image":
                    c.showImageContentPicker(g)
            }
        });
        a.on("showDefaultImage", this.showDefaultImage);
        a.on("removeOffer", this.removeOffer)
    },
    updateContentInOffers: function(a) {
        var b = this;
        _.each(a, function(c) {
            if(c["ref:offer"]) {
                b.offerRequest({
                    url: c["ref:offer"],
                    async: false
                }).done(function(d) {
                    c.content = d
                })
            }
        })
    },
    showImageContentPicker: function(a) {
        F.trigger(ELM.evtNamespace + ":ee:selectOffer", {
            offerType: "imageOffer"
        }, a)
    },
    getDefaultOffer: function(c, a) {
        var b = {
            text: Granite.I18n.get("[Default Text Offer]"),
            html: Granite.I18n.get("[Default HTML Offer]")
        }[a];
        return [{
            "jcr:title": b,
            content: c.innerHTML,
            isDefault: true,
            included: true
        }]
    },
    getDefaultImageOffer: function(a) {
        return [{
            isDefault: true,
            "jcr:title": Granite.I18n.get("[Default Image]"),
            "ref:offer": a.src,
            included: true
        }]
    },
    addActionHandlerDialog: function() {
        this.dialog = new CUI.Modal({
            element: $('<div class="actionHandlerDialog" />').appendTo(document.body),
            visible: false,
            heading: "",
            content: "",
            buttons: this.defaultDialogButtons
        })
    },
    addManageContentDialog: function() {
        this.addComponent(new ELM.Activities.OneToOneManageContentDialog(), "manageContentDialog")
    },
    showManageContentDialog: function() {
        this.components.manageContentDialog.show({
            model: this.model,
            silent: true
        })
    },
    execUndoAction: function(a) {
        this.actionTracker.undoAction()
    },
    execRedoAction: function(a) {
        this.actionTracker.redoAction()
    },
    setActivityUrl: function(a) {
        var b = this.model.getTemplates();
        b.activityUrl = a
    },
    getActivityUrl: function() {
        return this.model.getActivityUrl()
    },
    setup: function() {
        var a = this.getActivityUrl() || ELM.defaultSimulatorUrl;
        this.setOffsetTop(152);
        this.setPath([]);
        this.setCurrentExperienceIndex(-1);
        this.setLastExperienceIndex(-1);
        this.setControlString(" [Control]");
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("mode", this.mode);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setBuildModeUrl(a);
        this.startHostLoadingProgress();
        this.isHostLoaded = false;
        this.frame.src = this.getProxiedUrl({
            url: a
        });
        this.mixContentCheck();
        this.addActionHandlerDialog();
        this.actionMenuPopover = this.components.oneToOneActionMenu.popover;
        this.isSetup = true
    },
    showExperienceEditor: function() {
        this.setMode("1-1");
        this.addCdqClientListeners();
        if(!this.isSetup) {
            this.setup()
        }
        this.showFrame();
        this.resetHostSite(true)
    },
    show: function(a) {
        var b = this;
        this.loadModel(a.model);
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.authenticateAndShowExperienceEditor(function() {
            b.showExperienceEditor()
        });
        this.view.show();
        this.options.visible = true;
        if(this.mvtActivityWasActivated()) {
            this.showWarningForLiveActivity()
        }
    },
    applyExperience: function() {},
    changeMode: function(b, a) {
        this.inherited(arguments);
        if(this.isOneToOneMode()) {
            this.centerFrameView();
            this.hidePreviewPanel()
        }
        if(this.isInteractMode()) {
            this.setInteractModeModel(a.interactModeModel)
        }
        this.updateEditorMode()
    },
    updateEditorMode: function() {
        if(this.isPreviewMode()) {
            this.switchToOneToOnePreviewMode();
            this.renderPreviewPanel();
            this.moveFrameView();
            this.showPreviewPanel()
        }
        if(this.isOneToOneMode()) {
            if((this.getPreviousMode() === this.modes.INTERACT) && (this.interactModeModel)) {
                this.resetJavaScriptInEE();
                this.showModeChangeNotification(this.messages.SWITCHED_TO_BUILD)
            }
            this.generateNewExperiences = false;
            this.resetSelectedOfferForLocations();
            this.switchToOneToOneMode()
        }
        if(this.isInteractMode()) {
            var a = this.messages.SWITCHED_TO_INTERACT;
            if(this.isProxyEnabled()) {
                a += this.messages.WARN_JS_LINKS
            }
            this.switchToInteractMode();
            if(this.interactModeModel && this.interactModeModel.getHistory().length === 1) {
                this.showModeChangeNotification(a)
            }
        }
        this.hideActionButtons();
        this.resetSelectedBox()
    },
    switchToOneToOneMode: function() {
        this.cdq.updatePageState("IS_INTERACT", false);
        this.cdq.updatePageState("IS_PREVIEW", false);
        this.cdq.updatePageState("IS_HOVER_DISABLED", false);
        this.cdq.removeListener(this.clickListenerId);
        this.cdq.removeListener(this.formListenerId);
        this.cdq.copyAttribute("a", this.cdqPrefix + "href", "href");
        this.cdq.removeAttribute("a", this.cdqPrefix + "href");
        this.cdq.copyAttribute("a", this.cdqPrefix + "target", "target");
        this.cdq.removeAttribute("a", this.cdqPrefix + "target");
        this.clickListenerId = this.cdq.addListener("*", "at-click", this.handleHostClick, null, true, true);
        this.formListenerId = this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.removeAttributesToAvoidNavigation();
        this.cdq.addListener("document", "scroll", this.handleScroll);
        this.cdq.setStyle(".AT_border", "visibility", "visible");
        this.resetHoverBox()
    },
    switchToOneToOnePreviewMode: function() {
        this.cdq.updatePageState("IS_INTERACT", false);
        this.cdq.updatePageState("IS_PREVIEW", true);
        this.cdq.updatePageState("IS_HOVER_DISABLED", true);
        this.cdq.removeListener(this.clickListenerId);
        this.cdq.removeListener(this.formListenerId);
        this.clickListenerId = this.cdq.addListener("*", "at-click", null, null, true, true);
        this.formListenerId = this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.removeAttributesToAvoidNavigation();
        this.cdq.addListener("document", "scroll", this.handleScroll);
        this.cdq.copyAttribute("img", "src");
        this.cdq.setStyle(".AT_border", "visibility", "hidden")
    },
    renderPreviewPanel: function() {
        this.reGenerateExperiences();
        this.components.oneToOnePreviewPanel.show({
            silent: true,
            collection: this.model.getExperiences(),
            excludedExperiencesCount: this.model.getExcludedExperiencesNumber()
        });
        this.resetCheckAllCheckbox();
        this.previewExperience(0)
    },
    reGenerateExperiences: function() {
        if(this.generateNewExperiences || !this.model.getExperiencesNumber()) {
            this.saveExperiences();
            this.generateNewExperiences = false
        }
    },
    updateCheckAll: function(a) {
        var b = a.currentTarget;
        if(!b.checked) {
            this.resetCheckAllCheckbox()
        } else {
            if(this.components.oneToOnePreviewPanel.areAllCheckboxesSelected()) {
                this.selectCheckAllCheckbox();
                this.trigger("checkAll", true)
            }
        }
    },
    updateCheckboxes: function(a) {
        if(a.target.checked) {
            this.components.oneToOnePreviewPanel.checkAllCheckboxes()
        } else {
            this.components.oneToOnePreviewPanel.uncheckAllCheckboxes()
        }
        this.trigger("checkAll", a.target.checked)
    },
    resetCheckAllCheckbox: function() {
        this.view.$("#checkAll").removeAttr("checked")
    },
    selectCheckAllCheckbox: function() {
        this.view.$("#checkAll").attr("checked", "checked")
    },
    _setOfferContent: function(a) {
        var c = this,
            i = this.cdq,
            e = this.model.getLocations(),
            d = a.locationLocalId,
            j = a.offerLocalId,
            k = e[d],
            f = k.type,
            b = this.model.getSelectorFromLocation(k),
            h = k.offers[j];
        if(f === "image") {
            var g = h["ref:offer"];
            if(g.indexOf("http") === -1) {
                g = window.location.protocol + "//" + window.location.host + g
            }
            i.getSelector(b, function(l) {
                l.el.src = g;
                i.setAttribute(b, "style", c.getStripesStyle(l.el))
            })
        } else {
            if(h["ref:offer"]) {
                this.offerRequest({
                    url: h["ref:offer"]
                }).done(function(l) {
                    h.content = l;
                    c.setContent({
                        selector: b,
                        type: f,
                        content: h.content
                    })
                })
            } else {
                c.setContent({
                    selector: b,
                    type: f,
                    content: h.content
                })
            }
        }
    },
    previewExperience: function(a) {
        var b = this.model.getExperienceByIndex(a).offerlocations;
        this.trigger("ee:experience:preview", a);
        _.each(b, this._setOfferContent, this)
    },
    handleHostClick: function(d) {
        var c = this,
            a = d.el,
            e = a.path,
            b = a.className;
        if((b && b.indexOf("AT_click_disabled") > -1) || !d.evt.isATEvent) {
            return false
        }
        if(a.innerHTML.match(/(<([^>]+)>)/ig)) {
            d.hasHtml = true
        }
        if((b && b.indexOf("AT_location") != -1)) {
            this.cdq.getSelector("#" + a.id, function(f) {
                d.location = c.model.getLocationBySelector(f.selector);
                c.currentLocationIndex = c.model._getLocationIndex(d.location["jcr:title"]);
                d.el.originalTagName = d.el.tagName;
                d.el.tagName = "LOCATION";
                c.cdq.sendGetAttributeRequest("#" + a.id, "data-selected", function(g) {
                    d.selected = g.value;
                    c.actionMenuAdjustPosition(d)
                })
            })
        } else {
            this.checkForMultipleElements("#" + a.id);
            this.actionMenuAdjustPosition(d)
        }
        this.pageOriginalOffsetY = d.evt.pageYOffset;
        this.pageOriginalOffsetX = d.evt.pageXOffset;
        if(typeof e === "string") {
            d.el.path = JSON.parse(e)
        }
        this.lastData = d;
        this.setPath(d.el.path);
        this.lastChild = this.getPathLength() - 1
    },
    backupInitialState: function() {
        this.initialState = this.initialState || this.model.createBackUp()
    },
    hasChanged: function() {
        if(!this.initialState) {
            return true
        }
        return ELM.Util.hasChanged(this.model, this.initialState, {
            ignoreKeys: ["thumbnailSrc"]
        })
    },
    handleHostLoad: function(c) {
        var a = c.location = this.getOriginalUrl({
                url: c.location
            }),
            b = '[data-mboxname="' + ELM.customGlobalMbox + '"]';
        if(this.isInteractMode()) {
            this.initializeAfterLoadInInteractMode(a);
            return
        }
        this.setActivityUrl(a);
        this.updatePage();
        this.cdq.showUnloadWarning(true, function() {
            this.isHostLoaded = true;
            if(!this.model.getThumbnailSrc()) {
                this.generateThumbnail(0)
            }
            this.actionMenuPopover.hide();
            this.cdq.setStyle(b, "display", "none");
            this.updateEditorMode();
            this.stopHostLoadingProgress();
            this.view.$(".unableToLoadPageNotifier").addClass("hidden");
            this.checkForScriptTagInLocations();
            this.backupInitialState();
            this.trigger("experienceEditor:loaded")
        }.bind(this))
    },
    handleHostLoadTimeout: function() {
        this.stopHostLoadingProgress(true);
        this.hideProgressNotifier();
        if(this.isVisible()) {
            F.trigger("errorNotification", {
                message: this.messages.timeoutError,
                heading: Granite.I18n.get("ERROR")
            })
        }
    },
    handleScroll: function(a) {
        a.pageInfo = {
            topOffset: this.getOffsetTop(),
            leftOffset: this.leftOffset,
            pageOriginalOffsetX: this.pageOriginalOffsetX,
            pageOriginalOffsetY: this.pageOriginalOffsetY
        };
        this.components.oneToOneActionMenu.adjustPopoverOnScroll(a)
    },
    handleContentDeletion: function(b) {
        var a = this.model.getLocations()[b];
        if(a) {
            this._resetSelectedOfferForLocation(a)
        }
    },
    actionMenuAdjustPosition: function(a) {
        this.components.oneToOneActionMenu.adjustPosition(a)
    },
    handleThumbnailGenerate: function(b) {
        var c = moment().unix() + ".png",
            a = this;
        this.saveThumbnail(b.thumbnail, c, function(d) {
            a.model.setThumbnailSrc(d)
        })
    },
    _saveTextOffers: function(a) {
        this._saveOffers(a.toJSON(), "text")
    },
    _saveHTMLOffers: function(a) {
        this._saveOffers(a.toJSON(), "html")
    },
    _addSingletonActionTracker: function() {
        if(!this.actionTracker) {
            this.actionTracker = new ELM.ActionTracker();
            this.actionTracker.on("action:updateUndoRedoIcons", this.updateUndoRedoIcons)
        }
    },
    updateUndoRedoIcons: function() {
        this.trigger("action:updateUndoRedoIcons", this.actionTracker)
    },
    _saveOffers: function(q, d, f, b) {
        var a, r = this.lastData,
            h = this.currentLocationIndex,
            e = this,
            p, c, i, n, l, k, j, m, g;
        if(!f) {
            p = ELM.Util.clone(r)
        } else {
            r = this.lastData = ELM.Util.clone(b.data);
            h = b.locationIndex;
            d = b.location.type;
            q = b.location.offers
        }
        if(d === "htmlOffer") {
            this.components.htmlOffers.addOffers(q)
        } else {
            d = (d === "imageOffer") ? "image" : d;
            if(!f) {
                a = this._getCurrentLocation(d);
                m = a["jcr:title"]
            } else {
                a = ELM.Util.clone(b.location);
                var o = this.model.getLocationBySelector(a.selector);
                if(o) {
                    m = o["jcr:title"]
                }
            }
            g = f && b.data.location && b.data.location["jcr:title"];
            c = ELM.Util.clone(a);
            if(d === "image") {
                a.width = parseInt(r.el.style.width);
                a.height = parseInt(r.el.style.height)
            }
            if(!m) {
                a.offers = q;
                this.addNewLocation(a);
                i = "deleteLocation"
            } else {
                if(f) {
                    q = b.data.location.offers
                }
                i = "saveOffers";
                this.model.setLocationOffers(h, q);
                a.offers = q;
                this._resetSelectedOfferForLocation(a);
                F.trigger("successNotification", {
                    message: Granite.I18n.get("Offers saved for {0}", a["jcr:title"]),
                    heading: Granite.I18n.get("Success")
                })
            }
            if(g) {
                a["jcr:title"] = g;
                this._setLocationTitle(a)
            }
            if(d !== "image") {
                this.checkForScriptTagInLocation(a)
            }
            if(!f) {
                if(i == "deleteLocation") {
                    n = {
                        data: r,
                        locationIndex: h,
                        location: a
                    };
                    l = function() {
                        e.deleteLocation(null, true, n)
                    }
                } else {
                    n = {
                        data: p,
                        locationIndex: h,
                        location: c
                    };
                    l = function() {
                        e._saveOffers(null, null, true, n)
                    }
                }
                k = {
                    data: ELM.Util.clone(r),
                    locationIndex: h,
                    location: a
                };
                j = function() {
                    e._saveOffers(null, null, true, k)
                };
                this.actionTracker.addAction(l, j, "AP_LOCATION")
            }
        }
        this.generateNewExperiences = true
    },
    onContentPickerClosed: function(a) {
        if(a.offerType === "htmlOffer") {
            this.components.htmlOffers.components.dialog.showDialog()
        }
        this.resetBoxes()
    },
    addNewLocation: function(b) {
        var e = this,
            c = this.lastData.el,
            d = this.model.getLocationsLastUsedIndex() + 1,
            a = "Location " + d;
        this.cdq.getSelector("#" + c.id, function(f) {
            _.extend(b, {
                "jcr:title": a,
                cssSelector: c.cssSelector
            });
            if(c.mboxName) {
                _.extend(b, {
                    mbox: c.mboxName,
                    "mbox-selector": f.selector
                })
            } else {
                _.extend(b, {
                    selector: f.selector
                })
            }
            e.model.addLocation(b);
            e.markLocationAsLocked(c, b);
            F.trigger("successNotification", {
                message: Granite.I18n.get("Offers added for {0}", a),
                heading: Granite.I18n.get("Success")
            })
        })
    },
    lockDownLocations: function(b) {
        var e = ELM.Util.clone(this.model.getLocations()),
            d = this,
            f = b.poll,
            a = true,
            g = function(i, l) {
                var m = [],
                    n = i.length,
                    h = 0,
                    j = 0,
                    k = function() {
                        j++;
                        if(j === n) {
                            a = true
                        }
                    };
                a = false;
                _.each(i, function(o) {
                    d.cdq.getSelector(d.model.getSelectorFromLocation(o), function(p) {
                        h += 1;
                        d.markLocationAsLocked(p.el, o);
                        if(l) {
                            d.checkAndShowMissingLocationsErrorDialog(m, h, n)
                        }
                        e = d.deleteMarkedLocation(e, d.model.getSelectorFromLocation(o));
                        k()
                    }, function(p) {
                        if(p.error === "selectorNotFound") {
                            m.push(p.selector);
                            if(l) {
                                d.checkAndShowMissingLocationsErrorDialog(m, h, n);
                                e = d.deleteMarkedLocation(e, d.model.getSelectorFromLocation(o))
                            }
                            k()
                        }
                    })
                })
            },
            c = function() {
                if(e.length) {
                    if(!a) {
                        return
                    }
                    g(e, b.checkForMissingLocations)
                } else {
                    clearInterval(d.locationLockDownIntervalId)
                }
            };
        clearInterval(this.locationLockDownIntervalId);
        if(f) {
            this.locationLockDownIntervalId = setInterval(c, 50);
            return
        }
        g(e, b.checkForMissingLocations)
    },
    deleteMarkedLocation: function(b, a) {
        var c = this;
        return _.reject(b, function(d) {
            return c.model.getSelectorFromLocation(d) == a
        })
    },
    checkAndShowMissingLocationsErrorDialog: function(b, a, c) {
        if(a + b.length == c) {
            this.showMissingLocationsErrorDialog(b)
        }
    },
    showMissingLocationsErrorDialog: function(a) {
        if(a.length) {
            this.selectorNotFoundNotificationDialog.set({
                content: '<div class="max-width-31">' + Granite.I18n.get("We've noticed some structural changes to your page since this activity was last saved. ") + Granite.I18n.get("This may cause issues in delivery if these were not created using Browse mode. ") + Granite.I18n.get("These locations have moved or no longer exist.") + "</div>",
                buttons: [{
                    label: Granite.I18n.get("Delete Missing Locations"),
                    className: "primary",
                    click: function(b) {
                        for(var c = a.length - 1; c >= 0; c -= 1) {
                            this.model.removeLocation(a[c])
                        }
                        this.selectorNotFoundNotificationDialog.hide()
                    }.bind(this)
                }]
            }).show()
        }
    },
    markLocationAsLocked: function(c, b) {
        var a = this.model.getSelectorFromLocation(b),
            d = b.type;
        this.cdq.addClass(a, "AT_location");
        this._setLocationTitle(b);
        this._resetSelectedOfferForLocation(b);
        if(d === "image") {
            this.cdq.copyAttribute(a, "src");
            this.cdq.removeAttribute(a, "src");
            this.cdq.setAttribute(a, "style", this.getStripesStyle(c))
        } else {
            this.cdq.setAttribute(a, "style", this.getHTMLStripesStyle(c))
        }
    },
    _setLocationTitle: function(c) {
        var a = this.model.getSelectorFromLocation(c),
            b = c["jcr:title"],
            d = this.model.getOffersCountForLocation(b);
        if(d) {
            b = c["jcr:title"] + " (" + d + ")"
        }
        this.cdq.setAttribute(a, "data-cdq-location", b);
        this.cdq.setContent("#AT_box_selected .AT_box_label", b)
    },
    resetSelectedOfferForLocations: function() {
        _.each(this.model.getLocations(), function(a) {
            this._resetSelectedOfferForLocation(a)
        }, this)
    },
    _resetSelectedOfferForLocation: function(c) {
        var g = this,
            a = this.model.getSelectorFromLocation(c),
            e = c.type,
            b = 0,
            d = c.offers,
            h = d.length,
            f = null;
        if(d && h) {
            f = d[h];
            b = h - 1
        }
        if(f && f.isDefault === true && !f.included) {
            b = 1
        }
        if(e === "image") {
            this.cdq.getSelector(a, function(i) {
                i.el.src = window.location.protocol + "//" + window.location.host + d[b]["ref:offer"];
                g.cdq.setAttribute(a, "style", g.getStripesStyle(i.el))
            })
        } else {
            this.setContent({
                selector: a,
                type: e,
                content: d[b].content
            })
        }
        this.cdq.setAttribute(a, "data-selected", b);
        this._setLocationTitle(c)
    },
    getStripes: function() {
        return ["-45deg", "rgba(65, 145, 210, .5) 25%", "transparent 25%", "transparent 50%", "rgba(65, 145, 210, .5) 50%", "rgba(65, 145, 210, .5) 75%", "transparent 75%", "transparent) 0 0/10px 10px"].join()
    },
    getStripesStyle: function(b) {
        var d = this.getStripes(),
            c = b.offsetWidth + "px",
            a = b.offsetHeight + "px";
        return ["background: -webkit-linear-gradient(", "background: -moz-linear-gradient(", "background: -ms-linear-gradient(", "background: -o-linear-gradient(", "background: linear-gradient(", "background-color: transparent; width: " + c + "; height: " + a + ";"].join(d + ', url("' + b.src + '") 0 0/' + c + " " + a + " no-repeat;") + "display: inline-block"
    },
    getHTMLStripesStyle: function(a) {
        var c = this.getStripes(),
            b = a.style["background-color"];
        return ["background: -webkit-linear-gradient(", "background: -moz-linear-gradient(", "background: -ms-linear-gradient(", "background: -o-linear-gradient(", "background: linear-gradient(", "background-color: " + b + ";"].join(c + ";")
    },
    changeControlUrl: function(a) {
        this.clearExperiences();
        this.setBuildModeUrl(a);
        this.setActivityUrl(a);
        this.reloadHost()
    },
    clearExperiences: function() {
        this.model.setLocations([]);
        this.model.setExclusions([]);
        this.model.setReportingGroups([]);
        this.model.setControlExperience({});
        this.model.setThumbnailSrc("")
    },
    deleteLocation: function(g, d, o) {
        var j = this,
            k = this,
            n, h, m = this.currentLocationIndex,
            c, l, b, i, e, f, a;
        if(!d) {
            b = ELM.Util.clone(g), n = g.location
        } else {
            g = ELM.Util.clone(o.data);
            m = o.locationIndex;
            n = ELM.Util.clone(o.location)
        }
        h = ELM.Util.clone(n);
        l = n.type;
        c = this.model.getSelectorFromLocation(n);
        this.model.removeLocation(c);
        this.cdq.removeClass(c, "AT_location");
        this.cdq.removeAttribute(c, "data-cdq-location");
        this.cdq.removeAttribute(c, "data-selected");
        this.cdq.setContent("#AT_box_selected .AT_box_label", g.el.originalTagName);
        if(l === "image") {
            this.cdq.sendGetAttributeRequest(c, "data-cdq-src", function(p) {
                j.cdq.removeAttribute(c, "style");
                j.cdq.setAttribute(c, "src", p.value)
            })
        } else {
            this.cdq.removeAttribute(c, "style");
            this.cdq.setContent(c, n.offers[0]["content"]);
            this.checkForScriptTagInLocation(n)
        }
        F.trigger("successNotification", {
            message: Granite.I18n.get("Removed: {0}.", n["jcr:title"])
        });
        this.generateNewExperiences = true;
        if(!d) {
            i = {
                data: b,
                locationIndex: m,
                location: h
            };
            e = function() {
                k._saveOffers(null, null, true, i)
            };
            f = {
                data: b,
                locationIndex: m,
                location: h
            };
            a = function() {
                k.deleteLocation(null, true, f)
            };
            this.actionTracker.addAction(e, a, "AP_LOCATION")
        }
    },
    showDefaultImage: function(c) {
        var b = this,
            a = this.model.getSelectorFromLocation(c.location);
        this.cdq.sendGetAttributeRequest(a, "data-cdq-src", function(d) {
            c.el.src = d.value;
            b.cdq.setAttribute(a, "style", b.getStripesStyle(c.el))
        })
    },
    removeOffer: function(s) {
        var d = this,
            a = s.location,
            n = this.model.getSelectorFromLocation(a),
            c = a.type,
            r = a.offers,
            i = this.model.getLocationIndexBySelector(n),
            p = parseInt(s.selected),
            h, f, e, b, l, q, g, o, m, k, j;
        b = ELM.Util.clone(a);
        q = ELM.Util.clone(s);
        this.model.removeOffer(i, p);
        h = r.splice(p, 1)[0];
        this._setLocationTitle(a);
        if(p > 1) {
            f = p - 1
        } else {
            f = r.length - 1
        }
        this.cdq.setAttribute(n, "data-selected", f);
        if(c === "image") {
            e = r[f]["ref:offer"];
            if(e.indexOf("http") === -1) {
                s.el.src = window.location.protocol + "//" + window.location.host + e
            } else {
                s.el.src = e
            }
            this.cdq.setAttribute(n, "style", this.getStripesStyle(s.el))
        } else {
            this.setContent({
                selector: n,
                type: c,
                content: r[f]["content"]
            });
            this.checkForScriptTagInLocation(a)
        }
        l = ELM.Util.clone(a);
        g = ELM.Util.clone(s);
        o = {
            data: q,
            locationIndex: i,
            location: b
        };
        m = function() {
            d._saveOffers(null, null, true, o)
        };
        k = {
            data: g,
            locationIndex: i,
            location: l
        };
        j = function() {
            d._saveOffers(null, null, true, k)
        };
        this.actionTracker.addAction(m, j, "AP_LOCATION");
        F.trigger("successNotification", {
            message: Granite.I18n.get("Removed: {0}.", h["jcr:title"])
        });
        this.generateNewExperiences = true
    },
    setContent: function(b) {
        var d = b.content,
            a = b.selector,
            c = b.type;
        if(c === "text") {
            d = ELM.Util.escape(d)
        }
        this.cdq.setContent(a, d)
    },
    saveExperiences: function() {
        this.model.setExperiences(this.model.generateExperiences())
    },
    generateThumbnail: function(b) {
        var c = this.getMode(),
            a = [this.modes.browse, this.modes.clicktrack, this.modes.ETClicktrack].indexOf(c) === -1;
        if(ELM.isExpThumbsEnabled && a) {
            this.cdq.generateThumbnail(b)
        } else {
            if(!this.model.getThumbnailSrc()) {
                this.useDefaultThumbnailSrc();
                this.model.setThumbnailSrc(this.getDefaultThumbnailSrc())
            }
        }
    },
    showPreviewPanel: function() {
        this.$previewPanel.removeClass("display-none")
    },
    hidePreviewPanel: function() {
        this.$previewPanel.addClass("display-none")
    },
    moveFrameView: function() {
        this.$frameView.addClass("margin-l-16-5")
    },
    centerFrameView: function() {
        this.$frameView.removeClass("margin-l-16-5")
    },
    isPreviewMode: function() {
        return this.getMode() === "preview"
    },
    isOneToOneMode: function() {
        return this.getMode() === "1-1"
    },
    checkForScriptTagInOffer: function(a) {
        if(!a.isDefault) {
            this.checkForScriptTag(a.content)
        }
    },
    checkForScriptTagInLocation: function(a) {
        var b = this;
        this.hideScriptUseNotification();
        this.updateContentInOffers(a.offers);
        _.each(a.offers, function(c) {
            b.checkForScriptTagInOffer(c)
        })
    },
    checkForScriptTagInLocations: function() {
        var a = this.model.getLocations(),
            b = this;
        _.each(a, function(c) {
            if(c.type !== "image") {
                b.checkForScriptTagInLocation(c)
            }
        })
    },
    mvtActivityWasActivated: function() {
        return this.model.getActivityType() === ELM.Activities.activityTypes.MVT && this.model.getActivatedDate()
    },
    showWarningForLiveActivity: function() {
        this.notificationDialog.set({
            heading: Granite.I18n.get("Live/Previously Live Activity"),
            content: [Granite.I18n.get("Caution: Editing a live or previously live MVT activity can cause reports to reset if the number of experiences changes."), "<div>", Granite.I18n.get("It is recommended to only make small changes on existing activity content."), '<a href="https://marketing.adobe.com/resources/help/en_US/target/mvt/r_best_practices.html" target="_blank" class="hover-blue">', '<i class="icon-help-circle xsmall"></i>', Granite.I18n.get("Learn more"), "</a></div>"].join(""),
            buttons: [{
                label: Granite.I18n.get("Ok"),
                click: function() {
                    this.notificationDialog.hide()
                }.bind(this)
            }]
        }).show()
    },
    onComplete: function() {
        var a;
        if(this.model.getActivityType() === ELM.Activities.activityTypes.ONE_TO_ONE) {
            this.model.removeExperiences();
            return true
        }
        if(!this.validateLocationsNumber()) {
            return false
        }
        this.reGenerateExperiences();
        this.model.setExclusions();
        this.validateExperiencesNumber();
        a = this.model.validate();
        if(a) {
            F.trigger("errorNotification", {
                message: a.message
            });
            return false
        }
        return true
    },
    validateLocationsNumber: function() {
        var a = this.model.getLocations();
        if(a.length < this.LOCATION_MINIMUM) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("You need at least 2 locations to create a Multivariate Test"),
                heading: Granite.I18n.get("Error")
            });
            return false
        }
        return true
    },
    validateExperiencesNumber: function() {
        var a = this.model.getExperiences().length;
        if(a < this.EXPERIENCES_MINIMUM) {
            F.trigger("noticeNotification", {
                message: Granite.I18n.get("With 5 or less experiences an A/B test would be better suited"),
                heading: Granite.I18n.get("Warning")
            })
        }
    },
    setInteractModeModel: function(a) {
        this.interactModeModel = a
    },
    initializeAfterLoadInInteractMode: function(a) {
        var b = this.components.interactModeToolbar ? this.components.interactModeToolbar.model : this.interactModeModel;
        b.addToHistory(a);
        b.setControlUrl(a);
        this.isHostLoaded = true;
        this.updateEditorMode();
        if(ELM.Util.compareURLs(a, this.getActivityUrl(), {
                similar: true
            })) {
            this.lockDownLocations({
                poll: true,
                checkForMissingLocations: false
            })
        }
        this.stopHostLoadingProgress();
        this.view.$(".unableToLoadPageNotifier").addClass("hidden");
        this.trigger("experienceEditor:loaded")
    },
    handleUnsavedDialogClose: function() {
        if(this.isInteractMode()) {
            this.trigger("ee:toggleSwitchToInteractMode")
        }
    },
    enableJavaScriptInEE: function() {
        this.cdq.toggleJavaScript({
            callback: function() {
                if((this.interactModeModel && ELM.Util.compareURLs(this.interactModeModel.getControlUrl(), this.getBuildModeUrl(), {
                        similar: true
                    }))) {
                    this.lockDownLocations({
                        poll: true,
                        checkForMissingLocations: false
                    })
                }
            }.bind(this),
            disableJavaScript: false
        })
    },
    updatePage: function() {
        if(this.isOneToOneMode() || this.isClickTrackMode()) {
            this.lockDownLocations({
                poll: true,
                checkForMissingLocations: true
            })
        }
    },
    isComplete: function() {
        return true
    }
});
ELM.Activities.OneToOneExperienceEditor.ClickTrackMode = new Class({
    toString: "OneToOneExperienceEditorClickTrackMode",
    extend: ELM.Activities.OneToOneExperienceEditor,
    View: F.View.extend({
        events: {
            "change input[name=ee-build-mode]": "updateExperienceEditorBuildMode"
        }
    }),
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleScroll);
        this.bind(this.toggleElement);
        this.bind(this.updateButtonColor);
        this.bind(this.highlightObjects);
        this.bind(this.hideOverlayPopover);
        this.bind(this.handleHostLoadTimeout);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleAnchorClickInteractMode);
        this.bind(this.handleFormSubmitInteractMode);
        this.bind(this.updateExperienceEditorBuildMode);
        this.bind(this.handleUnsavedDialogClose)
    },
    registerVars: function() {
        this.superClass.registerVars.apply(this, arguments)
    },
    registerGlobalTriggers: function() {},
    addSubComponents: function() {
        this.superClass.addSubComponents.apply(this, arguments);
        this.addExperienceEditorToolbar()
    },
    initView: function(a) {
        var b = $('<div class="clickTrackMode experienceEditor"></div>').appendTo(a);
        this.view = new this.View({
            el: b,
            component: this,
            template: ELM.Activities.Templates.OneToOneExperienceEditorClicktrackMode
        }).render();
        this.$toolbar = this.view.$el.find(".experienceEditorToolbar");
        this.view.render = function() {}
    },
    showExperienceEditor: function(a) {
        this.setMode(this.modes.clicktrack);
        this.setClickedElements(a.clickedElements);
        this.setMetricComponent(a.metricComponent);
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.load(a.model);
        this.addCdqClientListeners();
        if(!this.isSetup) {
            this.setup(a)
        }
        this.view.show();
        this.options.visible = true;
        if(!this.model.getActivityUrl()) {
            this.hideFrame();
            this.toolbar.showErrorNotification(this.messages.emptyControlUrl)
        }
        this.toolbar.view.$el.find(".left .heading").text(this.model.getTitle());
        this.updateEditorMode()
    },
    setup: function() {
        var a = this.getProxiedUrl({
            url: this.getActivityUrl()
        });
        this.setOffsetTop(0);
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.superClass.setup.apply(this, arguments);
        this.setFrameSrc(a)
    },
    updateEditorMode: function() {
        if(this.isClickTrackMode()) {
            this.switchToClickTrackMode()
        }
        if(this.isInteractMode()) {
            this.showInteractToolbar();
            this.hideExperiencesTabs();
            this.switchToInteractMode()
        }
    },
    changeMode: function(a) {
        this.superClass.superClass.changeMode.apply(this, arguments)
    },
    initializeAfterLoadInInteractMode: function(a) {
        var b = this.components.interactModeToolbar ? this.components.interactModeToolbar.model : this.interactModeModel;
        b.addToHistory(a);
        b.setControlUrl(a);
        this.isHostLoaded = true;
        this.updateEditorMode();
        if(ELM.Util.compareURLs(a, this.getActivityUrl(), {
                similar: true
            })) {
            this.lockDownLocations({
                poll: true,
                checkForMissingLocations: false
            });
            this.markClickedElementsAsSelected({
                poll: true
            })
        }
        this.stopHostLoadingProgress();
        this.view.$(".unableToLoadPageNotifier").addClass("hidden");
        this.trigger("experienceEditor:loaded")
    },
    enableJavaScriptInEE: function() {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = b && c.model.getControlUrl();
        this.cdq.toggleJavaScript({
            callback: function() {
                if(b && a === this.getBuildModeUrl()) {
                    this.lockDownLocations({
                        poll: true,
                        checkForMissingLocations: false
                    });
                    this.markClickedElementsAsSelected({
                        poll: true
                    })
                }
            }.bind(this),
            disableJavaScript: false
        })
    },
    updatePage: function() {
        this.lockDownLocations({
            poll: true,
            checkForMissingLocations: true
        });
        this.markClickedElementsAsSelected({
            poll: true
        })
    },
    setActivityUrl: function(a) {
        this.activityUrl = a
    },
    changeControlUrl: function(a) {
        this.setClickedElements([]);
        this.setBuildModeUrl(a);
        this.setActivityUrl(a)
    },
    addExperienceEditorToolbar: function() {
        this.addComponent(new ELM.Activities.ExperienceEditorToolbar({
            el: this.$toolbar,
            visible: true,
            component: this,
            notificationDialog: this.notificationDialog
        }), "toolbar").on("save", this.saveElements.bind(this)).on("cancel", this.close.bind(this)).on("updateButtonColor", this.updateButtonColor).on("hideOverlayPopover", this.hideOverlayPopover).on("highlightObjects", this.highlightObjects)
    },
    addPreviewPanel: function() {},
    saveElements: function() {
        this.trigger("saveTrackedElements")
    },
    close: function() {
        this.hide()
    }
});
ELM.Activities.OneToOneTarget = new Class({
    toString: "OneToOneTarget",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .change-audience": "triggerChooseAudienceEvent",
            "change .control-visitor-percentage": "updateControlVisitorPercentage",
            "click .control-popover li": "changeControlExperienceType",
            "click .algorithm-popover li": "changeAlgorithm",
            "click .delete-algorithm": "removeAlgorithm",
            "click .testing-template-rules": "triggerShowTemplateTestingModal",
            "click .add-content-button": "showCreateStep"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.loadModel(a.model);
        this.registerBinders();
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.OneToOneTarget
        })
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets();
            this.addControlSelectionDialog();
            this.adjustRowContentHeight()
        })
    },
    registerBinders: function() {
        this.bind(this.updateTargetAudience)
    },
    initializeWidgets: function() {
        this.$controlVisitorPercentage = this.view.$(".control-visitor-percentage");
        this.view.$(".pulldown").pulldown()
    },
    addControlSelectionDialog: function() {
        var a = "controlSelectionDialog";
        if(typeof this.components[a] !== "undefined") {
            this.components[a].destruct()
        }
        this.addComponent(new ELM.Activities.OneToOneTarget.ControlSelectionDialog({
            model: this.model
        }), a)
    },
    adjustRowContentHeight: function() {
        var e = this.view.$(".first-row-algorithm-cell"),
            a = e.find(".line-bottom"),
            c = e.find(".line-left"),
            b = this.view.$(".control-box"),
            d = parseInt(ELM.Util.getActualCSS(b, "height"));
        c.css("min-height", d - a.height())
    },
    triggerShowTemplateTestingModal: function() {
        this.trigger("show:templateTestingModal", false)
    },
    triggerChooseAudienceEvent: function() {
        var a = {
            addAndCloseButtonLabel: Granite.I18n.get("Add to Activity"),
            selectedAudienceConsumer: this.updateTargetAudience
        };
        this.trigger("choose:audience", a)
    },
    updateTargetAudience: function(a) {
        this.show({
            silent: true
        });
        this.updateElmReferences(a);
        this.setTargetRefAudiences([a.getReferenceString()])
    },
    setTargetRefAudiences: function(a) {
        this.model.setTargetsRefAudiences(a)
    },
    updateElmReferences: function(a) {
        this.model.updateElmReferences(a)
    },
    updateControlVisitorPercentage: function(b) {
        var a = parseFloat(b.currentTarget.value);
        if(_.isNaN(a) || parseInt(a) !== a || a < 10 || a > 99) {
            this.showVisitorPercentageErrorNotification();
            this.$controlVisitorPercentage.addClass("error").focus()
        } else {
            this.$controlVisitorPercentage.removeClass("error");
            this.setVisitorPercentage(a)
        }
    },
    setVisitorPercentage: function(a) {
        this.model.setVisitorPercentage(a)
    },
    changeControlExperienceType: function(a) {
        var b = $(a.currentTarget).data("type");
        if(b === "default_content") {
            if(!this.model.isAllDefaultContentIncluded()) {
                F.trigger("errorNotification", {
                    heading: Granite.I18n.get("Error"),
                    message: Granite.I18n.get("The default experience cannot be selected as control if default content has been excluded. Please include default content for delivery or choose another control experience.")
                });
                return
            }
        }
        if(b !== "custom") {
            this.model.setControlExperienceType(b)
        }
    },
    changeAlgorithm: function(a) {
        var c = $(a.currentTarget).data("id"),
            b = c ? [c] : _.pluck(this.model.getAlgorithms(), "id");
        this.model.setAlgorithmIds(b)
    },
    removeAlgorithm: function(a) {
        var b = $(a.currentTarget).data("id");
        this.model.removeAlgorithmId(b)
    },
    onComplete: function() {
        if(this.$controlVisitorPercentage.hasClass("error")) {
            this.showVisitorPercentageErrorNotification();
            this.$controlVisitorPercentage.focus();
            return false
        }
        return true
    },
    showVisitorPercentageErrorNotification: function() {
        this.showErrorNotification(Granite.I18n.get("Percentage for control experience should be a value between 10 and 99."))
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("Error")
        })
    },
    isComplete: function() {
        return true
    },
    showCreateStep: function() {
        this.parent.switchToStep(0)
    }
});
ELM.Activities.OneToOneTarget.ControlSelectionDialog = new Class({
    toString: "OneToOneTargetControlSelectionDialog",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change select": "handleOfferSelection",
            "click .primary": "setSelectedExperienceAsControl"
        }
    }),
    construct: function(a) {
        this.initView();
        this.loadModel(a.model);
        this.registerListeners();
        this.render()
    },
    initView: function() {
        this.view = new this.View({
            el: $('<div id="control-selection-dialog" class="modal"/>').appendTo(document.body),
            component: this,
            template: ELM.Activities.Templates.OneToOneTarget.ControlSelectionDialog
        })
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets();
            this.selectOffers()
        })
    },
    initializeWidgets: function() {
        this.view.$(".select").select()
    },
    selectOffers: function() {
        var a = this.model.getCustomControlExperiences(),
            b = this.view.$("select");
        if(a) {
            _.each(a, function(c) {
                $(b.get(c.locationIndex)).val(c.offerIndex)
            })
        }
        this.handleOfferSelection()
    },
    handleOfferSelection: function() {
        var a = _.every(this.view.$("option:selected"), function(b) {
            return b.value !== ""
        });
        this.toggleApplyButton(a)
    },
    toggleApplyButton: function(a) {
        this.view.$(".primary").attr("disabled", !a)
    },
    setSelectedExperienceAsControl: function() {
        var a = _.map(this.view.$("option:selected"), function(c, b) {
            return {
                locationIndex: b,
                offerIndex: parseInt(c.value)
            }
        });
        if(this.model.isOfferCombinationExcluded(a)) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("The selected experience has been excluded. Either select a different experience, or use the combinations tab inside the Content Manager to include this combination.")
            })
        } else {
            this.closeDialog();
            this.model.setControlExperienceType("custom");
            this.model.setCustomControlExperiences(a)
        }
    },
    closeDialog: function() {
        this.view.$el.data("modal").hide()
    }
});
ELM.Activities.OneToOneSummary = new Class({
    toString: "OneToOneSummary",
    extend: ELM.Activities.Summary,
    Template: function() {
        return ELM.Activities.Templates.OneToOneTarget.apply(this, arguments)
    },
    initSubViews: function() {
        this.adjustRowContentHeight();
        this.inherited(arguments)
    },
    adjustRowContentHeight: function() {
        var e = this.view.$(".first-row-algorithm-cell"),
            a = e.find(".line-bottom"),
            c = e.find(".line-left"),
            b = this.view.$(".control-box"),
            d = parseInt(ELM.Util.getActualCSS(b, "height"));
        c.css("min-height", d - a.height())
    }
});
ELM.Activities.OneToOneExperienceEditor.ActionMenu = new Class({
    toString: "OneToOneExperienceEditorActionMenu",
    extend: ELM.Activities.ExperienceEditorActionMenu,
    getActionMenuTemplate: function(a) {
        switch(a) {
            case "MBOX":
                return ELM.Activities.Templates.OneToOneExperienceEditor.ActionMenu.Others;
            case "IMG":
                return ELM.Activities.Templates.OneToOneExperienceEditor.ActionMenu.Image;
            case "LOCATION":
                return ELM.Activities.Templates.OneToOneExperienceEditor.ActionMenu.Location;
            default:
                return ELM.Activities.Templates.OneToOneExperienceEditor.ActionMenu.Others
        }
    },
    performAction: function(c, b) {
        var a = {
            "change-image": this.triggerChangeImageEvent,
            "change-text": this.triggerChangeTextEvent,
            "change-html": this.triggerChangeHTMLEvent,
            "edit-content": this.triggerEditContentEvent,
            "rename-loc": this.triggerRenameLocationEvent,
            "delete-loc": this.triggerDeleteLocationEvent,
            "default-image": this.triggerShowDefaultImageEvent,
            "remove-offer": this.triggerRemoveOfferEvent,
            "select-parent": this.selectParent,
            "change-inner-image": this.changeImageSource,
            "change-inner-text": this.changeInnerHtml,
            "change-inner-html": this.changeInnerHtml
        };
        if(typeof a[c] === "function") {
            a[c].call(this, b)
        }
    },
    handlePopoverItemSelection: function(b) {
        var d = this.parent.lastData,
            e = $(b.currentTarget),
            a, c = e.data("action");
        if(c === "change-inner-image" || c === "change-inner-text" || c === "change-inner-html") {
            a = d.location.mbox ? d.location["mbox-selector"] : d.location["selector"];
            d.id = e.data("id");
            this.parent.cdq.setAttribute(a, "data-selected", d.id)
        }
        this.parent.resetBoxes();
        this.performAction(c, d);
        this.popover.hide();
        this.parent.mousePosition = {
            clientX: b.clientX,
            clientY: b.clientY
        };
        b.stopPropagation()
    },
    adjustPosition: function(f) {
        var e = f.el.tagName,
            d = this.getActionMenuTemplate(e),
            c = {},
            b = this.popover.$element,
            a = ["AREA", "BR", "COL", "EMBED", "FRAME", "HR", "IMG", "INPUT", "LINK", "PARAM", "TEXTAREA"];
        this.isMbox = (f.el.mboxName !== "");
        c.isHtml = (e === "HTML");
        c.isForm = (e === "FORM");
        c.isVoid = (a.indexOf(e) != -1);
        c.hasHtml = f.hasHtml;
        if(e === "LOCATION") {
            c.selected = f.selected;
            c.location = f.location
        }
        this.popover.set("content", d(c));
        if(this.isScrollRequired(f)) {
            this.popover.$element.find("ul").addClass("optionalScroll")
        } else {
            this.popover.$element.find("ul").removeClass("optionalScroll")
        }
        this.popover.set(this.getPosition(f));
        this.popover.show();
        this.originalOffset = b.offset()
    },
    changeImageSource: function(d) {
        var c = this,
            b = this.getOfferFromData(d),
            a = d.location["selector"];
        if(!b) {
            return
        }
        var e = b["ref:offer"];
        if(e.indexOf("http") === -1) {
            e = window.location.protocol + "//" + window.location.host + e
        }
        this.parent.cdq.getSelector(a, function(f) {
            f.el.src = e;
            c.parent.cdq.setAttribute(a, "style", c.parent.getStripesStyle(f.el))
        })
    },
    changeInnerHtml: function(e) {
        var f = e.id,
            b = e.location,
            a = this.parent.model.getSelectorFromLocation(b),
            d = this.getOfferFromData(e),
            c = this;
        if(!d) {
            return
        }
        if(!d["ref:offer"]) {
            this.parent.cdq.setContent(a, d.content);
            return
        }
        this.parent.offerRequest({
            url: d["ref:offer"]
        }).done(function(g) {
            d.content = g;
            c.parent.cdq.setContent(a, d.content)
        })
    },
    getOfferFromData: function(b) {
        var a = "",
            d = b.id;
        try {
            a = b.location["offers"][d]
        } catch(c) {
            throw new Error(c)
        }
        return a
    },
    triggerEditContentEvent: function(a) {
        this.trigger("editContent", a)
    },
    triggerChangeTextEvent: function(a) {
        this.trigger("changeText", a && a.el)
    },
    triggerChangeHTMLEvent: function(a) {
        this.trigger("changeHTML", a && a.el)
    },
    triggerChangeImageEvent: function(a) {
        this.trigger("changeImage", a && a.el)
    },
    selectParent: function(a) {
        this.inherited(arguments)
    },
    triggerRenameLocationEvent: function(a) {
        this.trigger("renameLocation", a)
    },
    triggerDeleteLocationEvent: function(a) {
        this.trigger("deleteLocation", a)
    },
    triggerShowDefaultImageEvent: function(a) {
        this.trigger("showDefaultImage", a)
    },
    triggerRemoveOfferEvent: function(a) {
        this.trigger("removeOffer", a)
    },
    isScrollRequired: function(b) {
        var a = b.location,
            c = 5;
        return(a && a.offers && a.offers.length > c)
    }
});
ELM.Activities.OneToOneExperienceEditor.PreviewPanel = new Class({
    toString: "OneToOneExperienceEditorPreviewPanel",
    extend: F.ListComponent,
    ItemTemplate: Handlebars.compile(['<span class="cell name ellipsis-text"><label>', '<input type="checkbox" value="{{#if excluded}}true{{else}}false{{/if}}"/><span></span>', "</label><span>{{[jcr:title]}}</span></span>", '<span class="cell status {{#if excluded}}excluded{{/if}}">{{#if excluded}}{{i18n "Excluded"}}{{else}}{{i18n "Included"}}{{/if}}</span>'].join("")),
    ItemView: F.View.extend({
        tagName: "li",
        className: "row"
    }),
    selectedItem: 0,
    initView: function(a) {
        this.view.collection = new this.Collection(a.collection);
        this.collectionLoaded = true;
        this.selectedItem = 0;
        this.excludedExperiencesCount = a.excludedExperiencesCount
    },
    show: function(a) {
        this.initView(a);
        this.render();
        this.inherited(arguments)
    },
    render: function() {
        this.view.render();
        this.markAsSelected(this.view.$el.find("li").eq(this.selectedItem));
        F.trigger("previewpanel:rendered", this.view.collection.length, this.excludedExperiencesCount)
    },
    handleSelect: function(a) {
        var d = a.target,
            c = this.view.$(a.currentTarget).closest("li"),
            b = c.data("viewIndex");
        this.trigger("experience:select:excluded", this.getItemsEligibleForExclusion());
        if(this.selectedItem === b) {
            return
        }
        if(d.nodeName !== "INPUT") {
            this.previewExperience(c, b)
        }
    },
    previewExperience: function(b, a) {
        this.selectedItem = a;
        this.clearSelected();
        this.markAsSelected(b);
        this.trigger("experience:preview", a)
    },
    clearSelected: function() {
        this.view.$(".selected").removeClass("selected")
    },
    markAsSelected: function(a) {
        a.addClass("selected")
    },
    checkAllCheckboxes: function() {
        this.getAllCheckboxes().attr("checked", "checked")
    },
    uncheckAllCheckboxes: function() {
        this.getAllCheckboxes().removeAttr("checked")
    },
    areAllCheckboxesSelected: function() {
        var b = this.getAllCheckboxes(),
            a = _.find(b, function(c) {
                return !c.checked
            });
        return _.isUndefined(a)
    },
    getAllCheckboxes: function() {
        return this.view.$("input")
    },
    getItemsEligibleForExclusion: function() {
        return this.getCheckedItems(true)
    },
    getCheckedItems: function(b) {
        var a = [],
            d = this.getAllCheckboxes(),
            e = d.length;
        for(var c = 0; c < e; c++) {
            if(d[c].checked && d[c].value !== b.toString()) {
                a.push(c)
            }
        }
        return a
    }
});
"use strict";
ELM.Activities.OneToOneExperienceEditor.Toolbar = new Class({
    toString: "ELM.Activities.OneToOneExperienceEditor.Toolbar",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "click .icon-viewon": "switchToPreviewMode",
            "click .exit-preview": "exitPreviewMode",
            "click [data-action]": "triggerAction",
            "change input[name=ee-build-mode]": "updateExperienceEditorBuildMode"
        }
    }),
    experienceIndexTemplate: Handlebars.compile('{{#if total}} <h3 class="v-align">  <span>{{i18n "Experience"}}&nbsp;{{index}}&nbsp;{{i18n "of"}}&nbsp;{{total}}</span>  {{#if excludedExperiencesCount}}   <span>({{excludedExperiencesCount}}&nbsp;{{i18n "excluded"}})</span>  {{/if}} </h3>{{/if}}'),
    construct: function(a) {
        this.loadModel(a.model);
        this.initView(a.el);
        this.registerBinders();
        this.registerListeners();
        this.actionTypeClass = {
            undo: ".icon-undo",
            redo: ".icon-redo"
        }
    },
    init: function(a) {
        this.model.set(a, {
            silent: true
        });
        this.render();
        return this
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.OneToOneExperienceEditor.Toolbar
        })
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerBinders: function() {
        this.bind(this.render);
        this.bind(this.updateCounts);
        this.bind(this.updateTitle)
    },
    registerListeners: function() {
        this.listenTo(this.model, "change:index", this.updatePreviewModeTitle);
        this.listenTo(this.model, "change:excludedExperiencesCount", this.updatePreviewModeTitle);
        this.listenTo(this.model, "change:type", this.render);
        this.listenTo(this.model, "change:activityUrl", this.render);
        this.listenTo(this.model, "change:mode", this.updateMode)
    },
    registerGlobalTriggers: function() {
        F.on("previewpanel:rendered", this.updateCounts)
    },
    render: function() {
        this.cleanComponents();
        this.view.render();
        this.addEditableLabel();
        this.updateMode();
        return this
    },
    cleanComponents: function() {
        var a = this.components;
        _.each(a, function(c, b) {
            c.destruct();
            delete a[b]
        })
    },
    updateMode: function() {
        this.view.$el.attr("class", "toolbar " + this.getMode() + "-mode");
        if(this.getMode() === "interact") {
            this.addInteractModeToolbar()
        }
    },
    updatePreviewModeTitle: function() {
        var a = this.experienceIndexTemplate({
            index: this.model.get("index") || 1,
            total: this.model.get("total"),
            excludedExperiencesCount: this.model.get("excludedExperiencesCount")
        });
        this.view.$(".preview-title").html(a);
        return this
    },
    addInteractModeToolbar: function() {
        this.trigger("action:getActivityUrl", function(a) {
            var b = new ELM.Models.ExperienceEditorInteractMode({
                controlUrl: a,
                history: [a],
                historyIndex: 0,
                oldWorkflow: false
            });
            this.addComponent(new ELM.Activities.ExperienceEditorInteractModeToolbar({
                el: this.view.$(".ee-interact-toolbar"),
                visible: true,
                component: this,
                model: b
            }), "interactModeToolbar").on("hideFrame", this.hideFrame, this).on("showFrame", this.showFrame, this).on("updateFrameSource", this.updateFrameSource, this).on("reloadFrame", this.reloadFrame, this)
        }.bind(this))
    },
    hideFrame: function() {
        this.trigger("action:hideFrame")
    },
    showFrame: function() {
        this.trigger("action:showFrame")
    },
    updateFrameSource: function(a) {
        this.trigger("action:updateFrameSource", a)
    },
    reloadFrame: function() {
        this.trigger("action:reloadFrame")
    },
    addEditableLabel: function() {
        this.addComponent(new ELM.EditableLabel({
            el: this.view.$(".title"),
            visible: true,
            model: {
                title: this.getTitle(),
                placeholder: Granite.I18n.get("Untitled Activity"),
                required: false,
                maxlength: 200
            },
            silent: true
        }), "title").on("change", this.updateTitle)
    },
    show: function() {
        this.view.show();
        this.options.visible = true;
        return this
    },
    switchToPreviewMode: function() {
        if(!this.model.get("total")) {
            return
        }
        this.trigger("action:preview", "preview");
        this.model.set({
            mode: "preview",
            index: 0
        })
    },
    exitPreviewMode: function() {
        this.trigger("action:build", "1-1");
        this.setMode("build")
    },
    triggerAction: function(a) {
        var b = a.currentTarget.getAttribute("data-action"),
            c = a.currentTarget.getAttribute("data-param");
        if(c === "true") {
            c = true
        } else {
            if(c === "false") {
                c = false
            }
        }
        if(b) {
            this.trigger("action:" + b, c)
        }
    },
    updateCounts: function(b, a) {
        this.model.set({
            index: 1,
            total: b,
            excludedExperiencesCount: a
        })
    },
    togglePreviewButton: function(a) {
        this.toggleButton(this.view.$(".icon-viewon"), a)
    },
    toggleButton: function(b, a) {
        b.prop("disabled", !a)
    },
    setType: function(a) {
        this.model.set("type", a)
    },
    getType: function() {
        return this.model.get("type")
    },
    setMode: function(a) {
        this.model.set("mode", a)
    },
    getMode: function() {
        return this.model.get("mode")
    },
    setIndex: function(a) {
        this.model.set("index", a)
    },
    setTitle: function(a) {
        this.model.set("title", a, {
            silent: true
        })
    },
    getTitle: function() {
        return this.model.get("title")
    },
    updateTitle: function(a) {
        this.setTitle(a.value);
        this.trigger("action:title", a)
    },
    updateExcludeButton: function(a) {
        this.toggleButton(this.view.$(".icon-exclude"), !a);
        this.view.$(".preview-buttons").toggleClass("limit-exceeded", a)
    },
    updateExperienceEditorBuildMode: function(d) {
        var c = this.components.interactModeToolbar,
            b = !!c,
            a = b && c.model.getControlUrl(),
            e = $(d.currentTarget).data("mode"),
            f = function() {
                this.setMode(e);
                this.trigger("action:" + e, e)
            }.bind(this);
        this.trigger("action:getBuildModeUrl", function(g) {
            if(e !== "interact" && b && a !== g) {
                this.trigger("action:showControlUrlChangeNotification", {
                    url: a,
                    reloadOnCancel: true,
                    callbackOnDialogAction: f
                });
                return
            }
            f.call(this)
        }.bind(this))
    },
    updateUndoRedoIcons: function(a) {
        this.disableAction("undo");
        this.disableAction("redo");
        if(a.stackPointer > -1) {
            this.enableAction("undo")
        }
        if(a.stackPointer < a.actionsStack.length - 1) {
            this.enableAction("redo")
        }
    },
    disableAction: function(a) {
        this.view.$el.find(this.actionTypeClass[a]).attr("disabled", true)
    },
    enableAction: function(a) {
        this.view.$el.find(this.actionTypeClass[a]).attr("disabled", false)
    }
});
"use strict";
ELM.Activities.ExperienceTargetingMetrics = new Class({
    toString: "ExperienceTargetingMetrics",
    extend: ELM.Activities.Metrics,
    registerGlobalTriggers: function() {
        F.on("Experience-Targeting:experienceEditor:saveClickedElements", this.saveClickedElements)
    },
    unregisterGlobalTriggers: function() {
        F.off("Experience-Targeting:experienceEditor:saveClickedElements", this.saveClickedElements)
    }
});
ELM.Activities.ExperienceTargetingEditor = new Class({
    toString: "ExperienceTargetingEditor",
    extend: ELM.Activities.Editor,
    options: {
        singly: true
    },
    Model: ELM.Models.Activity,
    Template: function() {
        return ELM.Activities.Templates.ExperienceTargetingEditor.apply(this, arguments)
    },
    View: ELM.Activities.Editor.prototype.View.extend({
        additionalEvents: {
            "click .add-personalization-container": "addNewAudienceExperiencePair"
        }
    }),
    registerVars: function() {
        this.steps = [{
            name: "properties",
            component: "properties",
            complete: false,
            helpText: "Name & describe activity",
            hasSaveButton: true
        }, {
            name: "audiences",
            component: "infoGraphic",
            complete: false,
            helpText: "Choose audience and add experiences"
        }, {
            name: "metrics",
            component: "metrics",
            complete: false,
            helpText: "Select metrics"
        }, {
            name: "settings",
            component: "settings",
            complete: false,
            helpText: "Specify duration and priority"
        }];
        this.curStep = null;
        this.activityBackupAttributes = null
    },
    registerBinders: function() {
        this.superClass.registerBinders.apply(this, arguments);
        this.bind(this.showExperienceEditorForExperienceTargetingMode);
        this.bind(this.showExperienceEditorForETClickTrackMode);
        this.bind(this.showMetricsStep);
        this.bind(this.renderExperiences);
        this.bind(this.showAudiencePicker);
        this.bind(this.validateClickTracking);
        this.bind(this.changeExperienceEditorMode);
        this.bind(this.addNewAudienceExperiencePair)
    },
    registerGlobalTriggers: function() {
        F.on("Experience-Targeting:experienceEditor:experiencesSaved", this.renderExperiences);
        F.on("Experience-Targeting:metric:showClickTracking", this.showExperienceEditorForETClickTrackMode);
        F.on("Experience-Targeting:clickTrack:saved", this.showMetricsStep);
        F.on("window:resize", this.setScrollableHeight)
    },
    unregisterGlobalTriggers: function() {
        F.off("Experience-Targeting:experienceEditor:experiencesSaved", this.renderExperiences);
        F.off("Experience-Targeting:metric:showClickTracking", this.showExperienceEditorForETClickTrackMode);
        F.off("Experience-Targeting:clickTrack:saved", this.showMetricsStep);
        F.off("window:resize", this.setScrollableHeight)
    },
    addSubComponents: function() {
        this.addProperties();
        this.addExperienceTargetingInfographic();
        this.addTemplateTestingComponent();
        this.addExperienceTargetingMetrics();
        this.addSettings();
        this.addUnsavedDialog();
        this.addErrorDialog();
        this.addContentPicker();
        this.addCdqClient()
    },
    addContentPicker: function() {
        this.addComponent(new ELM.Activities.ExperienceTargetingContentPicker({
            el: this.view.$(".contentPickerContainer"),
            visible: false
        }))
    },
    addProperties: function() {
        this.addComponent(new ELM.Activities.Properties({
            el: this.view.$(".activityProperties"),
            visible: false
        }), "properties").on("step:complete", this.handleStepComplete).on("invalid", function(b, a) {
            alert(a)
        })
    },
    addExperienceTargetingInfographic: function() {
        this.addComponent(new ELM.Activities.ExperienceTargetingInfoGraphic({
            el: this.view.$(".infoGraphic"),
            visible: false
        }), "infoGraphic").on("chooseAudience", this.showAudiencePicker).on("showExperience", this.showExperienceEditorForExperienceTargetingMode.bind(this)).on("triggerAddNewExperience", this.showExperienceEditorForExperienceTargetingMode.bind(this)).on("triggerShowSpecificExperience", this.showExperienceEditorForExperienceTargetingMode.bind(this))
    },
    addTargetingMode: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.ExperienceTargetingMode({
            el: this.view.$(".experienceEditorPlaceHolder"),
            visible: false,
            contentPicker: this.components.contentPicker
        }), "experienceEditor").on("updateUrlSettings", this.updateUrlSettings).on("elements:rearranged", this.validateClickTracking).on("experience-editor:mode-changed", this.changeExperienceEditorMode)
    },
    addClickTrackMode: function() {
        this.addComponent(new ELM.Activities.ExperienceEditor.ETClickTrackMode({
            el: this.view.$(".experienceEditorPlaceHolder"),
            visible: false
        }), "experienceEditorETClickTrackMode").on("experience-editor:mode-changed", this.changeExperienceEditorMode)
    },
    addExperienceTargetingMetrics: function() {
        this.addComponent(new ELM.Activities.ExperienceTargetingMetrics({
            el: this.view.$(".metrics"),
            visible: false
        }), "metrics").on("metrics:addAudience", this.showAudiencePicker)
    },
    addSettings: function() {
        this.addComponent(new ELM.Activities.ABSettings({
            el: this.view.$(".settings"),
            visible: false
        }), "settings").on("chooseReportingAudience", this.showAudiencePicker)
    },
    initializeWidgets: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: "#et-wizard",
            component: this,
            onPageChanged: {
                step1: function() {},
                step2: function() {
                    a.triggerSwitchToAStepWithAudiencesEvent("FlowDiagramStep")
                },
                step3: function() {},
                step4: function() {
                    if(a.isViewMode) {
                        a.wizard.setNextButtonLabel(Granite.I18n.get("Close"))
                    }
                }
            },
            onNextButtonClick: function() {
                return a.nextStep()
            },
            onBackButtonClick: function() {
                return a.prevStep()
            },
            onLeaving: function() {
                a.checkAndShowIfWarningNeeded()
            }
        })
    },
    triggerSwitchToAStepWithAudiencesEvent: function(b) {
        var a = this.getAudiences();
        if(a) {
            F.trigger("Experience-Targeting:editor:switchingTo" + b, a)
        }
    },
    updateToolbar: function(b) {
        var a = this.view.$el.find(".add-personalization-container");
        b == "audiences" ? a.removeClass("hidden") : a.addClass("hidden")
    },
    getAudiences: function() {
        if(!this.model) {
            throw this.toString() + ": has no model"
        }
        var a = this.model.getAudiencesRef();
        var b;
        if(a) {
            b = this.model.getAudienceDataFromRef(a)
        }
        return b
    },
    renderExperiences: function() {
        this.showStep(this.curStep);
        this.triggerSwitchToAStepWithAudiencesEvent("FlowDiagramStep")
    },
    showStep: function(a) {
        var c = this.steps[a],
            b = this.components[c.component],
            d = this.model.getTitle().trim().length === 0 ? Granite.I18n.get("Untitled Activity") : this.model.getTitle();
        if(c.name === "audiences") {
            this.setDefaultExperience()
        }
        b.show({
            model: this.model
        });
        $("#et_title").html(d);
        this.updateToolbar(c.name)
    },
    setDefaultExperience: function() {
        var a = this.model.getExperiences() || [];
        if(a.length === 0) {
            a.push({
                "ref:audiences": []
            });
            this.model.setExperiences(a)
        }
    },
    showEditor: function(a) {
        this.curStep = 0;
        if(a.curStep) {
            this.curStep = a.curStep
        }
        if(a.model) {
            this.load(a.model);
            this.isViewMode = a.isViewMode || false;
            if(this.isViewMode) {
                F.trigger("noticeNotification", {
                    message: Granite.I18n.get("You do not have sufficient privileges to edit the activity. However, you can still view it.")
                })
            }
            this.activityBackupAttributes = this.model.createBackUp()
        } else {
            this.clearBackupActivityAttributes()
        }
        this.showStep(this.curStep);
        this.wizard.changePage(this.curStep + 1);
        this.show()
    },
    showExperienceEditorForExperienceTargetingMode: function(c) {
        c = c || {};
        var b = c.name || c.previousName || "",
            e = c.previousMode ? c.previousExperiences : ELM.Util.clone(this.model.getExperiences()),
            a = c.url || this.model.getActivityUrl() || "",
            d = c.previousMode || "";
        this.destructEditorModes();
        this.addTargetingMode();
        this.components.experienceEditor.authenticateAndShowExperienceEditor({
            model: this.model,
            name: b,
            url: a,
            previousMode: d,
            cdq: this.cdq,
            experiences: e,
            index: c.index
        })
    },
    showExperienceEditorForETClickTrackMode: function(a) {
        var b = ELM.Util.clone(this.model.getExperiences());
        this.destructEditorModes();
        this.addClickTrackMode();
        this.components.experienceEditorETClickTrackMode.authenticateAndShowExperienceEditor({
            model: this.model,
            cdq: this.cdq,
            experiences: b,
            url: this.model.getActivityUrl(),
            metricComponent: a.metricComponent,
            clickedElements: a.clickedElements
        })
    },
    showMetricsStep: function() {
        this.showStep(this.curStep)
    },
    getCompareParams: function() {
        return {
            ignoreKeysOfArrayElements: {
                metrics: ["isGoalMetric"]
            }
        }
    },
    isExperiencesEmpty: function() {
        var a = this.model.getExperiences() || [];
        return(a.length <= 0)
    },
    saveActivity: function(c) {
        var e = this,
            b = this.isExperiencesEmpty(),
            d = this.view.$(".saveAndContinueButton"),
            a = Granite.I18n.get("DD MMM. YYYY HH:mm:ssZ", null, "Date format pattern for moment.js. e.g. 12 Jun. 2014 13:00+5:30 (http://momentjs.com/docs)");
        metricsComponent = this.components.metrics;
        c = c || "saved";
        d.attr("disabled", "disabled");
        this.model.setStatus(ELM.Activities.status.SYNCING);
        if(!this.model.getTitle()) {
            this.model.setTitle(this.model.getTitleOrDefault() + " " + moment().format(a))
        }
        if(metricsComponent.hasMetricsToBeSaved() && !metricsComponent.validateMetrics()) {
            this.switchToStep(2);
            metricsComponent.validateMetrics();
            return
        }
        this.model.setStatus(ELM.Activities.status.SYNCING);
        d.attr("disabled", "disabled");
        this.showWaitMessage(Granite.I18n.get("Please wait while we save your activity."));
        this.model.save(null, {
            success: function(f) {
                e.clearBackupActivityAttributes();
                e.clearCurStep();
                e.trigger("model:" + c, f);
                if(b) {
                    F.trigger("infoNotification", {
                        message: Granite.I18n.get("{0} will stay in draft status until experiences are edited.", f.getTitle()),
                        heading: Granite.I18n.get("Note")
                    })
                } else {
                    F.trigger("successNotification", {
                        message: Granite.I18n.get("{0} has been saved.", f.getTitle()),
                        heading: Granite.I18n.get("SUCCESS")
                    })
                }
            },
            error: function(g, f) {
                var h;
                if((typeof f !== "undefined") && f !== null && (typeof f.responseText !== "undefined") && f.responseText !== null) {
                    var i = JSON.parse(f.responseText);
                    h = i["error.message"]
                }
                if(e.unsavedDialog.$element.is(":visible")) {
                    e.clearCurStep();
                    e.clearBackupActivityAttributes();
                    e.unsavedDialog.hide();
                    e.showErrorDialog(h);
                    e.trigger("model:saveFailed")
                } else {
                    d.removeAttr("disabled");
                    F.trigger("errorNotification", {
                        message: h || Granite.I18n.get("Activity cannot be saved."),
                        heading: Granite.I18n.get("ERROR")
                    })
                }
            }
        })
    },
    clearCurStep: function() {
        this.curStep = null
    },
    validateClickTracking: function(f) {
        var e = this.model.getMetrics() || [],
            h, g = [],
            b = f.selector.split(" > ").join(" "),
            a = false;
        h = _.filter(e, function(i) {
            return i.action == "elementClick"
        }) || [];
        _.each(h, function(i) {
            i.constraints = i.constraints || [];
            g = g.concat(i.constraints)
        });
        for(var d = 0; d < g.length; d++) {
            var c = g[d].term || "";
            if(c.indexOf(b) != -1) {
                a = true;
                break
            }
        }
        if(a) {
            this.components.experienceEditor.showClickTrackBreakWarning()
        }
    },
    destructEditorModes: function() {
        var b = ["experienceEditorETClickTrackMode", "experienceEditor"];
        for(var a in this.components) {
            if(b.indexOf(a) != -1) {
                this.components[a].destroy();
                this.components[a].isSetup = false
            }
        }
        this.cdq.domListeners = {};
        this.cdq.domListenersCount = 0;
        this.cdq.requests = [];
        return this
    },
    changeExperienceEditorMode: function(a) {
        var b = {
            experienceTargeting: this.showExperienceEditorForExperienceTargetingMode,
            ETClicktrack: this.showExperienceEditorForETClickTrackMode
        };
        if(!a.newMode) {
            this.showStep(this.curStep);
            return
        }
        b[a.newMode].call(this, a.data || {})
    },
    addNewAudienceExperiencePair: function() {
        var c = this.model.getExperiences(),
            b = this.view.$(".scrollable"),
            a;
        if(c.length < 10) {
            this.components.infoGraphic.addNewAudienceExperiencePair();
            a = b.get(0).scrollHeight - b.height();
            if(a > 0) {
                b.scrollTop(a)
            }
        } else {
            F.trigger("noticeNotification", {
                message: Granite.I18n.get("Limit 10 audiences per activity")
            })
        }
    }
});
"use strict";
ELM.Activities.TrafficEstimatorPopover = new Class({
    toString: "TrafficEstimatorPopover",
    extend: F.ModelComponent,
    options: {},
    View: F.View.extend({
        events: {
            'change input[name="activityTraffic"]': "updateActivityTraffic",
            'change input[name="testDuration"]': "updateTestDuration",
            'change input[name="conversionRate"]': "updateConversionRate",
            "click .icon-undo": "resetEstimatorHandler"
        }
    }),
    construct: function(a) {
        this.registerVars(a);
        this.registerBinders();
        this.initView(a.el)
    },
    registerVars: function(a) {
        this.viewMode = a.viewMode;
        this.trafficStatusNotificationOptions = a.trafficStatusNotificationOptions;
        this.trafficStatusOnLastUpdate = false;
        this.trafficStatusTooltip = null
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.TrafficEstimatorPopover
        });
        this.load({});
        this.registerListeners();
        this.updateView();
        this.render()
    },
    registerListeners: function() {
        this.listenTo(this.model, "change", this.updateView);
        this.listenTo(this.model, "invalid", this.showInputFieldError);
        this.listenTo(this.view, "renderComplete", this.initializeWidgets)
    },
    initializeWidgets: function() {
        this.addHelpLink();
        this.updateTrafficStatusTooltip(this.model.getActivityTraffic() === null)
    },
    registerBinders: function() {
        this.bind(this.updateView);
        this.bind(this.initializeWidgets);
        this.bind(this.showInputFieldError)
    },
    addHelpLink: function() {
        var a = this.view.$(".help-link");
        if(this.helpLink) {
            a.attr("href", this.helpLink)
        } else {
            a.hide()
        }
    },
    updateTrafficStatusTooltip: function(a) {
        this.view.$(".traffic-status-tooltip").toggleClass("hidden", !a)
    },
    updateView: function() {
        var d = this.model.get("statisticallyOk"),
            e = false,
            b = false,
            a = false;
        if(!this.model.getExperienceCount()) {
            this.disable();
            return
        }
        if(this.model.hasAllData()) {
            e = this.model.isStatisticallyOk();
            b = !e
        } else {
            a = true
        }
        this.view.$el.toggleClass("success", e);
        this.view.$el.toggleClass("notice", a || b);
        var c = $("#trafficEstimatorBtn").find(".traffic-estimator-deco");
        c.toggleClass("success", e).toggleClass("icon-check-circle", e).toggleClass("icon-alert", b || a).toggleClass("red-notify", b).toggleClass("yellow-notify", a);
        if(this.trafficStatusOnLastUpdate !== d) {
            if(this.model.hasAllData() && !d) {
                this.showTrafficStatusWarningTooltip()
            }
            this.trafficStatusOnLastUpdate = d
        }
        this.updateHeader();
        this.updateTrafficStatus()
    },
    updateHeader: function() {
        var a = Granite.I18n.get("Estimate Your Traffic");
        if(this.model.hasAllData()) {
            if(this.model.isStatisticallyOk()) {
                a = Granite.I18n.get("You Have Sufficient Traffic")
            } else {
                a = Granite.I18n.get("You Have Insufficient Traffic")
            }
        }
        this.view.$el.find(".modal-header h2").text(a)
    },
    updateTrafficStatus: function() {
        var a = this.getTrafficStatus();
        this.view.$el.find(".traffic-status .content").html(a)
    },
    showInputFieldError: function(b, a) {
        var d = this.view.$('input[name="' + a.field + '"]'),
            c = a.message;
        d.addClass("error");
        if(c) {
            d.siblings(".form-error").text(c).removeClass("hidden")
        }
    },
    hideInputFieldError: function(a) {
        a.removeClass("error");
        a.siblings(".form-error").addClass("hidden")
    },
    setExperienceCount: function(a) {
        this.model.setExperienceCount(a);
        this.updateView();
        this.view.$el.find(".experienceCountPlaceholder").text(a)
    },
    getCoralPopover: function() {
        return this.view.$el.parent().data("popover")
    },
    resetEstimatorHandler: function(a) {
        a.stopPropagation();
        this.model.reset({
            userValuesOnly: true
        });
        this.model.resetTestDuration()
    },
    setActivityDates: function(a, b) {
        this.model.setActivityDates(a, b)
    },
    enable: function() {
        var a = this.trafficStatusNotificationOptions.pointAtEl;
        if(a.is(":disabled")) {
            a.removeAttr("disabled")
        }
        return this
    },
    disable: function() {
        var a = this.trafficStatusNotificationOptions.pointAtEl;
        $("#trafficEstimatorBtn").find(".traffic-estimator-deco").attr("class", "xsmall traffic-estimator-deco");
        a.attr("disabled", "disabled");
        return this
    },
    updateActivityTraffic: function(a) {
        var c = $(a.currentTarget),
            b = c.val().trim();
        this.hideInputFieldError(c);
        this.updateTrafficStatusTooltip(false);
        this.model.setActivityTraffic(b);
        this.updateView()
    },
    updateTestDuration: function(a) {
        var b = $(a.currentTarget);
        this.hideInputFieldError(b);
        this.model.setTestDuration(b.val().trim());
        this.updateView()
    },
    updateConversionRate: function(a) {
        var b = $(a.currentTarget);
        this.hideInputFieldError(b);
        this.model.setConversionRate(b.val().trim());
        this.updateView()
    },
    showTrafficStatusWarningTooltip: function() {
        var b = this;
        if(!this.trafficStatusNotificationOptions || !this.trafficStatusNotificationOptions.pointAtEl) {
            return
        }
        var c = this.getCoralPopover();
        if(c && c.options.visible) {
            return
        }
        var a = this.getTrafficStatusTooltipEl();
        a.find(".tooltip-content").html(Granite.I18n.get("Traffic is insufficient.") + "<br>" + Granite.I18n.get("Click here to get more information."));
        this.getTrafficStatusTooltip().show();
        setTimeout(function() {
            b.getTrafficStatusTooltip().hide()
        }, 5000)
    },
    getTrafficStatusTooltip: function() {
        var a = this.getTrafficStatusTooltipEl();
        if(!a.data("tooltip")) {
            $(a).tooltip({
                target: this.trafficStatusNotificationOptions.pointAtEl,
                distance: 0,
                delay: 0
            })
        }
        return a.data("tooltip")
    },
    getTrafficStatusTooltipEl: function() {
        if(!this.trafficStatusTooltip) {
            this.trafficStatusTooltip = $('<div class="tooltip arrow-top container-absolute error traffic-insufficient"></div>');
            $('<i class="icon icon-alert float-l font-size-1"></i>').appendTo(this.trafficStatusTooltip);
            $('<div class="tooltip-content margin-l-1-5"></div>').appendTo(this.trafficStatusTooltip)
        }
        return this.trafficStatusTooltip
    }
});
"use strict";
ELM.Activities.TrafficEstimatorPopoverMVT = new Class({
    toString: "TrafficEstimatorPopoverMVT",
    extend: ELM.Activities.TrafficEstimatorPopover,
    Model: ELM.Models.TrafficEstimationMVT,
    helpLink: "https://marketing.adobe.com/resources/help/en_US/target/mvt/t_traffic_estimator.html",
    getTrafficStatus: function() {
        var a, b;
        if(!this.model.hasAllData()) {
            return Granite.I18n.get("To determine if this activity will get enough traffic, enter duration, estimated page impressions and the typical conversion rate")
        }
        if(this.model.isStatisticallyOk()) {
            return Granite.I18n.get("Excellent traffic, good to go!")
        }
        a = this.model.getRecommendedExperienceCount();
        b = this.model.getRecommendedTestDurationInDays();
        if(a) {
            return Granite.I18n.get('To generate lift, we recommend reducing the number of combinations to <span class="number">{0}</span> or run the test for <span class="number">{1}</span> days.', [a, b])
        }
        return Granite.I18n.get("The page traffic is far below the required level.") + Granite.I18n.get(' You will have to run the test for a long period of time (<span class="number">{0}</span> days).', [b]) + Granite.I18n.get(" You can reduce this time by limiting the number of experiences.")
    }
});
"use strict";
ELM.Activities.TrafficEstimatorPopoverOneToOne = new Class({
    toString: "TrafficEstimatorPopoverOneToOne",
    extend: ELM.Activities.TrafficEstimatorPopover,
    Model: ELM.Models.TrafficEstimationOneToOne,
    getTrafficStatus: function() {
        var a, b;
        if(!this.model.hasAllData()) {
            return Granite.I18n.get("To determine if personalized content is ready in time, enter estimated page impressions and the typical conversion rate")
        }
        if(this.model.isStatisticallyOk()) {
            return Granite.I18n.get("Excellent traffic, good to go!")
        }
        a = this.model.getRecommendedExperienceCount();
        b = this.model.getRecommendedTestDurationInDays();
        if(a) {
            return Granite.I18n.get('Personalized content will need <span class="number">{0}</span> days to be ready. Consider reducing the number of combinations to <span class="number">{1}</span>', [b, a])
        }
        return Granite.I18n.get("The page traffic is far below the required level.") + " " + Granite.I18n.get('Personalized content will need <span class="number">{0}</span> days to be ready.', [b]) + " " + Granite.I18n.get("Consider reducing the number of combinations for faster results.")
    }
});
"use strict";
ELM.Activities.Overview = new Class({
    toString: "activityOverview",
    extend: F.ModelComponent,
    options: {
        visible: true
    },
    View: F.View.extend({
        className: "overview",
        events: {
            "click .target-criteria-view-toggle": "toggleTargetCriteriaView"
        }
    }),
    Summary: ELM.Activities.Summary,
    construct: function(a) {
        this.model = a.activityModel;
        this.view = new this.View({
            component: this,
            el: a.el,
            model: this.model,
            template: ELM.Activities.Templates.Overview
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.addSummary()
        })
    },
    destruct: function() {
        $("#view-experience-dialog").remove()
    },
    addSummary: function() {
        this.model.setActivityMode("viewMode");
        this.addComponent(new this.Summary({
            el: this.view.$(".overviewSummary"),
            model: this.model,
            visible: true
        }), "overviewSummary")
    },
    toggleTargetCriteriaView: function() {
        this.view.$(".target-criteria").toggleClass("expand")
    }
});
ELM.Activities.OneToOneOverview = new Class({
    toString: "oneToOneOverview",
    extend: ELM.Activities.Overview,
    Summary: ELM.Activities.OneToOneSummary
});
"use strict";
ELM.Activities.Collision = new Class({
    toString: "activityCollision",
    extend: F.Component,
    View: F.View.extend({
        className: "collision"
    }),
    construct: function(a) {
        this.fetchActivityCollision(a.activityId, a.el)
    },
    fetchActivityCollision: function(c, a) {
        var b = this;
        new ELM.Collections.ActivityCollisions().setActivityId(c).fetch({
            success: function(d) {
                if(d.length) {
                    b.createAndRenderView(a);
                    b.addSubComponents(d);
                    b.showCollisionList()
                } else {
                    b.triggerNoCollisionData()
                }
            },
            error: function() {
                F.trigger("errorNotification", {
                    message: Granite.I18n.get("Activity collisions not shown due to network error."),
                    heading: Granite.I18n.get("Error")
                });
                b.triggerNoCollisionData()
            }
        })
    },
    addSubComponents: function(a) {
        this.addComponent(new ELM.Activities.CollisionList({
            el: this.view.$(".activity-collision-list"),
            collection: a
        }), "collisionList").render()
    },
    showCollisionList: function() {
        this.collisionList.show({
            silent: true
        })
    },
    createAndRenderView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activity.Templates.Collision
        }).render()
    },
    triggerNoCollisionData: function() {
        F.trigger(ELM.evtNamespace + ":collision:noData")
    }
});
ELM.Activities.CollisionList = new Class({
    toString: "activityCollisionList",
    extend: F.ListComponent,
    Collection: ELM.Collections.ActivityCollisions,
    ItemView: F.ListComponent.prototype.ItemView.extend({
        events: {
            "click .activity-row": "handleActivityRowClick"
        }
    }),
    construct: function(a) {
        this.collection = a.collection;
        this.collectionLoaded = true;
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets()
        })
    },
    ItemTemplate: function() {
        return ELM.Activity.Templates.CollisionListItem.apply(this, arguments)
    },
    initializeWidgets: function() {
        this.view.$el.find(".collision-list-row").accordion({
            active: true
        })
    },
    handleActivityRowClick: function(g) {
        g.stopPropagation();
        var a = this.getActivityRow(g),
            f = "#activitydetails/",
            e, d, c, b;
        if(!a.hasClass("enabled")) {
            return
        }
        e = this.getModelFromLi(this.getCollisionListItem(g));
        d = a.index();
        c = e.getActivityId(d);
        b = e.getActivityType(d);
        f = f + b + "/:" + c;
        ELM.Activities.router.navigate(f, {
            trigger: true
        })
    },
    getCollisionListItem: function(a) {
        return $(a.currentTarget).closest(".listItem")
    },
    getActivityRow: function(a) {
        return $(a.currentTarget).closest("li")
    }
});
"use strict";
ELM.Activities.ReportFilterSettings = new Class({
    toString: "reportFilterSettings",
    extend: F.Component,
    View: F.View.extend({}),
    construct: function(a) {
        this.url = a.url;
        this.filterId = a.filterId;
        this.filterName = a.filterName;
        this.defaultCollection = this.getCollectionFromItems(a.defaultItems || []);
        this.selectedItem = a.selectedItem;
        this.reportSuite = a.reportSuite;
        this.groupBy = a.groupBy;
        this.placeholderText = a.placeholderText;
        this.sortCollection = a.sort;
        this.parenthesize = a.parenthesize;
        this.view = new this.View({
            component: this,
            el: a.el,
            model: {
                filterId: this.filterId,
                filterName: this.filterName,
                filterLabel: a.filterLabel
            },
            template: ELM.Activity.Templates.ReportFilterSettings
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addSubComponents();
            this.loadFilterItems()
        });
        this.listenTo(this, "1-1-reports:offer-level-shown", this.hideEngagementMetric.bind(this));
        this.listenTo(this, "1-1-reports:activity-level-shown", this.showEngagementMetric.bind(this));
        this.collection = this.defaultCollection
    },
    initWidgets: function() {
        this.$reportFilterModal = this.view.$(".report-filter-modal");
        this.$chosenFilterPlaceholder = this.view.$(".chosen-filter-placeholder")
    },
    addSubComponents: function() {
        this.addComponent(new ELM.ModalPicker({
            el: this.$reportFilterModal,
            data: this.getFilterModalData()
        }), "picker").on("items:selected", this.setFilter.bind(this))
    },
    getFilterModalData: function() {
        return {
            heading: Granite.I18n.get("Select {0} for Reporting", this.filterName),
            selectButtonName: Granite.I18n.get("Change {0}", this.filterName),
            items: this.getFilterItemsToRender(),
            defaultSelected: [this.selectedItem],
            isGrouped: this.groupBy ? true : false
        }
    },
    loadFilterItems: function() {
        var a = this;
        if(this.url) {
            this.fetchFilterItems().done(function(b) {
                if(b.errmsg) {
                    a.showErrorMessage(b.errmsg || "")
                } else {
                    a.updateCollection(b);
                    a.picker.trigger("items:loaded", a.groupBy ? a.getGroupedFilterItemsToRender() : a.getFilterItemsToRender())
                }
            }).fail(function(b, d, c) {
                a.showErrorMessage(JSON.parse(b.responseText)["error.message"] || c)
            }).always(function() {
                a.view.$(".filter-label").removeClass("hidden");
                a.updateChosenFilterPlaceholder();
                a.parenthesizeLink()
            })
        } else {
            a.updateCollection();
            a.picker.trigger("items:loaded", a.groupBy ? a.getGroupedFilterItemsToRender() : a.getFilterItemsToRender());
            a.view.$(".filter-label").removeClass("hidden");
            a.updateChosenFilterPlaceholder();
            a.parenthesizeLink()
        }
    },
    parenthesizeLink: function() {
        if(this.parenthesize) {
            this.$chosenFilterPlaceholder.before("(").after(")")
        }
    },
    fetchFilterItems: function() {
        var a = this;
        return $.ajax({
            url: a.url,
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        })
    },
    getFilterItemsToRender: function() {
        var b = this,
            d = [],
            a = this.selectedItem,
            c = this.collection[a];
        if(c) {
            d.push({
                id: a,
                "jcr:title": c.name,
                type: c.type,
                source: c.source
            })
        }
        for(var e in this.collection) {
            if(e !== a) {
                d.push({
                    id: e,
                    "jcr:title": b.collection[e].name,
                    type: b.collection[e].type,
                    source: b.collection[e].source
                })
            }
        }
        return d
    },
    getGroupedFilterItemsToRender: function() {
        var d = {},
            b = [],
            e = this.getGroup(this.collection[this.selectedItem]),
            a = "others",
            c, f;
        for(var g in this.collection) {
            f = this.getGroup(this.collection[g]) || a;
            if(!d[f]) {
                d[f] = []
            }
            d[f].push({
                id: g,
                "jcr:title": this.collection[g].name
            })
        }
        c = _.omit(d, e, a);
        if(e) {
            b.push({
                group: e,
                items: d[e]
            })
        }
        for(f in c) {
            b.push({
                group: f,
                items: c[f]
            })
        }
        if(d[a]) {
            b.push({
                group: a,
                items: d[a]
            })
        }
        return b
    },
    getGroup: function(a) {
        if(!a) {
            return undefined
        }
        return a[this.groupBy]
    },
    updateCollection: function(c) {
        var b = this;
        if(this.reportSuite) {
            for(var a in c) {
                if(c[a].rsid !== b.reportSuite) {
                    delete c[a]
                }
            }
        }
        if(this.sortCollection) {
            _.each(c, function(e, d) {
                e.key = d
            });
            c = _.chain(c).sortBy(function(d) {
                return d.name
            }).indexBy("key").value()
        }
        this.collection = _.extend({}, this.defaultCollection, c)
    },
    getCollectionFromItems: function(a) {
        var b = {};
        _.each(a, function(c) {
            b[c.id] = c
        });
        return b
    },
    updateChosenFilterPlaceholder: function() {
        var a = this.collection[this.selectedItem];
        if(!this.placeholderText) {
            this.$chosenFilterPlaceholder.text(a && a.name || Granite.I18n.get("Choose"))
        } else {
            this.$chosenFilterPlaceholder.text(this.placeholderText)
        }
    },
    showErrorMessage: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    setFilter: function(b) {
        var a = this.collection[b].name,
            c = this.collection[b].source;
        this.selectedItem = b;
        this.updateChosenFilterPlaceholder();
        this.trigger("reportFilter:" + this.filterId + "Change", b, a, c)
    },
    hideEngagementMetric: function(a) {
        this.picker.view.$el.find('li[data-type="engagement"]').addClass("hidden")
    },
    showEngagementMetric: function(a) {
        this.picker.view.$el.find('li[data-type="engagement"]').removeClass("hidden")
    }
});
ELM.Activities.ReportDateSettings = new Class({
    toString: "reportDateSettings",
    extend: F.Component,
    View: F.View.extend({
        events: {
            'change .datepicker input[type="text"]': "updateDateSettings"
        }
    }),
    options: {
        visible: true
    },
    construct: function(a) {
        this.datepickerInitialized = false;
        this.initView(a);
        this.listenTo(this.view, "renderComplete", function() {
            this.initializeWidgets();
            this.datepickerInitialized = true;
            this.lastModifiedFieldSelector = null
        });
        F.on("reportSettingsError:dates", this.addErrorStateToLastModifiedField.bind(this))
    },
    initView: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activities.Templates.ReportDateSettings,
            model: a.model
        })
    },
    initializeWidgets: function() {
        this.view.$(".datepicker").datepicker()
    },
    addErrorStateToLastModifiedField: function() {
        this.view.$el.find(this.lastModifiedFieldSelector).addClass("error")
    },
    updateDateSettings: function(a) {
        if(!this.datepickerInitialized) {
            return
        }
        this.lastModifiedFieldSelector = "." + a.currentTarget.getAttribute("data-name");
        this.clearErrors();
        this.triggerSettingsChangeEvent()
    },
    updateDatePickers: function(a) {
        this.view.model.startDate = a.startDate;
        this.view.model.endDate = a.endDate;
        this.view.render()
    },
    clearErrors: function() {
        this.view.$el.find(".error").removeClass("error")
    },
    triggerSettingsChangeEvent: function() {
        var a = {
            startDate: this.getStartDateValue(),
            endDate: this.getEndDateValue()
        };
        this.trigger("reportDateSettings:change", a)
    },
    getStartDateValue: function() {
        return this.view.$(".startDatepicker input[type=hidden]").val()
    },
    getEndDateValue: function() {
        return this.view.$(".endDatepicker input[type=hidden]").val()
    },
    destruct: function() {
        F.off("reportSettingsError:startDate").off("reportSettingsError:endDate")
    }
});
ELM.Activities.ReportBestWorstFilter = new Class({
    toString: "reportBestWorstFilter",
    extend: F.Component,
    View: F.View.extend({
        events: {
            "change input[name=best-worst-filter]": "handleBestWorstFilterChange"
        }
    }),
    options: {
        visible: true
    },
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activity.Templates.ReportBestWorstFilter,
            model: a.model
        })
    },
    handleBestWorstFilterChange: function(a) {
        this.triggerFilterChangeEvent($(a.target).data("show"))
    },
    triggerFilterChangeEvent: function(a) {
        this.trigger("reportBestWorstFilter:change", a)
    }
});
ELM.Activities.ReportOfferLevelToggle = new Class({
    toString: "reportOfferLevelToggle",
    extend: F.Component,
    View: F.View.extend({
        events: {
            "selected .offer-level-toggle": "triggerOfferLevelViewChangedEvent"
        }
    }),
    options: {
        visible: true
    },
    construct: function(a) {
        this.initView(a)
    },
    initView: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this,
            template: ELM.Activity.Templates.ReportOfferLevelToggle,
            visible: false
        });
        this.registerListeners();
        this.view.render();
        this.hide()
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete)
    },
    handleRenderComplete: function() {
        this.initializeWidgets()
    },
    initializeWidgets: function() {
        this.view.$(".select").select()
    },
    triggerOfferLevelViewChangedEvent: function(a) {
        F.trigger(ELM.evtNamespace + ":reports:offerLevelToggleChange", a.selected)
    }
});
"use strict";
ELM.Activities.ReportSettings = new Class({
    toString: "reportSettings",
    extend: F.ModelComponent,
    Model: ELM.Models.ReportSettings,
    View: F.View.extend({
        events: {
            "selected .dimension-selector": "updateSuccessCriteriaMetricByDimension",
            "click .saveSettings": "saveAndClose",
            "click .cancelSettings": "resetSettings",
            "click .close": "resetSettings"
        }
    }),
    construct: function(a) {
        this.initReportSettingsModel(a.model);
        this.initView(a.el)
    },
    initReportSettingsModel: function(a) {
        var c = a.metrics[0],
            b;
        this.reportSettingsModel = new this.Model({
            id: a.id,
            settingsPanelId: a.reportName + "SettingsPanel",
            settingsPanelIdLink: "#" + a.reportName + "SettingsPanel",
            startDate: a.startDate,
            endDate: a.endDate,
            controlExperienceId: a.controlExperienceId,
            experiences: a.experiences,
            successMetric: c,
            dimension: c.revenueType || "rpv",
            metrics: a.metrics,
            reportSuite: a.reportSuite,
            targetId: a.targetId,
            extremeOrders: a.extremeOrders,
            activityType: a.activityType
        });
        if(c.type === "analytics") {
            this.reportSettingsModel.setSuccessMetricDisplayName(c["jcr:title"]);
            this.reportSettingsModel.setSuccessMetricSource(c.analyticsMetricSource)
        }
        this.reportSettingsModel.updateSuccessCriteriaMetric();
        this.updateReportTitle();
        this.reportSettingsModel.on("invalid", function(e, d) {
            F.trigger("errorNotification", {
                message: d.message
            });
            F.trigger("reportSettingsError:" + d.source)
        })
    },
    initView: function(a) {
        if(!this.view) {
            this.view = new this.View({
                el: a,
                model: this.reportSettingsModel.toJSON(),
                component: this,
                template: ELM.Activities.Templates.ReportSettings
            });
            this.view.render();
            this.view.$(".select").select();
            this.show()
        }
        this.toggleDimensionDropdown();
        this.toggleExtremeOrdersCheckbox()
    },
    validateAndSaveDateSettings: function(a) {
        if(this.reportSettingsModel.set(a, {
                validate: true
            })) {
            this.saveSettings()
        }
    },
    updateMetricFromFilter: function(c, d, a) {
        var b = this.reportSettingsModel.getMetrics(),
            e = _.findWhere(b, {
                "jcr:title": c
            });
        if(e) {
            this.reportSettingsModel.setSuccessMetric(e);
            if(e.revenueType) {
                if(e.revenueType === "conversionRate") {
                    e.revenueType = "orders"
                }
                this.reportSettingsModel.setDimension(e.revenueType);
                this.getElementByName("dimension").val(e.revenueType).trigger("change")
            }
            this.reportSettingsModel.updateSuccessCriteriaMetric();
            this.toggleDimensionDropdown();
            this.toggleExtremeOrdersCheckbox()
        } else {
            this.reportSettingsModel.unset("successMetric");
            this.reportSettingsModel.setSuccessCriteriaMetric(c);
            this.reportSettingsModel.setSuccessMetricDisplayName(d);
            this.reportSettingsModel.setSuccessMetricSource(a)
        }
        this.updateGraphViewDropdown();
        this.saveSettings()
    },
    updateAudienceFromFilter: function(a) {
        this.reportSettingsModel.setSegment(a);
        this.saveSettings()
    },
    setBestWorstFilter: function(a) {
        this.reportSettingsModel.setBestWorstFilter(a)
    },
    updateSuccessCriteriaMetricByDimension: function(a) {
        this.reportSettingsModel.setDimension(a.selected);
        this.reportSettingsModel.updateSuccessCriteriaMetric();
        this.updateGraphViewDropdown(a.selected)
    },
    updateGraphViewDropdown: function(f) {
        var d = this.view.$('select[name="calculationMode"]'),
            b = Granite.I18n.get("Running Average"),
            c = Granite.I18n.get("Running Average Lift"),
            e = Granite.I18n.get("Daily"),
            a = Granite.I18n.get("Daily Lift");
        if(f === "sales") {
            b = Granite.I18n.get("Running Total");
            c = Granite.I18n.get("Lift in Running Total")
        }
        if(this.reportSettingsModel.getSuccessMetric()) {
            d.html('<option value="cumulative">' + b + '</option><option value="cumulativeDifference">' + c + '</option><option value="daily">' + e + '</option><option value="dailyDifference">' + a + "</option>")
        } else {
            d.html('<option value="cumulative">' + b + '</option><option value="daily">' + e + "</option>")
        }
        ELM.Util.updateSelectWidget(this.view.$(".calculation-mode-selector"))
    },
    toggleDimensionDropdown: function() {
        if(this.reportSettingsModel.getSuccessMetric().revenueType) {
            this.view.$el.find(".show-for-revenue-metrics-only").show()
        } else {
            this.view.$el.find(".show-for-revenue-metrics-only").hide()
        }
    },
    toggleExtremeOrdersCheckbox: function() {
        if(this.reportSettingsModel.getSuccessMetric().revenueType || this.reportSettingsModel.getSuccessMetric().engagementType) {
            this.view.$el.find(".extreme-orders-row").show()
        } else {
            this.view.$el.find(".extreme-orders-row").hide()
        }
    },
    saveSettings: function() {
        this.settings = {
            extremeOrders: this.getElementByName("extremeOrders").is(":checked"),
            controlExperienceId: this.getElementByName("controlExperience").val(),
            calculationMode: this.getElementByName("calculationMode").val()
        };
        this.updateModelFromSettings()
    },
    saveAndClose: function() {
        this.saveSettings();
        this.close()
    },
    getElementByName: function(a) {
        return this.view.$el.find('[name="' + a + '"]')
    },
    updateModelFromSettings: function() {
        this.reportSettingsModel.setExtremeOrders(this.settings.extremeOrders);
        if(this.settings.controlExperienceId) {
            this.reportSettingsModel.setcontrolExperienceId(this.settings.controlExperienceId)
        }
        this.reportSettingsModel.setCalculationMode(this.settings.calculationMode);
        this.reportSettingsModel.setResolutionFromDates();
        this.trigger("change", this.reportSettingsModel);
        this.updateReportTitle()
    },
    resetSettings: function() {
        ELM.Util.updateSelectWidget(this.view.$(".dimension-selector"), this.reportSettingsModel.getDimension());
        this.getElementByName("extremeOrders").attr("checked", this.reportSettingsModel.getExtremeOrders());
        ELM.Util.updateSelectWidget(this.view.$(".calculation-mode-selector"), this.reportSettingsModel.getCalculationMode());
        ELM.Util.updateSelectWidget(this.view.$(".control-experience-selector"), this.reportSettingsModel.getControlExperienceId());
        this.close()
    },
    updateReportTitle: function() {
        var a = this.reportSettingsModel.getReportTitle(),
            b = this.getExtremeOrdersText();
        this.trigger("reportTitle:change", a, b)
    },
    getExtremeOrdersText: function() {
        var b = "",
            c = this.reportSettingsModel.getSuccessMetric(),
            a = c && (c.revenueType || c.engagementType);
        if(this.reportSettingsModel.getExtremeOrders() && a) {
            b = Granite.I18n.get("Extreme Values Excluded") + " "
        }
        return b
    },
    close: function() {
        this.view.$(this.view.$(this.view.model.settingsPanelIdLink)).data("popover").toggleVisibility()
    }
});
"use strict";
ELM.Activities.ReportSettingsOneToOne = new Class({
    toString: "reportSettingsOneToOne",
    extend: ELM.Activities.ReportSettings,
    Model: ELM.Models.ReportSettingsOneToOne,
    updateReportTitle: function() {
        var a = this.reportSettingsModel.getReportTitle(),
            c = this.reportSettingsModel.getReportLevel(),
            d = {
                activity: Granite.I18n.get("Activity: "),
                offerLevel: '<i class="icon-chevronleft cursor-pointer report-title-breadcrumb back-to-activity-level"></i> ' + Granite.I18n.get("Offers") + ": ",
                offerDetail: '<i class="icon-chevronleft cursor-pointer report-title-breadcrumb back-to-offer-level"></i> '
            }[c],
            b = $(".one-to-one-report-title-placeholder");
        b.html(d + a);
        b.next(".beta-message").remove();
        if(c === "offerDetail") {
            b.append('<div class="badge beta-badge">Beta</div>');
            b.parent().append('<h5 class="beta-message">BETA: This report shows what Automated Personalization found to be predictive of behavior. <a href=" http://microsite.omniture.com/t2/help/en_US/target/target/c_reports_ap.html">Learn more</a> or <a href="mailto:tt-support@adobe.com?Subject=Feedback%20regarding%20offer%20details%20report">submit feedback</a>.</h5>')
        }
    }
});
"use strict";
ELM.Activities.CloudvizReport = new Class({
    extend: F.ModelComponent,
    toString: "genericCloudVizChart",
    getCurrencyObject: function() {
        var b = ELM.CurrencySymbol[ELM.clientLocale] || "$",
            c;
        try {
            c = cloudViz.localeDefinition(ELM.clientLocale).numberFormat.currency
        } catch(a) {
            c = cloudViz.localeDefinition("en").numberFormat.currency
        }
        c = ELM.Util.clone(c);
        c.symbol = b;
        return c
    },
    getLocalizationObject: function() {
        var a = {};
        try {
            a.numberFormat = ELM.Util.clone(cloudViz.localeDefinition(Granite.I18n.getLocale()).numberFormat)
        } catch(b) {
            a.numberFormat = ELM.Util.clone(cloudViz.localeDefinition("en").numberFormat)
        }
        a.numberFormat.currency = this.getCurrencyObject();
        return a
    },
    getCloudVizColors: function() {
        return cloudViz.dv.scale.color().values()
    }
});
ELM.Activities.FilterableReport = new Class({
    toString: "genericReport",
    extend: ELM.Activities.CloudvizReport,
    View: F.View.extend({}),
    FILTERED_COUNT: 5,
    construct: function(a) {
        this.placeholder = a.el;
        this.model = new this.Model(a.model);
        this.registerBinders();
        if(a.model.activityType === ELM.Activities.activityTypes.AB_ANALYTICS || a.model.reportSuite) {
            this.model.set("segment", "");
            this.model.set("resolution", this.getResolutionFromDates(a.model.startDate, a.model.endDate))
        }
        this.fetchReport(this.model)
    },
    createView: function(a, b) {
        this.view = new this.View({
            component: this,
            model: a,
            el: this.placeholder,
            template: b
        });
        this.registerListeners()
    },
    registerBinders: function() {
        this.bind(this.initAfterReportFetch);
        this.bind(this.initAfterReportFetchError);
        this.bind(this.sortBySortPropertyAndName)
    },
    registerListeners: function() {},
    fetchReport: function(a) {
        this.initBeforeReportFetch();
        this.model.onFetch({
            data: this.getUrlParamsForFetch(a),
            success: this.initAfterReportFetch,
            error: this.initAfterReportFetchError
        })
    },
    filter: function(a) {
        var b = a.get("successMetric");
        this.model.set("successMetric", b);
        this.fetchReport(a)
    },
    getUrlParamsForFetch: function(a) {
        var d = a.get("experiences"),
            b = a.get("controlExperienceId") || _.min(d, function(e) {
                    return e.id
                }).id,
            c = _.findWhere(d, {
                id: b
            });
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            resolution: a.get("resolution"),
            environment: a.get("environment"),
            calculationMode: a.get("calculationMode"),
            successCriteriaMetric: a.get("successCriteriaMetric"),
            controlExperience: c["jcr:title"],
            extremeOrders: a.get("extremeOrders"),
            segment: a.get("segment"),
            successMetric: a.get("successMetric")["jcr:title"]
        })
    },
    getErrorMessageModel: function(a) {
        var c = {
                noData: [Granite.I18n.get("There is no data available for the selected report settings.")],
                notReady: [Granite.I18n.get("The Activity you are trying to view has not been running long enough to generate a report."), Granite.I18n.get("Check back in an hour to see what's happened.")],
                0: [Granite.I18n.get("We are having trouble retrieving data for this report."), Granite.I18n.get("Please contact Adobe client-care if problem persists.")],
                400: [Granite.I18n.get("We are having trouble retrieving data for this report."), Granite.I18n.get("Please contact Adobe client-care if problem persists.")],
                500: [Granite.I18n.get("We are having trouble retrieving data for this report."), Granite.I18n.get("Please contact Adobe client-care if problem persists.")]
            }[a],
            b = {
                noData: "icon-report",
                notReady: "icon-pending",
                0: "icon-alert",
                400: "icon-alert",
                500: "icon-alert"
            }[a];
        return {
            message: c,
            icon: b
        }
    },
    getResolutionFromDates: function(a, b) {
        return ELM.Util.getResolutionFromDates(a, b)
    },
    triggerReportError: function() {
        this.trigger("report:error")
    },
    initBeforeReportFetch: function() {
        this.renderLoadingView()
    },
    initAfterReportFetch: function(b, a) {
        throw this.toString() + ": initAfterReportFetch not implemented"
    },
    renderView: function(a) {
        throw this.toString() + ": renderView not implemented"
    },
    renderLoadingView: function() {
        var a = Handlebars.compile(['<div class="row">', '<div class="cell retrieving">', '<div class="wait large"></div>', "</div>", "</div>"].join(""));
        this.createView({}, a);
        this.view.render()
    },
    initSorting: function(a) {
        a.filterSetting = this.filterSetting || "best";
        a.sortedExperiences = this.sortExperiences(_.clone(a.experiences));
        this.setExperienceFilters(a);
        return a
    },
    filterExcludedExperiences: function(a) {
        a = _.filter(a, function(b) {
            return !b.excluded
        });
        return a
    },
    sortExperiences: function(a) {
        a = this.filterExcludedExperiences(a);
        _.each(a, function(b) {
            b.nameLength = b.name.length
        });
        return a.sort(this.sortBySortPropertyAndName)
    },
    getSortCriterion: function(b) {
        var a = this.model.get("successMetric").revenueType === "sales";
        if(a) {
            return b.revenue
        }
        return b.lift
    },
    sortBySortPropertyAndName: function(d, c) {
        var f = _.min([d.nameLength, c.nameLength]),
            i = d.name.slice(0, f),
            e = c.name.slice(0, f),
            h = this.getSortCriterion(d),
            g = this.getSortCriterion(c);
        if(h !== g) {
            return(h > g) ? -1 : 1
        } else {
            if(d.nameLength === c.nameLength) {
                if(i.localeCompare(e) < 0) {
                    return -1
                }
                if(i.localeCompare(e) > 0) {
                    return 1
                }
            }
            if(d.nameLength < c.nameLength) {
                return -1
            }
            return 1
        }
    },
    setExperienceFilters: function(b) {
        var a = _.filter(b.experiences, function(c) {
            return c.name === b.reportFilter.controlExperience
        })[0];
        b.allExperiences = b.experiences;
        b.bestExperiences = b.sortedExperiences.slice(0, this.FILTERED_COUNT);
        b.worstExperiences = b.sortedExperiences.slice(-this.FILTERED_COUNT).reverse();
        b.bestExperiences = _.union(b.bestExperiences, [a]);
        b.worstExperiences = _.union(b.worstExperiences, [a])
    },
    formatResponse: function(a) {
        throw this.toString() + ": formatResponse not implemented"
    },
    responseIsEmpty: function(a) {
        return false
    },
    initAfterReportFetchError: function(a) {
        throw this.toString() + ": initAfterReportFetchError not implemented"
    }
});
"use strict";
ELM.Activities.ReportSummary = new Class({
    toString: "reportSummary",
    extend: ELM.Activities.FilterableReport,
    Model: ELM.Models.ActivitySummaryReport,
    getTemplate: function() {
        return ELM.Activity.Templates.ReportSummary
    },
    initAfterReportFetch: function(b, a) {
        this.renderView(a)
    },
    initAfterReportFetchError: function(b, a) {
        this.renderErrorView(a.status)
    },
    renderErrorView: function(b) {
        var c = this.getErrorMessageModel(b),
            a = ELM.Activities.Templates.ReportErrorMessage;
        this.createView(c, a);
        this.view.render();
        this.triggerReportError()
    },
    renderView: function(a) {
        var d = this.getErrorMessageModel("noData"),
            b = ELM.Activities.Templates.ReportErrorMessage,
            c = !this.responseIsEmpty(a);
        if(c) {
            b = this.getTemplate();
            d = this.formatResponse(a);
            if(this.model.isBestWorstFilterEnabled()) {
                d = this.initSorting(d)
            }
        }
        this.createView(d, b);
        if(this.model.isBestWorstFilterEnabled()) {
            this.setBestWorstFilter(this.filterSetting)
        }
        this.view.render();
        if(!c) {
            this.triggerReportError()
        }
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.handleRenderComplete()
        })
    },
    unregisterListeners: function() {
        this.stopListening(this.view, "renderComplete")
    },
    handleRenderComplete: function() {
        this.colorReportDataCells();
        $(".pulldown").pulldown()
    },
    getPreviewUrl: function(c) {
        var b = this.model.get("targetId"),
            a = this.model.get("activityUrl");
        return ELM.tntHost + "/onsite/admin?campaignId=" + b + "&recipeName=" + c.targetName + "&siteAction=redirect&clientCode=" + ELM.tntClientCode + "&open=campaignPreview&externalPreview=true&redirect=" + encodeURIComponent(a) + "&hideOnsite=true"
    },
    changeBestWorstFilter: function(a) {
        this.setBestWorstFilter(a);
        this.view.render()
    },
    setBestWorstFilter: function(a) {
        this.filterSetting = a;
        this.view.model.filterSetting = a;
        switch(this.view.model.filterSetting) {
            case "all":
                this.view.model.experiences = this.view.model.allExperiences;
                break;
            case "worst":
                this.view.model.experiences = this.view.model.worstExperiences;
                break;
            default:
                this.view.model.experiences = this.view.model.bestExperiences;
                break
        }
    },
    getSortCriterion: function(b) {
        var a = this.model.get("successMetric").revenueType === "sales";
        if(a) {
            return ELM.Util.convertCurrencyStringToInteger(b.reportTotals.sales)
        }
        return b.lift
    },
    addColorMarkerTo: function(b) {
        var a = this.getCloudVizColors();
        b.each(function(c) {
            var d = '<div class="marker" style="background-color:' + a[c] + '"></div>';
            $(d).prependTo(this)
        })
    },
    colorReportDataCells: function() {
        if(this.view.model.experiences && this.view.model.experiences.length <= 16) {
            this.addColorMarkerTo(this.view.$(".reportData .marker-placeholder"))
        }
    }
});
"use strict";
ELM.Activities.ReportSummaryElementContribution = new Class({
    toString: "ElementContributionSummaryReport",
    extend: ELM.Activities.ReportSummary,
    Model: ELM.Models.ElementContributionSummaryReport,
    getTemplate: function() {
        return ELM.Activities.Templates.ReportSummaryElementContribution
    },
    formatResponse: function(a) {
        if(a.reportFilter.successCriteriaMetric === "engagement") {
            a.reportFilter.successCriteriaMetric = this.model.get("successMetric").engagementType
        } else {
            if(a.reportFilter.successCriteriaMetric === "conversionRate" && this.model.get("successMetric").type === "revenue") {
                a.reportFilter.successCriteriaMetric = "orders"
            }
        }
        return a
    },
    renderView: function(a) {
        this.inherited(arguments);
        if(_.isUndefined(this.components.locationContributionChart)) {
            this.addComponent(new ELM.Activities.LocationContributionChart({
                visible: true
            }))
        }
        this.components.locationContributionChart.drawGraph(a, this.view.$(".report-chart-placeholder")[0])
    },
    updateDateSettings: function(a) {
        this.components.reportSettings.validateAndSaveDateSettings(a);
        this.components.reportDateSettings.updateDatePickers(a)
    },
    colorReportDataCells: function() {
        this.addColorMarkerTo(this.view.$(".offerData .marker-placeholder"));
        this.addColorMarkerTo(this.view.$(".locationData .marker-placeholder"))
    },
    initSorting: function(a) {},
    setBestWorstFilter: function(a) {},
    getUrlParamsForFetch: function(a) {
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            segment: a.get("segment") || "",
            extremeOrders: a.get("extremeOrders") || false,
            step: a.get("successMetric")["jcr:title"]
        })
    }
});
"use strict";
ELM.Activities.ReportSummaryAB = new Class({
    toString: "ReportSummaryAB",
    extend: ELM.Activities.ReportSummary,
    formatResponse: function(b) {
        var d = b.experiences,
            a = b.campaignTotals.count,
            e = this.model.get("successMetric"),
            c = {
                engagement: e.engagementType,
                revenue: b.reportFilter.successCriteriaMetric,
                conversion: "conversionRate"
            }[e.type];
        if(e.type === "revenue" && b.reportFilter.successCriteriaMetric === "conversionRate") {
            c = "orders"
        }
        b.activityType = this.model.getActivityType();
        b.campaignTotals.percentage = a > 0 ? 100 : 0;
        b.campaignTotals.conversionRate = b.campaignTotals.conversionRate * 100;
        if(_.isArray(d)) {
            _.each(d, function(g, f) {
                g.percentage = a > 0 ? ((100 * g.reportTotals.count) / a) : 0;
                g.lift = (g.reportTotals.count > 0) ? g.lift * 100 : 0;
                g.confidence = parseFloat((g.confidence * 100).toFixed(2));
                g.reportTotals.conversionRate = g.reportTotals.conversionRate * 100;
                g.previewUrl = this.getPreviewUrl(g);
                if(g.winner) {
                    this.triggerReportWinnerReceivedEvent(f)
                }
            }, this)
        }
        b.reportFilter.scMetricName = ELM.ReportMetrics[c];
        return b
    },
    triggerReportWinnerReceivedEvent: function(a) {
        F.trigger(ELM.evtNamespace + ":reportSummary:winnerReceived", a)
    }
});
"use strict";
ELM.Activities.ReportSummaryA4T = new Class({
    toString: "ReportSummaryA4T",
    extend: ELM.Activities.ReportSummary,
    responseKey: {
        count: 0,
        conversions: 4,
        lift: 2,
        confidence: 3,
        successMetric: 1,
        reportTotals: 5
    },
    formatResponse: function(a) {
        this.isTargetMetric = this.checkIfMetricIsTargetNative(a);
        a.reportSuite = this.model.getReportSuite();
        a.isAnalyticsMetric = !this.isTargetMetric;
        a = this.formatTableHeader(a);
        a = this.formatTableFooter(a);
        a = this.formatTableRows(a);
        a = this.determineWinningExperience(a);
        return a
    },
    checkIfMetricIsTargetNative: function(a) {
        return a.metrics[this.responseKey.successMetric].id === ELM.A4TQueryVariables.conversionRate
    },
    formatTableHeader: function(a) {
        a.reportFilter = {};
        a.reportFilter.scMetricName = a.metrics[this.responseKey.successMetric].name;
        if(this.isTargetMetric) {
            a.reportFilter.scMetricName = Granite.I18n.get("Conversion Rate")
        }
        return a
    },
    formatTableRows: function(b) {
        var f = b.data.length - 1,
            a = b.data[f][0]["0"].val,
            e = this.responseKey.successMetric,
            c = b.metrics[this.responseKey.successMetric].type;
        if(this.isTargetMetric) {
            e = this.responseKey.conversions;
            b.reportFilter.scMetricName = ELM.ReportMetrics.conversionRate;
            b.reportFilter.successCriteriaMetric = "conversionRate"
        }
        b.experiences = [];
        for(var d = 0; d < f; d++) {
            b.experiences[d] = {
                id: b.filters[d].info.id,
                name: b.filters[d].info.name || "Unspecified",
                lift: parseFloat(b.data[d][0][this.responseKey.lift].val) * 100,
                confidence: parseFloat(b.data[d][0][this.responseKey.confidence].val) * 100,
                percentage: a > 0 ? ((100 * b.data[d][0][this.responseKey.count].val) / a).toFixed(2) : 0,
                isControl: b.filters[d].info.id === parseInt(this.controlExperienceId, 10),
                previewUrl: this.getPreviewUrl({
                    recipeName: b.filters[d].info.name
                }),
                reportTotals: {
                    count: parseFloat(b.data[d][0][this.responseKey.count].val),
                    conversions: parseFloat(b.data[d][0][e].val),
                    metricFormat: c
                }
            };
            if(c === "percent") {
                b.experiences[d].reportTotals.conversions *= 100
            }
            if(this.isTargetMetric) {
                b.experiences[d].reportTotals.conversionRate = parseFloat(b.data[d][0][this.responseKey.successMetric].val) * 100
            }
        }
        delete b.filters;
        delete b.data;
        return b
    },
    formatTableFooter: function(b) {
        var e = b.data.length - 1,
            a = b.data[e][0][0].val,
            d = b.metrics[this.responseKey.successMetric].type,
            c = this.isTargetMetric ? b.data[e][0][4].val : b.data[e][0]["1"].val;
        if(d === "percent") {
            c *= 100
        }
        b.campaignTotals = {
            percentage: a > 0 ? "100.00" : "0.00",
            count: a,
            conversions: c,
            metricFormat: d,
            conversionRate: this.isTargetMetric ? (b.data[e][0][1].val * 100).toFixed(2) : null
        };
        return b
    },
    determineWinningExperience: function(b) {
        var a = _.max(b.experiences, function(d) {
                return d.lift
            }),
            c = _.filter(b.experiences, function(d) {
                    return d.lift === a.lift
                }).length === 1;
        if(c && b.experiences.length > 1) {
            a.winner = true
        }
        return b
    },
    responseIsEmpty: function(a) {
        if(_.isEmpty(a.data)) {
            return true
        }
        return false
    },
    getUrlParamsForFetch: function(i) {
        var f = i.get("successCriteriaMetric"),
            e = ELM.A4TQueryVariables[f] || f || "targetconversion/targetentry",
            b = ELM.ReportMetrics[f] || "Success Metric",
            a = i.get("successMetricSource"),
            g = i.get("segment"),
            h = i.get("controlExperienceId"),
            j = {
                op: "filter_id",
                val: g
            },
            d = e,
            c;
        this.controlExperienceId = h;
        if(e !== "targetconversion/targetentry" && a !== "calculated") {
            d = e + "/targetentry"
        }
        c = {
            metrics: [{
                ref_id: "Entrants",
                id: "targetentry",
                filters: [0, 1],
                dates: [0]
            }, {
                ref_id: b,
                id: e,
                filters: [0, 1],
                dates: [0]
            }, {
                ref_id: "Lift",
                id: d,
                filters: [0],
                dates: [0],
                transforms: [{
                    type: "lift",
                    control_id: h
                }]
            }, {
                ref_id: "Confidence",
                id: d,
                filters: [0],
                dates: [0],
                transforms: [{
                    type: "confidence",
                    control_id: h
                }]
            }],
            filters: [{
                data_store: "dms/" + i.get("reportSuite"),
                filter_def: [{
                    "var": "experienceraw",
                    op: "select",
                    val: {
                        order: [1],
                        limit: [1, 20]
                    },
                    child: [{
                        "var": "activityraw",
                        op: "id",
                        val: i.get("targetId")
                    }]
                }]
            }, {
                data_store: "dms/" + i.get("reportSuite"),
                filter_def: [{
                    "var": "activityraw",
                    op: "id",
                    val: i.get("targetId")
                }]
            }],
            dates: [{
                start: i.get("startDate"),
                end: i.get("endDate"),
                gran: "*",
                ref_id: "report_date"
            }]
        };
        if(g !== "") {
            c.filters[0].filter_def[0].child[0].child = [j];
            c.filters[1].filter_def[0].child = [j]
        }
        if(e === "targetconversion/targetentry") {
            c.metrics.push({
                ref_id: "Conversions",
                id: "targetconversion",
                filters: [0, 1],
                dates: [0],
            })
        }
        return "activityId=" + i.id + "&tenantId=" + ELM.client + "&q=" + JSON.stringify(c)
    }
});
"use strict";
ELM.Activities.ReportSummaryOneToOneActivity = new Class({
    toString: "ReportSummaryOneToOneActivity",
    extend: ELM.Activities.ReportSummaryAB,
    View: F.View.extend({
        events: {
            "click .link-to-offer-level": "triggerSwitchToOfferLevel"
        }
    }),
    handleRenderComplete: function() {
        this.colorReportDataCells();
        this.addOfferLevelLinksToSummary()
    },
    getUrlParamsForFetch: function(a) {
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            resolution: a.get("resolution"),
            environment: a.get("environment"),
            calculationMode: a.get("calculationMode"),
            successCriteriaMetric: a.get("successCriteriaMetric"),
            segment: a.get("segment"),
            successMetric: a.get("successMetric")["jcr:title"]
        })
    },
    formatResponse: function(a) {
        a.experiences = a.algorithms;
        a = this.superClass.formatResponse.apply(this, arguments);
        a.activityType = ELM.Activities.activityTypes.ONE_TO_ONE;
        return a
    },
    addOfferLevelLinksToSummary: function() {
        var f = this,
            e = this.view.$(".reportData .marker-placeholder"),
            d = f.model.get("algorithms"),
            c = this.model.get("successMetric").type,
            b = '<a class="icon-chevronright small chevron-nav"></a>',
            a;
        if(c === "conversion" || c === "revenue") {
            e.each(function(g) {
                a = d[g];
                $(this).addClass("link-to-offer-level cursor-pointer").data("algorithm", a).prepend(b)
            })
        }
    },
    triggerSwitchToOfferLevel: function(b) {
        var a = $(b.currentTarget).data("algorithm");
        this.trigger("report:switchToOfferLevel", a)
    },
    responseIsEmpty: function(a) {
        return(a.campaignTotals.count === 0)
    }
});
"use strict";
ELM.Activities.ReportSummaryOneToOneOfferLevel = new Class({
    toString: "ReportSummaryOneToOneOfferLevel",
    extend: ELM.Activities.ReportSummaryAB,
    Model: ELM.Models.OneToOneOfferLevelSummaryReport,
    View: F.View.extend({
        events: {
            "click .link-to-offer-detail": "triggerSwitchToOfferDetail"
        }
    }),
    construct: function(a) {
        this.placeholder = a.el;
        this.model = new this.Model(a.model);
        this.createView(this.model, ELM.Activity.Templates.ReportSummaryOneToOne);
        this.load(this.model)
    },
    initBeforeReportFetch: function() {},
    initAfterReportFetchError: function(b, a) {
        this.renderErrorView(a.status);
        this.triggerOfferLevelReportReceivedEvent(a)
    },
    initAfterReportFetch: function(b, a) {
        var c = !this.responseIsEmpty(a);
        this.triggerOfferLevelReportReceivedEvent(a);
        if(c) {
            this.formatSummaryResponse(a)
        } else {
            this.updateSummaryWithError("noData")
        }
        this.renderView()
    },
    renderView: function() {
        this.view.render();
        F.on("1-1:reports:offerLevelToggleChange", this.handleOfferLevelToggleChange.bind(this))
    },
    renderErrorView: function(a) {
        this.updateSummaryWithError(a);
        this.view.render();
        F.on("1-1:reports:offerLevelToggleChange", this.handleOfferLevelToggleChange.bind(this))
    },
    handleRenderComplete: function() {
        this.colorReportDataCells();
        this.addOfferDetailLinksToSummary()
    },
    handleOfferLevelToggleChange: function(a) {
        this.model.setOfferLevelReportView(a)
    },
    getUrlParamsForFetch: function(a) {
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            resolution: a.get("resolution"),
            environment: a.get("environment"),
            calculationMode: a.get("calculationMode"),
            successCriteriaMetric: a.get("successCriteriaMetric"),
            segment: a.get("segment"),
            successMetric: a.get("successMetric")["jcr:title"]
        })
    },
    formatSummaryResponse: function(b) {
        var e = {},
            h = this.model.getSuccessMetric(),
            c, g, f = b.reportFilter.successCriteriaMetric,
            a, d = this;
        this.model.setSuccessMetricType(f);
        if(f === "conversionRate") {
            f = "conversion"
        }
        _.each(b.summary, function(i, j) {
            e[j] = {
                headers: {
                    grouping: "Reporting Group",
                    metricName: ELM.ReportMetrics[b.reportFilter.successCriteriaMetric]
                },
                rowsByOfferGroup: [],
                rowsByOffer: [],
                reportFilter: b.reportFilter
            };
            _.each(i.offerGroups, function(l, k) {
                g = l.aggregate[f];
                if((f === "conversion") || (f === "orders")) {
                    g = ((parseFloat(g, 10) * 100).toFixed(2)) + "%"
                } else {
                    if((f === "rpv") || (f === "aov") || (f === "sales")) {
                        g = d.getCurrencyObject().symbol + ((parseFloat(g, 10)).toFixed(2))
                    }
                }
                e[j].rowsByOfferGroup.push({
                    name: k,
                    visits: l.aggregate.visits,
                    successMetric: g,
                    secondarySuccessMetric: (f === "conversion") ? l.aggregate.conversionCount : undefined,
                    lift: l.aggregate.lift,
                    confidence: l.aggregate.confidence
                });
                a = {
                    offerGroupName: k,
                    offers: []
                };
                _.each(l.offers, function(n, m) {
                    c = n[f];
                    if(f === "conversion") {
                        c = ((parseFloat(c, 10) * 100).toFixed(2)) + "%"
                    } else {
                        if((f === "rpv") || (f === "aov") || (f === "sales")) {
                            c = d.getCurrencyObject().symbol + ((parseFloat(c, 10)).toFixed(2))
                        }
                    }
                    a.offers.push({
                        offerId: n.offerId,
                        offerGroup: k,
                        name: n.name,
                        visits: n.visits,
                        successMetric: c,
                        secondarySuccessMetric: (f === "conversion") ? n.conversionCount : undefined,
                        lift: n.lift,
                        confidence: n.confidence,
                        offerLocation: n.location,
                        offerThumbnail: n.thumbnail
                    })
                });
                e[j].rowsByOffer.push(a)
            })
        });
        this.model.setFormattedSummaryResponse(e)
    },
    responseIsEmpty: function(a) {
        return _.isEmpty(a.summary)
    },
    updateSummaryWithError: function(b) {
        var a = this.getErrorMessageModel(b);
        this.model.setErrorMessage(a.message, a.icon);
        this.model.unsetSummaryData()
    },
    updateTable: function() {
        this.model.updateSelectedSummaryData()
    },
    addOfferDetailLinksToSummary: function() {
        var c = this,
            b = this.view.$(".reportData").find(".offer-name-cell"),
            a = '<a class="icon-chevronright small chevron-nav"></a>';
        if(this.isOfferDetailEnabled(this.model.get("successMetric"))) {
            b.each(function(d) {
                $(this).addClass("link-to-offer-detail cursor-pointer").append(a)
            })
        }
    },
    isOfferDetailEnabled: function(a) {
        return this.getReportMetricType(a) !== ""
    },
    getReportMetricType: function(a) {
        if(a.type === "conversion") {
            return "conversionRate"
        } else {
            if(a.revenueType && (a.revenueType === "rpv" || a.revenueType === "aov")) {
                return a.revenueType
            }
        }
        return ""
    },
    triggerSwitchToOfferDetail: function(c) {
        var a = $(c.currentTarget).data("offer-id"),
            b = {
                name: $(c.currentTarget).text().trim(),
                offerId: a,
                aggregationId: [a],
                reportingGroup: $(c.currentTarget).data("offer-group"),
                metricType: this.getReportMetricType(this.model.get("successMetric")),
                decisionStackId: this.model.getCurrentAlgorithm().decisionStackId,
                offerThumbnailSrc: $(c.currentTarget).data("offer-thumbnail"),
                location: $(c.currentTarget).data("offer-location")
            };
        this.trigger("report:switchToOfferDetail", b)
    },
    triggerOfferLevelReportReceivedEvent: function(a) {
        F.trigger(ELM.evtNamespace + ":report:reportOfferLevelReportReceived", a)
    }
});
"use strict";
ELM.Activities.ReportSummaryOneToOneOfferDetail = new Class({
    toString: "OneToOneReportSummaryOneToOneOfferDetail",
    extend: F.ModelComponent,
    Model: ELM.Models.ReportModel.extend({
        url: function() {
            return "reports/activities/" + this.id + "/offerDetail.topvariables.at.json"
        }
    }),
    construct: function(a) {
        this.view = new F.View({
            component: this,
            el: a.el,
            template: ELM.Activity.Templates.ReportsOneToOneOfferDetails,
            visible: false
        });
        this.registerBinders();
        this.registerListeners()
    },
    registerBinders: function() {
        this.bind(this.renderReportsData);
        this.bind(this.filter)
    },
    filter: function(a) {
        if(this.isVisible()) {
            this.model.silentSet("startDate", a.get("startDate"));
            this.model.silentSet("endDate", a.get("endDate"));
            this.fetchOfferDetailReports()
        }
    },
    renderReportsData: function(a) {
        if(!this.isVisible()) {
            return
        }
        this.load(this.formatResponse(a.toJSON()));
        this.show({
            silent: true
        })
    },
    fetchOfferDetailReports: function(a) {
        this.model.onFetch({
            data: this.getUrlParamsForFetch(this.model),
            success: (a && a.success) || this.renderReportsData,
            error: (a && a.error) || this.renderReportsData
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete)
    },
    handleRenderComplete: function() {
        this.addReportChartsForOfferDetailsVariable()
    },
    addReportChartsForOfferDetailsVariable: function() {
        var d = this.model.get("variables"),
            c = d ? d.length : 0,
            b, a;
        for(b = 0; b < c; b++) {
            a = new this.Model(this.model.toJSON());
            a.set("index", b);
            this.addComponent(new ELM.Activities.ReportChartOneToOneOfferDetailsVariable({
                el: this.view.$("#variable-drill-down-" + b),
                model: a.toJSON(),
                index: b
            }), "reportOfferDetailsVariable" + b)
        }
    },
    getUrlParamsForFetch: function(a) {
        var b = 5;
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            metricType: a.get("metricType"),
            aggregationId: JSON.stringify(a.get("aggregationId")),
            decisionStackId: a.get("decisionStackId"),
            maxVariablesToReturn: b
        })
    },
    formatResponse: function(a) {
        var b = a;
        b.error = false;
        b.reportingGroup = this.model.get("reportingGroup");
        b.location = this.model.get("location");
        b.aggregationId = this.model.get("aggregationId");
        b.decisionStackId = this.model.get("decisionStackId");
        b.offerThumbnailSrc = this.model.get("offerThumbnailSrc") || "/apps/mac/target/components/common/images/offericon_grid.png";
        if(!b.variables) {
            b.error = true;
            b.errorIcon = "icon-alert";
            b.errorMessage = Granite.I18n.get("We are having trouble retrieving details for this offer.") + "\n" + Granite.I18n.get("Please contact Adobe client-care if problem persists.")
        } else {
            if(!b.variables.length) {
                b.error = true;
                b.errorIcon = "icon-alert";
                b.errorMessage = Granite.I18n.get("This activity needs more traffic to generate this report.")
            }
        }
        return b
    },
    showOfferDetailReports: function(a) {
        this.model = new this.Model(a.model);
        this.options.visible = true;
        this.fetchOfferDetailReports()
    }
});
"use strict";
ELM.Activities.ReportChart = new Class({
    toString: "reportChart",
    extend: ELM.Activities.FilterableReport,
    Model: ELM.Models.ActivityReportChart,
    getTemplate: function() {
        return ELM.Activities.Templates.ReportChart
    },
    initAfterReportFetch: function(b, a) {
        this.renderView(a);
        F.on(ELM.evtNamespace + ":reportSummary:winnerReceived", this.handleReceiptOfWinner.bind(this))
    },
    initAfterReportFetchError: function(b, a) {
        this.triggerReportError();
        this.renderErrorView(a.status)
    },
    renderErrorView: function(c) {
        var b = this.getErrorMessageModel(c),
            a = ELM.Activities.Templates.ReportErrorMessage;
        this.errorType = c;
        this.createView(b, a);
        this.view.render()
    },
    renderView: function(a) {
        var c = this.getErrorMessageModel("noData"),
            b = ELM.Activities.Templates.ReportErrorMessage,
            d = !this.responseIsEmpty(a);
        this.errorType = undefined;
        if(d) {
            b = this.getTemplate();
            if(this.model.isBestWorstFilterEnabled()) {
                a = this.initSorting(a)
            }
            c = this.formatResponse(a)
        } else {
            this.triggerReportError()
        }
        this.createView(c, b);
        this.view.render();
        if(d) {
            if(!a.dataAdapter) {
                this.model.setYAxisFormat(a.reportFilter)
            }
            this.drawGraph(c)
        }
    },
    changeBestWorstFilter: function(a) {
        this.setBestWorstFilter(a)
    },
    setBestWorstFilter: function(a) {
        var b;
        this.filterSetting = a;
        this.view.model.filterSetting = a;
        switch(this.view.model.filterSetting) {
            case "all":
                b = this.model.getGraphData();
                break;
            case "worst":
                b = this.model.getWorstGraphData();
                break;
            case "best":
            default:
                b = this.model.getBestGraphData();
                break
        }
        if(b) {
            this.cvGraph.setOption("data", b);
            this.renderGraph()
        }
    },
    sliceGraphData: function(c, a) {
        var b = _.clone(this.model.getGraphData());
        b.x = b.x.slice(c, a);
        b.y = b.y.slice(c, a);
        b.y = b.y.slice(c, a);
        b.series = b.series.slice(c, a);
        return b
    },
    getDataPointFormat: function(a) {
        if((a.calculationMode === "cumulativeDifference") || (a.calculationMode === "dailyDifference")) {
            return "percent"
        }
        return {
            conversionRate: "percent",
            orders: "percent",
            aov: "currency",
            rpv: "currency",
            sales: "currency"
        }[a.successCriteriaMetric]
    },
    drawGraph: function(a) {
        var c = document.getElementById(ELM.evtNamespace + "-chart"),
            d = a.filter && a.filter[0].data_store,
            b = {
                data: this.model.getGraphData(),
                parent: c,
                width: "99%",
                height: 380,
                autoResize: true,
                interactive: true,
                legendOrientation: "left",
                legendVerticalWidth: 220,
                precision: 2,
                locale: Granite.I18n.getLocale(),
                l10n: this.getLocalizationObject()
            };
        this.cvGraph = cloudViz.line(b);
        if(d) {
            this.cvGraph.setOption("dataAdapter", "rs2dv")
        } else {
            this.cvGraph.setOption("formats", {
                y: this.model.getYAxisFormat()
            })
        }
        if(this.model.isBestWorstFilterEnabled()) {
            this.setBestWorstFilter(this.filterSetting)
        } else {
            this.cvGraph.setOption("data", this.model.getGraphData())
        }
        this.renderGraph();
        F.on("details:toggleRightRail", function() {
            this.renderGraph()
        })
    },
    renderGraph: function() {
        if(this.cvGraph) {
            this.cvGraph.render(true)
        }
        this.postProcessRenderedGraph()
    },
    postProcessRenderedGraph: function() {
        this.updateLegendTitles();
        this.markExperienceAsWinner();
        if(this.model.getHasTooManyExperiences() && this.filterSetting === "all") {
            this.showGraphOverlay()
        } else {
            this.hideGraphOverlay()
        }
    },
    filterExcludedExperiences: function(a) {
        a = _.filter(a, function(b) {
            return b.name.indexOf("(excluded)") === -1
        });
        return a
    },
    showGraphOverlay: function() {
        this.view.$(".chart-overlay").removeClass("hidden")
    },
    hideGraphOverlay: function() {
        this.view.$(".chart-overlay").addClass("hidden")
    },
    updateLegendTitles: function() {
        var a = this.controlExpName;
        this.view.$(".cv-legend-title").each(function() {
            var b = $(this),
                d = b.text(),
                c = d.indexOf("(deleted)") !== -1 || d.indexOf("(excluded)") !== -1;
            if(d === a) {
                b.append(" [Control]")
            }
            b.toggleClass("grayed-out", c)
        })
    },
    handleReceiptOfWinner: function(a) {
        this.indexOfWinner = a;
        if(this.view.$(".cv-legend")) {
            this.markExperienceAsWinner()
        }
    },
    markExperienceAsWinner: function() {
        if(_.isNumber(this.indexOfWinner)) {
            this.view.$(".cv-legend").find(".cv-legend-entry").eq(this.indexOfWinner).append('<i class="icon-ribbon small"></i>')
        }
    }
});
"use strict";
ELM.Activities.ReportChartAB = new Class({
    toString: "ReportChartAB",
    extend: ELM.Activities.ReportChart,
    MAX_EXPERIENCES: 16,
    formatResponse: function(a) {
        this.controlExpName = a.reportFilter.controlExperience;
        this.model.setHasTooManyExperiences(false);
        if(this.model.isBestWorstFilterEnabled()) {
            if(a.allExperiences.length > this.MAX_EXPERIENCES) {
                a.allExperiences = a.allExperiences.slice(0, 6);
                this.model.setHasTooManyExperiences(true)
            }
            a.experiences = a.bestExperiences;
            this.model.setBestGraphData(this.formatResponseToDV(a));
            a.experiences = a.worstExperiences;
            this.model.setWorstGraphData(this.formatResponseToDV(a));
            a.experiences = a.allExperiences
        }
        this.model.setGraphData(this.formatResponseToDV(a));
        return a
    },
    formatResponseToDV: function(b) {
        var a = [],
            d = [],
            c = [];
        _.each(b.experiences, function(e) {
            _.each(e.counts, function(g, f) {
                c.push(e.name);
                if(b.dateIndex[f] === undefined) {
                    throw "ELM.Models.ActivityReportChart: undefined date"
                } else {
                    a.push(new Date(b.dateIndex[f]))
                }
                d.push(parseFloat(e.counts[f], 10))
            })
        });
        return {
            x: a,
            y: d,
            series: c,
            title: [b.graphLabels.graphTitle]
        }
    }
});
"use strict";
ELM.Activities.ReportChartA4T = new Class({
    toString: "ReportChartA4T",
    extend: ELM.Activities.ReportChart,
    formatResponse: function(a) {
        a = this.addMetricDisplayNameToResponse(a);
        a = this.setMetricDisplayFormat(a);
        a = this.addExperienceNamesAndControlLabelToResponse(a);
        a = this.formatResponseToDV(a);
        this.model.setGraphData(a);
        return a
    },
    addMetricDisplayNameToResponse: function(a) {
        var b = a.metrics[0];
        if(b.id === ELM.A4TQueryVariables.conversionRate) {
            a.metrics[0].name = ELM.ReportMetrics.conversionRate
        }
        _.each(b.transforms, function(d, c) {
            if(d.type) {
                a.metrics[0].name = "Lift"
            }
        });
        return a
    },
    setMetricDisplayFormat: function(a, b) {
        if((a.metrics[0].id === "targetconversion/targetentry") || (a.metrics[0].name === "Lift")) {
            a.metrics[0].type = "percent"
        }
        return a
    },
    addExperienceNamesAndControlLabelToResponse: function(a) {
        var c = a.filters,
            b = this;
        _.each(c, function(e, d, f) {
            if(e.info.id === b.controlExperienceId) {
                e.info.name += " [" + Granite.I18n.get("Control") + "]"
            }
        });
        return a
    },
    formatResponseToDV: function(a) {
        a.dataAdapter = "rs2dv";
        a = a && rs2dv(a, {
            displayCount: -1
        }) || {};
        return a
    },
    markExperienceAsWinner: function() {},
    responseIsEmpty: function(a) {
        return _.isEmpty(a.data)
    },
    getUrlParamsForFetch: function(i) {
        var e = i.get("successCriteriaMetric"),
            d = ELM.A4TQueryVariables[e] || e || "targetconversion/targetentry",
            b = i.get("metricType"),
            a = i.get("successMetricSource"),
            j = i.get("calculationMode"),
            f = i.get("segment"),
            g = i.get("controlExperienceId"),
            c, h = [];
        this.controlExperienceId = g;
        if((j === "cumulative") || (j === "cumulativeDifference")) {
            h.push("aggregate")
        }
        if((j === "cumulativeDifference") || (j === "dailyDifference")) {
            h.push({
                type: "lift",
                control_id: g
            });
            if(!ELM.A4TQueryVariables[e] && a !== "calculated") {
                d += "/targetentry"
            }
        }
        c = {
            metrics: [{
                id: d,
                filters: [0],
                dates: [0]
            }],
            filters: [{
                data_store: "dms/" + i.get("reportSuite"),
                filter_def: [{
                    "var": "experienceraw",
                    op: "select",
                    val: {
                        order: [0],
                        limit: [1, 20]
                    },
                    child: [{
                        "var": "activityraw",
                        op: "id",
                        val: i.get("targetId")
                    }]
                }]
            }],
            dates: [{
                start: i.get("startDate"),
                end: i.get("endDate"),
                gran: i.get("resolution")
            }]
        };
        if(f !== "") {
            c.filters[0].filter_def[0].child[0].child = [{
                op: "filter_id",
                val: f
            }]
        }
        if(h.length) {
            c.metrics[0].transforms = h
        }
        return "activityId=" + i.id + "&tenantId=" + ELM.client + "&q=" + escape(JSON.stringify(c))
    }
});
"use strict";
ELM.Activities.ReportChartOneToOneActivity = new Class({
    toString: "ReportChartOneToOneActivity",
    extend: ELM.Activities.ReportChartAB,
    getUrlParamsForFetch: function(a) {
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            resolution: a.get("resolution"),
            environment: a.get("environment"),
            calculationMode: a.get("calculationMode"),
            successCriteriaMetric: a.get("successCriteriaMetric"),
            segment: a.get("segment"),
            successMetric: a.get("successMetric")["jcr:title"]
        })
    },
    responseIsEmpty: function(a) {
        return _.isEmpty(a.experiences)
    }
});
"use strict";
ELM.Activities.ReportChartOneToOneOfferLevel = new Class({
    toString: "ReportChartOneToOneOfferLevel",
    extend: ELM.Activities.ReportChartAB,
    Model: ELM.Models.OneToOneOfferLevelSummaryReport,
    construct: function(a) {
        this.placeholder = a.el;
        this.model = new this.Model(a.model);
        this.createView(this.model, this.getTemplate());
        this.load(this.model)
    },
    getTemplate: function() {
        return Handlebars.compile(['<div class="reportChartContainer">', '<div id="ChartOfferLevel" class="reportChart"></div>', "</div>"].join(""))
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete);
        F.on("1-1:report:reportOfferLevelReportReceived", this.initAfterReportFetch.bind(this));
        F.on("1-1:reports:offerLevelToggleChange", this.handleOfferLevelToggleChange.bind(this))
    },
    handleRenderComplete: function() {
        this.initGraph()
    },
    handleOfferLevelToggleChange: function(a) {
        this.model.setOfferLevelReportView(a);
        this.model.updateSelectedGraphData();
        this.renderGraph()
    },
    initGraph: function() {
        this.cvGraph = cloudViz.line({
            parent: document.getElementById("ChartOfferLevel"),
            height: 380,
            interactive: true,
            legendOrientation: "left",
            legendVerticalWidth: 220,
            precision: 2,
            locale: Granite.I18n.getLocale(),
            l10n: this.getLocalizationObject()
        });
        this.renderGraph()
    },
    renderGraph: function() {
        var a = this.model.getGraphData();
        if(a) {
            this.cvGraph.setOption("formats", {
                y: this.model.getYAxisFormat()
            });
            this.cvGraph.setOption("data", a);
            this.cvGraph.render(true)
        }
    },
    initBeforeReportFetch: function() {},
    initAfterReportFetchError: function(b, a) {
        this.model.unsetGraphData()
    },
    initAfterReportFetch: function(a) {
        var b = !this.responseIsEmpty(a);
        if(b) {
            this.model.setYAxisFormat(a.reportFilter);
            this.formatResponseToDV(a)
        } else {
            this.model.unsetGraphData()
        }
    },
    formatResponseToDV: function(c) {
        var f = c.dateIndex.length,
            a = {},
            e = this,
            d = ELM.ReportMetrics[c.reportFilter.successCriteriaMetric],
            g = c.reportFilter.successCriteriaMetric,
            b = function() {
                this.x = [];
                this.y = [];
                this.series = []
            };
        if(g === "conversionRate") {
            g = "conversion"
        }
        _.each(c.reportPeriods, function(h, i) {
            a[i] = {
                byOfferGroup: new b(),
                byOffer: new b()
            };
            _.each(c.reportPeriods[i].offerGroups, function(j, k) {
                this.addToDVObject(a[i].byOfferGroup, c.dateIndex, j.aggregate[g], k);
                _.each(j.offers, function(m, l) {
                    this.addToDVObject(a[i].byOffer, c.dateIndex, m[g], m.name)
                }, this)
            }, this)
        }, this);
        this.model.setFormattedGraphResponse(a)
    },
    addToDVObject: function(d, b, c, a) {
        _.each(b, function(e, f) {
            d.x.push(new Date(b[f]));
            d.y.push(c[f]);
            d.series.push(a)
        })
    },
    fetchReport: function(a) {},
    responseIsEmpty: function(a) {
        return _.isEmpty(a.reportPeriods)
    },
    getUrlParamsForFetch: function() {},
    filter: function(a) {}
});
"use strict";
ELM.Activities.ReportChartOneToOneOfferDetailsVariable = new Class({
    toString: "ReportChartOneToOneOfferDetailsVariable",
    extend: ELM.Activities.ReportChartAB,
    Model: ELM.Models.ReportModel.extend({
        url: function() {
            return "reports/activities/" + this.id + "/offerDetail.topvalues.at.json"
        }
    }),
    View: F.View.extend({
        events: {
            "click .toggle-window-type": "toggleWindowTypeForVariableValues"
        }
    }),
    renderView: function(a) {
        var d, b = ELM.Activity.Templates.ReportChartOneToOneOfferDetailsVariable,
            c = this.responseIsEmpty(a);
        d = this.formatResponse(a, this.model);
        if(c) {
            d.error = true;
            d.errorIcon = "icon-alert";
            d.errorMessage = Granite.I18n.get("We are having trouble retrieving details for this variable.") + "\n" + Granite.I18n.get("Please contact Adobe client-care if problem persists.")
        }
        this.graphModel = d;
        this.createView(d, b);
        this.view.render()
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.handleRenderComplete)
    },
    handleRenderComplete: function() {
        var a = "#variable-drill-down-" + this.model.get("index") + " .diverging-graph";
        if($(a)) {
            this.drawGraph(a)
        }
    },
    getUrlParamsForFetch: function(a) {
        return $.param({
            startDate: a.get("startDate"),
            endDate: a.get("endDate"),
            metricType: a.get("metricType"),
            aggregationId: JSON.stringify(a.get("aggregationId")),
            variableId: a.get("variables")[a.get("index")].variableId,
            decisionStackId: a.get("decisionStackId"),
            windowType: a.get("windowType") || "topBottom"
        })
    },
    formatResponse: function(b, e) {
        var f = {
                values: [],
                revenue: [],
                moreValues: null
            },
            a = b.values,
            g = a ? a.length : 0,
            d, c = e.get("variables")[e.get("index")];
        for(d = 0; d < g; d++) {
            f.values.push(a[d].value);
            f.revenue.push(a[d].calculated.revenueIncreaseOrDecrease)
        }
        f.moreValues = b.totalValueCount - g;
        if(f.moreValues > 0) {
            f.values.push("{MORE}");
            f.revenue.push(0)
        }
        if(b.windowType === "all") {
            f.values.push("{FEWER}");
            f.revenue.push(0)
        }
        f.index = e.get("index");
        f.variableId = c.variableId;
        f.variableName = c.variableName;
        return f
    },
    initAfterReportFetch: function(b, a) {
        this.renderView(a)
    },
    initAfterReportFetchError: function(b, a) {
        a.error = true;
        this.renderView(a)
    },
    initBeforeReportFetch: function() {},
    toggleWindowTypeForVariableValues: function(a) {
        this.model.set("windowType", $(a.target).data("windowtype"));
        this.model.onFetch({
            data: this.getUrlParamsForFetch(this.model),
            success: this.renderChartOnToggleForWindowType.bind(this),
            error: function(b) {
                F.trigger(ELM.evtNamespace + ":report:error", b)
            }
        })
    },
    drawGraph: function(b) {
        var f = {
                values: this.graphModel.values,
                revenue: this.graphModel.revenue
            },
            e = function(j, h) {
                return d.getFormattedTickValue(j, d.graphModel)
            },
            c = function(j, h) {
                return d.addLocalizationToRevenue(j)
            },
            g = 28 * f.values.length + 70,
            a = 487,
            d = this;
        dv.chart().layers([dv.geom.bar()]).coord(dv.coord.cartesian().flip(true)).data(f).width(a).height(g).map("x", "values", dv.scale.ordinal().padding(0.65).reverse(true)).map("y", "revenue", dv.scale.linear()).map("fill", "revenue", dv.scale.gradient().controlPoints(["0%", 0, "100%"]).colors(["#FA5A50", "#E1E1E1", "#5FAF69"])).guide("x", dv.guide.axis().tickSize(0).tickFormat(e).htmlLabels(true)).guide("y", dv.guide.axis().tickFormat(c).orientation("left")).padding({
            left: 20,
            top: 20,
            right: 20,
            bottom: 20
        }).parent(b).render();
        this.view.$(".toggle-window-type").parent().css("pointer-events", "auto")
    },
    getFormattedTickValue: function(b, a) {
        var d = Granite.I18n.get(a.moreValues + " More") + " ...",
            c = Granite.I18n.get("Show Fewer");
        if(!b) {
            b = Granite.I18n.get("not available")
        }
        if(b === "{MORE}") {
            return '<b class="toggle-window-type cursor-pointer" data-windowtype="all">' + d + "</b>"
        }
        if(b === "{FEWER}") {
            return '<b class="toggle-window-type cursor-pointer" data-windowtype="topBottom">' + c + "</b>"
        }
        return b
    },
    addLocalizationToRevenue: function(c) {
        var a = this.getCurrencyObject(),
            c = parseFloat(c),
            b;
        b = (c < 0) ? a.negativePattern : a.positivePattern;
        b = b.replace("{symbol}", a.symbol);
        b = b.replace("{number}", this.getFormattedNumber(Math.abs(c)));
        return b
    },
    renderChartOnToggleForWindowType: function(b, a) {
        this.graphModel = this.formatResponse(a, this.model);
        this.drawGraph("#variable-drill-down-" + this.model.get("index") + " .diverging-graph")
    },
    getFormattedNumber: function(a) {
        return Handlebars.helpers.formatRevenue.call(null, a)
    },
    responseIsEmpty: function(a) {
        return !(a && a.values && a.values.length) || a.error
    }
});
"use strict";
ELM.Activities.Reports = new Class({
    toString: "activityReport",
    extend: F.Component,
    options: {
        visible: true
    },
    View: F.View.extend({
        className: "reports"
    }),
    NUMBER_OF_REPORTS_ON_PAGE: 2,
    getTemplate: function() {
        return ELM.Activity.Templates.Reports
    },
    construct: function(a) {
        if(!a.model) {
            throw "ELM.Activities.Reports: No model."
        }
        this.model = a.model;
        this.formatReportDates();
        this.createView(a.el);
        this.listenTo(this.view, "renderComplete", function() {
            this.addReportSubComponents()
        });
        this.registerBinders()
    },
    registerBinders: function() {
        this.bind(this.handleReportError);
        this.bind(this.handleDateChange);
        this.bind(this.handleBestWorstFilterChange);
        this.bind(this.handleMetricChange);
        this.bind(this.handleAudienceChange);
        this.bind(this.filter);
        this.bind(this.insertReportTitle)
    },
    createView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: this.getTemplate()
        })
    },
    addReportSubComponents: function() {
        this.addReportSettings();
        this.addReportMetricFilter();
        this.addReportAudienceFilter();
        this.addReportDateSettings();
        this.addReports()
    },
    addReports: function() {
        this.model.isBestWorstFilterEnabled = this.isBestWorstFilterEnabled();
        if(this.model.isBestWorstFilterEnabled) {
            this.addReportBestWorstFilter()
        }
        this.addReportChart();
        this.addReportSummary()
    },
    addReportDateSettings: function() {
        this.addComponent(new ELM.Activities.ReportDateSettings({
            el: this.view.$(".report-date-settings-placeholder"),
            model: {
                activityType: this.model.activityType,
                startDate: this.model.startDate,
                endDate: this.model.endDate
            }
        }), "reportDateSettings").on("reportDateSettings:change", this.handleDateChange)
    },
    addReportBestWorstFilter: function() {
        this.addComponent(new ELM.Activities.ReportBestWorstFilter({
            el: this.view.$(".report-best-worst-filter-placeholder"),
            model: {
                filterSetting: this.model.bestWorstFilterSetting
            }
        }), "reportBestWorstFilter").on("reportBestWorstFilter:change", this.handleBestWorstFilterChange)
    },
    addReportMetricFilter: function() {
        var a = this.getMetricFilterParams();
        this.addComponent(new ELM.Activities.ReportFilterSettings({
            el: this.view.$(".report-metric-filter-placeholder"),
            visible: true,
            filterId: "Metric",
            parenthesize: true,
            filterName: Granite.I18n.get("Metric"),
            defaultItems: a.defaultItems,
            selectedItem: a.selectedItem,
            placeholderText: Granite.I18n.get("Change metric"),
            url: a.url,
            sort: a.sort
        }), "reportMetricFilter").on("reportFilter:MetricChange", this.handleMetricChange)
    },
    addReportAudienceFilter: function() {
        var a = this.getAudienceFilterParams(),
            b = Granite.I18n.get("Audience");
        this.addComponent(new ELM.Activities.ReportFilterSettings({
            el: this.view.$(".report-audience-filter-placeholder"),
            visible: true,
            filterId: "Audience",
            filterName: b,
            filterLabel: b,
            defaultItems: a.defaultItems,
            selectedItem: a.selectedItem,
            reportSuite: a.reportSuite,
            groupBy: a.groupBy,
            url: a.url,
            sort: a.url
        }), "reportAudienceFilter").on("reportFilter:AudienceChange", this.handleAudienceChange)
    },
    addReportSettings: function() {
        this.model.reportName = this.toString() + ELM.evtNamespace;
        this.addComponent(new ELM.Activities.ReportSettings({
            model: this.model,
            el: this.view.$(".report-settings-placeholder")
        }), "reportSettings").on("change", this.filter).on("reportTitle:change", this.insertReportTitle);
        this.components.reportSettings.updateReportTitle()
    },
    handleReportError: function() {
        this.view.$(".retrieving").toggleClass("retrieving retrieving-done");
        this.reportsWithErrors = this.reportsWithErrors ? ++this.reportsWithErrors : 1;
        if(this.reportsWithErrors >= this.NUMBER_OF_REPORTS_ON_PAGE) {
            this.hideDuplicateReportError()
        }
    },
    formatReportDates: function() {
        this.model.startDate = this.getFormattedDate(this.model.startDate);
        this.model.endDate = this.getFormattedDate(this.model.endDate)
    },
    isBestWorstFilterEnabled: function() {
        return(this.model.experiences.length > 6 && this.model.activityType === ELM.Activities.activityTypes.MVT && !this.model.reportSuite)
    },
    getFormattedDate: function(a) {
        if(a) {
            return moment(a).format("YYYY-MM-DD")
        }
        return moment().format("YYYY-MM-DD")
    },
    getMetricFilterParams: function() {
        throw this.toString() + ": getMetricFilterParams not implemented"
    },
    hideDuplicateReportError: function() {
        this.components.reportSummary.hide({
            silent: true
        })
    },
    unhideDuplicateReportError: function() {
        if(!this.components.reportSummary.isVisible()) {
            this.components.reportSummary.show({
                silent: true
            })
        }
    },
    handleDateChange: function(a) {
        this.components.reportSettings.validateAndSaveDateSettings(a)
    },
    handleBestWorstFilterChange: function(a) {
        this.components.reportSettings.setBestWorstFilter(a);
        this.components.reportChart.changeBestWorstFilter(a);
        this.components.reportSummary.changeBestWorstFilter(a)
    },
    handleMetricChange: function(b, c, a) {
        this.components.reportSettings.updateMetricFromFilter(b, c, a)
    },
    handleAudienceChange: function(a) {
        this.components.reportSettings.updateAudienceFromFilter(a)
    },
    insertReportTitle: function(a, b) {
        this.view.$(".report-title-placeholder").text(a);
        this.view.$(".extreme-orders-placeholder").text(b)
    },
    updateDateSettings: function(a) {
        this.components.reportSettings.validateAndSaveDateSettings(a);
        this.components.reportDateSettings.updateDatePickers(a)
    },
    filter: function(a) {
        this.reportsWithErrors = 0;
        this.unhideDuplicateReportError();
        this.components.reportChart.filter(a);
        this.components.reportSummary.filter(a)
    }
});
"use strict";
ELM.Activities.ReportsAB = new Class({
    toString: "activityABReport",
    extend: ELM.Activities.Reports,
    getMetricFilterParams: function() {
        var a = this.getMetricsForFilter();
        return {
            defaultItems: a,
            selectedItem: a[0].id
        }
    },
    getAudienceFilterParams: function() {
        return {
            defaultItems: this.getAudiencesForFilter(),
            selectedItem: ""
        }
    },
    addReportChart: function() {
        this.addComponent(new ELM.Activities.ReportChartAB({
            el: this.view.$(".report-chart-placeholder"),
            model: this.model,
            visible: true
        }), "reportChart").on("report:error", this.handleReportError)
    },
    addReportSummary: function() {
        this.addComponent(new ELM.Activities.ReportSummaryAB({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "reportSummary").on("report:error", this.handleReportError)
    },
    getMetricsForFilter: function() {
        return _.map(this.getReportingMetrics(), function(a) {
            return {
                id: a["jcr:title"],
                name: a["jcr:title"],
                folder: "all",
                type: a.type
            }
        })
    },
    getReportingMetrics: function() {
        return this.model.metrics
    },
    getAudiencesForFilter: function() {
        var a, b = {
            id: "",
            name: Granite.I18n.get("All Qualified Visitors (default)")
        };
        a = _.map(this.model.reportingAudiences, function(c) {
            return {
                id: c["jcr:title"],
                name: c["jcr:title"]
            }
        });
        a.unshift(b);
        return a
    }
});
"use strict";
ELM.Activities.ReportsA4T = new Class({
    toString: "activityA4TReport",
    extend: ELM.Activities.Reports,
    getMetricFilterParams: function() {
        var c = this.model.successMetric,
            b = (c.type === "analytics") ? c.analyticsMetricId : c["jcr:title"],
            a = (c.type === "analytics") ? c.analyticsMetricSource : undefined;
        return {
            defaultItems: [{
                id: b,
                source: a,
                name: c["jcr:title"],
                folder: "all"
            }],
            selectedItem: b,
            url: this.getAnalyticsMetricURL(),
            sort: true
        }
    },
    getAudienceFilterParams: function() {
        return {
            defaultItems: [{
                id: "",
                name: "All Qualified Visitors",
                folder: "all"
            }],
            selectedItem: "",
            reportSuite: this.model.reportSuite,
            groupBy: "folder",
            url: this.getAnalyticsAudienceURL(),
            sort: true
        }
    },
    addReportChart: function() {
        if(this.model.successMetric.type === "analytics") {
            this.model.successCriteriaMetric = this.model.successMetric.analyticsMetricId;
            this.model.successMetricSource = this.model.successMetric.analyticsMetricSource
        }
        this.addComponent(new ELM.Activities.ReportChartA4T({
            el: this.view.$(".report-chart-placeholder"),
            model: this.model,
            visible: true
        }), "reportChart").on("report:error", this.handleReportError)
    },
    addReportSummary: function() {
        if(this.model.successMetric.type === "analytics") {
            this.model.successCriteriaMetric = this.model.successMetric.analyticsMetricId;
            this.model.successMetricSource = this.model.successMetric.analyticsMetricSource
        }
        this.addComponent(new ELM.Activities.ReportSummaryA4T({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "reportSummary").on("report:error", this.handleReportError)
    },
    getAnalyticsAudienceURL: function() {
        return "/apps/mac/target/sc/rs.at.json?path=dms/" + this.model.reportSuite + "/filters&depth=1"
    },
    getAnalyticsMetricURL: function() {
        return "/apps/mac/target/sc/rs.at.json?activityId=" + this.model.id + "&tenantId=" + ELM.client + "&path=dms/" + this.model.reportSuite + "/metrics&depth=1"
    }
});
"use strict";
ELM.Activities.ReportsOneToOne = new Class({
    toString: "activity1tot1Report",
    extend: ELM.Activities.ReportsAB,
    View: F.View.extend({
        className: "reports",
        events: {
            "click .back-to-activity-level": "switchToActivityLevel",
            "click .back-to-offer-level": "switchToOfferLevel"
        }
    }),
    getTemplate: function() {
        return ELM.Activity.Templates.ReportsOneToOne
    },
    registerBinders: function() {
        this.inherited(arguments);
        this.bind(this.switchToOfferLevel);
        this.bind(this.switchToOfferDetail)
    },
    addReportSubComponents: function() {
        this.addReportSettings();
        this.addReportMetricFilter();
        this.addReportAudienceFilter();
        this.addReportDateSettings();
        this.addReportOfferLevelToggle();
        this.addReportChart();
        this.addReportSummary();
        this.addReportChartOfferLevel();
        this.addReportSummaryOfferLevel();
        this.addReportOfferDetail();
        this.reportAudienceFilterWithLabel = $(this.reportAudienceFilter.view.el).parent();
        this.reportMetricFilterWithLabel = $(this.reportMetricFilter.view.el).parent()
    },
    addReportSettings: function() {
        this.addComponent(new ELM.Activities.ReportSettingsOneToOne({
            model: this.model,
            el: this.view.$(".report-settings-placeholder")
        }), "reportSettings").on("change", this.filter)
    },
    addReportOfferLevelToggle: function() {
        this.addComponent(new ELM.Activities.ReportOfferLevelToggle({
            el: this.view.$(".report-offer-level-toggle-placeholder")
        }), "reportOfferLevelToggle")
    },
    addReportChart: function() {
        this.addComponent(new ELM.Activities.ReportChartOneToOneActivity({
            el: this.view.$(".report-chart-placeholder"),
            model: this.model,
            visible: true
        }), "reportChart").on("report:error", this.handleReportError)
    },
    addReportSummary: function() {
        this.addComponent(new ELM.Activities.ReportSummaryOneToOneActivity({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "reportSummary").on("report:error", this.handleReportError).on("report:switchToOfferLevel", this.switchToOfferLevel)
    },
    addReportChartOfferLevel: function() {
        this.addComponent(new ELM.Activities.ReportChartOneToOneOfferLevel({
            el: this.view.$(".report-chart-offer-level-placeholder"),
            model: this.model,
            visible: true
        }), "reportChartOfferLevel").on("report:error", this.handleReportError)
    },
    addReportSummaryOfferLevel: function() {
        this.addComponent(new ELM.Activities.ReportSummaryOneToOneOfferLevel({
            el: this.view.$(".report-summary-offer-level-placeholder"),
            model: this.model
        }), "reportSummaryOfferLevel").on("report:error", this.handleReportError).on("report:switchToOfferDetail", this.switchToOfferDetail)
    },
    addReportOfferDetail: function() {
        this.addComponent(new ELM.Activities.ReportSummaryOneToOneOfferDetail({
            el: this.view.$(".report-offer-detail-placeholder"),
            model: this.model
        }), "reportOfferDetail")
    },
    switchToActivityLevel: function() {
        this.switchReportLevel("activity");
        this.showAllSettings();
        this.showActivityLevel()
    },
    switchToOfferLevel: function(a) {
        var d = 86400000,
            b, c = 100;
        if(a.decisionStackId) {
            this.components.reportSettings.reportSettingsModel.setCurrentAlgorithm(a);
            this.components.reportChartOfferLevel.model.setCurrentAlgorithm(a);
            this.components.reportSummaryOfferLevel.model.setCurrentAlgorithm(a);
            this.components.reportSummaryOfferLevel.model.updateSelectedSummaryData();
            this.components.reportChartOfferLevel.model.updateSelectedGraphData()
        }
        this.switchReportLevel("offerLevel");
        this.showAllSettings();
        this.hideAudienceFilter();
        this.hideEngagementMetric();
        this.showOfferLevel();
        this.components.reportChartOfferLevel.renderGraph();
        b = (moment(this.model.endDate) - moment(this.model.startDate)) / d;
        if(b > c) {
            ELM.Util.showErrorNotification({
                message: Granite.I18n.get("Start dates over 100 days old are not currently supported for offer level reports. Please choose a more recent start date.")
            })
        }
    },
    switchToOfferDetail: function(a) {
        var b = _.extend(this.model, {
            reportingGroup: a.reportingGroup,
            location: a.location,
            metricType: a.metricType,
            offerThumbnailSrc: a.offerThumbnailSrc,
            decisionStackId: a.decisionStackId,
            aggregationId: a.aggregationId
        });
        this.components.reportSettings.reportSettingsModel.setCurrentOffer(a);
        this.switchReportLevel("offerDetail");
        this.reportOfferDetail.showOfferDetailReports({
            model: b
        })
    },
    switchReportLevel: function(a) {
        this.components.reportSettings.reportSettingsModel.setReportLevel(a);
        this.components.reportSettings.updateReportTitle();
        this.hideAllSettings();
        this.hideActivityLevel();
        this.hideOfferLevel();
        this.hideOfferDetail()
    },
    hideAllSettings: function() {
        this.reportAudienceFilterWithLabel.hide();
        this.reportMetricFilterWithLabel.hide();
        this.components.reportSettings.hide()
    },
    showAllSettings: function() {
        this.reportAudienceFilterWithLabel.show();
        this.reportMetricFilterWithLabel.show();
        this.showEngagementMetric();
        this.components.reportSettings.show({
            silent: true
        })
    },
    hideActivityLevel: function() {
        this.components.reportChart.hide();
        this.components.reportSummary.hide()
    },
    showActivityLevel: function() {
        var a = this.components.reportChart,
            b;
        if(a.model.get("experiences")) {
            b = a.formatResponse(a.model.toJSON());
            a.show({
                silent: true
            });
            a.drawGraph(b)
        } else {
            a.renderErrorView(a.errorType)
        }
        this.components.reportSummary.show({
            silent: true
        })
    },
    hideOfferLevel: function() {
        this.components.reportChartOfferLevel.hide();
        this.components.reportSummaryOfferLevel.hide();
        this.components.reportOfferLevelToggle.hide()
    },
    showOfferLevel: function() {
        this.components.reportOfferLevelToggle.show({
            silent: true
        });
        this.components.reportChartOfferLevel.show({
            silent: true
        });
        this.components.reportSummaryOfferLevel.show({
            silent: true
        })
    },
    hideOfferDetail: function() {
        this.reportOfferDetail.hide()
    },
    hideEngagementMetric: function() {
        this.components.reportMetricFilter.trigger("1-1-reports:offer-level-shown")
    },
    showEngagementMetric: function() {
        this.components.reportMetricFilter.trigger("1-1-reports:activity-level-shown")
    },
    hideAudienceFilter: function() {
        this.reportAudienceFilterWithLabel.hide()
    },
    filter: function(a) {
        this.reportsWithErrors = 0;
        this.unhideDuplicateReportError();
        this.model = _.extend(this.model, a.toJSON());
        this.components.reportChart.filter(a);
        this.components.reportSummary.filter(a);
        this.components.reportSummaryOfferLevel.filter(a);
        this.components.reportOfferDetail.filter(a)
    },
    unhideDuplicateReportError: function() {
        var a = this.components.reportSettings.reportSettingsModel.getReportLevel() === "activity";
        if(a && !this.components.reportSummary.isVisible()) {
            this.components.reportSummary.show({
                silent: true
            })
        }
    }
});
ELM.Activities.ReportsMVT = new Class({
    toString: "activityMVTReport",
    extend: ELM.Activities.ReportsAB,
    addReportDateSettings: function() {
        this.inherited(arguments);
        this.bubble("reportDateSettings", "reportDateSettings:change")
    }
});
"use strict";
ELM.Activities.ReportsMVTElementContribution = new Class({
    toString: "locationContributionReport",
    extend: ELM.Activities.ReportsMVT,
    reports: [],
    getTemplate: function() {
        return ELM.Activities.Templates.ReportsMVTElementContribution
    },
    addReportSubComponents: function() {
        this.addReportSettings();
        if(!this.model.reportSuite) {
            this.addReportMetricFilter();
            this.addReportAudienceFilter()
        }
        this.addReportDateSettings();
        this.addReports()
    },
    addReportMetricFilter: function() {
        var a = this.getMetricFilterParams(),
            b = Granite.I18n.get("Metric");
        this.addComponent(new ELM.Activities.ReportFilterSettings({
            el: this.view.$(".report-metric-filter-placeholder"),
            visible: true,
            filterId: "ECMetric",
            filterName: b,
            filterLabel: b,
            defaultItems: a.defaultItems,
            selectedItem: a.selectedItem,
            url: a.url,
            sort: a.sort
        }), "reportECMetricFilter").on("reportFilter:ECMetricChange", this.handleMetricChange)
    },
    addReportAudienceFilter: function() {
        var a = this.getAudienceFilterParams(),
            b = Granite.I18n.get("Audience");
        this.addComponent(new ELM.Activities.ReportFilterSettings({
            el: this.view.$(".report-audience-filter-placeholder"),
            visible: true,
            filterId: "ECAudience",
            filterName: b,
            filterLabel: b,
            defaultItems: a.defaultItems,
            selectedItem: a.selectedItem,
            reportSuite: a.reportSuite,
            groupBy: a.groupBy,
            url: a.url,
            sort: a.url
        }), "reportAudienceFilter").on("reportFilter:ECAudienceChange", this.handleAudienceChange)
    },
    addReport: function(a) {
        this.addComponent(a).on("report:error", this.handleReportError);
        this.reports.push(a.toString())
    },
    addReports: function() {
        this.addReport(new ELM.Activities.ReportSummaryElementContribution({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "elementContributionReport")
    },
    handleReportError: function() {
        this.view.$(".retrieving").toggleClass("retrieving retrieving-done")
    },
    filter: function(a) {
        var b = this.components,
            c = !!a.get("reportSuite");
        if(!c || a.get("successCriteriaMetric") === "conversionRate") {
            _.each(this.reports, function(e) {
                var d = b[e];
                if(d) {
                    d.filter(a)
                }
            })
        }
    },
    getReportingMetrics: function() {
        return _.reject(this.model.metrics, function(a) {
            return a.revenueType === "sales"
        })
    }
});
"use strict";
ELM.Activities.LocationContributionChart = new Class({
    toString: "locationContributionChart",
    extend: ELM.Activities.CloudvizReport,
    getChartReadyData: function(c) {
        var d = [],
            a = [];
        var b = c.segmentsReport[0];
        _.each(b.locations, function(e) {
            a.push(e.locationName);
            d.push(e.influence)
        });
        return {
            x: a,
            y: d
        }
    },
    drawGraph: function(b, d) {
        var a = this.getChartReadyData(b),
            c = (64 + 30 * a.x.length);
        if(_.isUndefined(d)) {
            throw new Error(this.toString() + " drawGraph: chart placeholder is missing")
        }
        dv.chart().layers([dv.geom.bar()]).coord(dv.coord.cartesian().flip(true)).data(a).height(c).map("x", "x", dv.scale.ordinal().padding(0.65).reverse(true)).map("y", "y", dv.scale.linear().limits([0, 1])).map("fill", "x", dv.scale.ordinal().values(this.getCloudVizColors())).guide("x", dv.guide.axis().tickSize(0)).guide("y", dv.guide.axis().tickFormat(d3.format("00%")).orientation("left")).padding({
            left: 20,
            top: 20,
            right: 20,
            bottom: 0
        }).parent(d).render()
    }
});
"use strict";
ELM.Activities.ReportSummaryExperienceTargeting = new Class({
    toString: "ExperienceTargetingReportSummary",
    extend: ELM.Activities.ReportSummaryAB,
    formatResponse: function(a) {
        a = this.superClass.formatResponse.apply(this, arguments);
        a.activityType = ELM.Activities.activityTypes.EXPERIENCE_TARGETING;
        if(a.experiences && a.experiences.length > 0) {
            a.experiences[0].isControl = false
        }
        return a
    }
});
"use strict";
ELM.Activities.ReportChartExperienceTargeting = new Class({
    toString: "ExperienceTargetingReportChart",
    extend: ELM.Activities.ReportChartAB,
    formatResponse: function(a) {
        this.model.setGraphData(this.formatResponseToDV(a));
        return a
    }
});
"use strict";
ELM.Activities.ReportsExperienceTargeting = new Class({
    toString: "activityExperienceTargetingReport",
    extend: ELM.Activities.ReportsAB,
    addReportChart: function() {
        this.addComponent(new ELM.Activities.ReportChartExperienceTargeting({
            el: this.view.$(".report-chart-placeholder"),
            model: this.model,
            visible: true
        }), "reportChart")
    },
    addReportSummary: function() {
        this.addComponent(new ELM.Activities.ReportSummaryExperienceTargeting({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "reportSummary")
    }
});
"use strict";
ELM.Activities.ReportsRecommendation = new Class({
    toString: "activityRecommendationReport",
    extend: ELM.Activities.ReportsAB,
    addReportChart: function() {
        this.addComponent(new ELM.Activities.ReportChartRecommendation({
            el: this.view.$(".report-chart-placeholder"),
            model: this.model,
            visible: true
        }), "reportChart").on("report:error", this.handleReportError)
    },
    addReportSummary: function() {
        this.addComponent(new ELM.Activities.ReportSummaryRecommendation({
            el: this.view.$(".report-summary-placeholder"),
            model: this.model,
            visible: true
        }), "reportSummary").on("report:error", this.handleReportError)
    }
});
"use strict";
ELM.Activities.ReportsA4Recs = new Class({
    toString: "activityA4TReport",
    extend: ELM.Activities.ReportsA4T,
});
"use strict";
ELM.Activities.ReportSummaryRecommendation = new Class({
    toString: "RecommendationReportSummary",
    extend: ELM.Activities.ReportSummaryAB
});
"use strict";
ELM.Activities.ReportChartRecommendation = new Class({
    toString: "RecommendationReportChart",
    extend: ELM.Activities.ReportChartAB
});
ELM.Activities.RecommendationEditor = new Class({
    toString: "RecommendationEditor",
    extend: ELM.Activities.Editor,
    Model: ELM.Models.Recommendation,
    Template: function() {
        return ELM.Activities.Templates.RecommendationEditor.apply(this, arguments)
    },
    registerVars: function() {
        this.curStep = 0;
        this.steps = [{
            name: "presentation",
            component: "experienceEditor"
        }, {
            name: "configuration",
            component: "recommendationTarget"
        }, {
            name: "settings",
            component: "recommendationSettings"
        }];
        this.activityBackupAttributes = null;
        this.audiencePickerViewMode = "slidingPanel"
    },
    registerBinders: function() {
        this.superClass.registerBinders.apply(this, arguments);
        this.bind(this.updateTitle);
        this.bind(this.navigateToPreviousPage);
        this.bind(this.updateElmReferences);
        this.bind(this.deleteAlgorithmReference);
        this.bind(this.deleteTemplateReference);
        this.bind(this.backupInitialState);
        this.bind(this.handleAlgorithmsUpdated);
        this.bind(this.handleTemplatesUpdated);
        this.bind(this.handleAlgorithmPickerClosed);
        this.bind(this.handleTemplatePickerClosed);
        this.bind(this.showTemplatePicker);
        this.bind(this.showAlgorithmPicker);
        this.bind(this.addClickTrackId);
        this.bind(this.removeClickTrackId)
    },
    registerGlobalTriggers: function() {
        F.on("recommendation:algorithm-updated", this.updateElmReferences);
        F.on("recommendation:algorithm-deleted", this.deleteAlgorithmReference);
        F.on("recommendation:template-updated", this.updateElmReferences);
        F.on("recommendation:template-deleted", this.deleteTemplateReference);
        F.on("recommendation:addClickTrackId", this.addClickTrackId);
        F.on("recommendation:removeClickTrackId", this.removeClickTrackId)
    },
    unRegisterGlobalTriggers: function() {
        F.off("recommendation:algorithm-updated", this.updateElmReferences);
        F.off("recommendation:algorithm-deleted", this.deleteAlgorithmReference);
        F.off("recommendation:template-updated", this.updateElmReferences);
        F.off("recommendation:template-deleted", this.deleteTemplateReference);
        F.off("recommendation:addClickTrackId", this.addClickTrackId);
        F.off("recommendation:removeClickTrackId", this.removeClickTrackId)
    },
    initializeWidgets: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: this.view.$("#recommendation-wizard"),
            component: this,
            onPageChanged: {
                step3: function() {
                    if(a.isViewMode) {
                        a.wizard.setNextButtonLabel(Granite.I18n.get("Close"))
                    }
                }
            },
            onNextButtonClick: function() {
                return a.nextStep()
            },
            onBackButtonClick: function() {
                return a.prevStep()
            },
            onLeaving: function() {
                a.checkAndShowIfWarningNeeded()
            }
        })
    },
    addSubComponents: function() {
        this.addTemplateTestingComponent();
        this.addRecTarget();
        this.addRecSettings();
        this.addAlgorithmPicker();
        this.addTemplatePicker();
        this.addCdqClient();
        this.addUnsavedDialog();
        this.addErrorDialog();
        this.addSelectPageTypeDialog()
    },
    addEditableLabel: function() {
        this.addComponent(new ELM.EditableLabel({
            el: this.view.$(".title"),
            visible: true
        }), "recommendationTitle").on("change", this.updateTitle)
    },
    updateTitle: function(a) {
        this.model.setTitle(a.value)
    },
    addRecExperienceEditor: function() {
        this.addComponent(new ELM.Activities.RecommendationExperienceEditor({
            el: this.view.$("#recommendation-ee"),
            visible: false
        }), "experienceEditor").on("updateUrlSettings", this.updateUrlSettings).on("experienceEditor:loaded", this.backupInitialState).on("show:templatePicker", this.showTemplatePicker).on("show:algorithmPicker", this.showAlgorithmPicker)
    },
    addRecTarget: function() {
        this.addComponent(new ELM.Activities.RecommendationTarget({
            el: this.view.$("#recommendation-target"),
            visible: false
        }), "recommendationTarget").on("choose:audience", this.showAudiencePicker).on("show:templateTestingModal", this.updateUrlSettings).on("show:templatePicker", this.showTemplatePicker).on("show:algorithmPicker", this.showAlgorithmPicker)
    },
    addRecSettings: function() {
        this.addComponent(new ELM.Activities.Settings({
            el: this.view.$("#recommendation-settings"),
            visible: false
        }), "recommendationSettings").on("chooseReportingAudience", this.showAudiencePicker)
    },
    addAlgorithmPicker: function() {
        this.addComponent(new ELM.Activities.RecommendationAlgorithmPicker({
            recommendationParams: this.recommendationParams,
            recommendationGlobalConfig: this.recommendationGlobalConfig,
            slidingPanelMode: true,
            el: this.view.$("#recommendation-algorithm-picker"),
            component: this
        }), "algorithmPicker").on("algorithms:updated", this.handleAlgorithmsUpdated).on("algorithmPicker:closed", this.handleAlgorithmPickerClosed)
    },
    addTemplatePicker: function() {
        this.addComponent(new ELM.Activities.RecommendationTemplatePicker({
            slidingPanelMode: true,
            el: this.view.$("#recommendation-template-picker"),
            component: this
        }), "templatePicker").on("tempates:updated", this.handleTemplatesUpdated).on("templatePicker:closed", this.handleTemplatePickerClosed)
    },
    addSelectPageTypeDialog: function() {
        this.selectPageTypeDialog = new CUI.Modal({
            element: $('<div class="select-page-type"></div>').appendTo(document.body),
            visible: false,
            type: "default"
        })
    },
    showSelectPageTypeDialog: function(a) {
        this.selectPageTypeDialog.set({
            heading: Granite.I18n.get("Select Your Page Type"),
            content: ELM.Activities.Templates.RecommendationEditor.SelectPageTypeDialogContent({
                industryType: ELM.industryType,
                pageType: ""
            })
        }).show();
        this.selectPageTypeDialog.$element.find(".page-type").select().on("selected", this.showItemPicker);
        this.itemPickerOptions = a
    },
    showTemplatePicker: function() {
        this.components.templatePicker.showAsSlider({
            selectedTemplates: this.model.getSelectedTemplatesData(),
            selectedAlgorithms: this.model.getSelectedAlgorithmsData(),
            action: this.model.getAction(),
            singleSelectionMode: this.model.getRefAlgorithms().length > 1
        })
    },
    showAlgorithmPicker: function(a) {
        this.components.algorithmPicker.showAsSlider({
            pageType: this.model.getPageType(),
            industryType: this.model.getIndustryType(),
            recommendationParams: a.recommendationParams,
            recommendationGlobalConfig: a.recommendationGlobalConfig,
            recAlgoSessionId: this.model.getRecAlgoSessionId(),
            selectedAlgorithms: this.model.getSelectedAlgorithmsData(),
            selectedTemplates: this.model.getSelectedTemplatesData(),
            action: this.model.getAction(),
            singleSelectionMode: this.model.getRefRecTemplates().length > 1
        })
    },
    showEditor: function(a) {
        if(a.model) {
            this.load(a.model);
            this.isViewMode = a.isViewMode || false;
            if(this.isViewMode) {
                ELM.Util.showNoticeNotification({
                    message: Granite.I18n.get("You do not have sufficient privileges to edit the activity. However, you can still view it.")
                })
            }
            if(ELM.isAnalyticsEnabledForRecsMVT) {
                this.model.initReportingSolution()
            }
        }
        this.switchToStep(a.curStep || 0);
        this.show()
    },
    showStep: function(a) {
        var c = this.steps[a],
            b = {
                model: this.model
            };
        this.destructEditorModes();
        if(!a) {
            this.addRecExperienceEditor();
            this.addEditableLabel();
            _.extend(b, {
                cdq: this.cdq
            })
        }
        this.components[c.component].show(b);
        this.components.recommendationTitle.show({
            model: {
                title: this.model.getTitle(),
                placeholder: Granite.I18n.get("Untitled Activity"),
                required: false,
                maxlength: 200
            },
            silent: true
        })
    },
    handleAlgorithmPickerClosed: function() {
        var b = this.steps[this.curStep].component,
            a = (b === "experienceEditor");
        if(this.model.getRefAlgorithms().length === 0) {
            if(a) {
                this.components[b].deleteRecommendation()
            } else {
                if(b === "recommendationTarget") {
                    this.model.resetLocation();
                    this.model.setRefRecTemplates([])
                }
            }
        } else {
            if(a) {
                this.components[b].resetHoverAndSelectionBox()
            }
        }
    },
    handleTemplatePickerClosed: function() {
        var b = this.steps[this.curStep].component,
            a = (b === "experienceEditor");
        if(this.model.getRefRecTemplates().length === 0) {
            if(a) {
                this.components[b].deleteRecommendation()
            } else {
                if(b === "recommendationTarget") {
                    this.model.resetLocation();
                    this.model.setRefAlgorithms([])
                }
            }
        } else {
            if(a) {
                this.components[b].resetHoverAndSelectionBox();
                this.components[b].updateEEPreview()
            }
        }
    },
    handleAlgorithmsUpdated: function(a) {
        var c = this.steps[this.curStep].component,
            b = false;
        if(c === "experienceEditor") {
            b = true
        }
        this.model.setIndustryType(a.getIndustryType());
        this.model.setPageType(a.getPageType());
        this.model.updateRefAlgorithms(a.getSelectedAlgorithms(), b)
    },
    handleTemplatesUpdated: function(a) {
        var b = this.steps[this.curStep].component;
        if(b === "experienceEditor") {
            this.components[b].addItemsAndLockRecommendation(a)
        } else {
            if(b === "recommendationTarget") {
                this.model.updateRefRecTemplates(a.getSelectedTemplates())
            }
        }
    },
    getCompareParams: function() {
        return {
            ignoreKeys: ["thumbnailSrc", "elm:references"],
            ignoreKeysOfArrayElements: {
                metrics: ["isGoalMetric"]
            },
            ignoreKeysOfObjectElements: {
                location: ["categoryIdRequired", "entityIdRequired"]
            }
        }
    },
    backupInitialState: function() {
        this.activityBackupAttributes = this.activityBackupAttributes || this.model.createBackUp()
    },
    navigateToPreviousPage: function() {
        this.components.experienceEditor.cdq.showUnloadWarning(false);
        this.inherited(arguments)
    },
    updateElmReferences: function(a) {
        this.model.updateElmReferences(a)
    },
    deleteAlgorithmReference: function(a) {
        if(this.model.getRefAlgorithms().indexOf(ELM.Util.getCompleteResourcePath(a)) < 0) {
            return
        }
        this.model.removeAlgorithmByReference(a)
    },
    deleteTemplateReference: function(a) {
        if(this.model.getRefRecTemplates().indexOf(a) < 0) {
            return
        }
        this.model.removeTemplateByReference(a)
    },
    addClickTrackId: function() {
        if(this.model.getClickTrackId()) {
            return
        }
        this.model.setClickTrackId("at-track-click-" + new Date().getTime())
    },
    removeClickTrackId: function() {
        this.model.removeClickTrackId()
    },
    isRecommendationsEmpty: function() {
        var b = this.model.getRefAlgorithms(),
            a = this.model.getRefRecTemplates();
        return(b.length === 0 || a.length === 0)
    },
    saveActivity: function(c) {
        var f = this,
            g = this.components.recommendationSettings,
            b = g.metrics,
            d = this.isRecommendationsEmpty(),
            e = this.view.$(".save-continue-button"),
            a = Granite.I18n.get("DD MMM. YYYY HH:mm:ssZ", null, "Date format pattern for moment.js. e.g. 12 Jun. 2014 13:00+5:30 (http://momentjs.com/docs)");
        c = c || "saved";
        e.attr("disabled", "disabled");
        if(!g.isReportSuiteValid()) {
            this.switchToStep(2);
            return
        }
        if(b && b.hasMetricsToBeSaved() && !b.validateMetrics()) {
            this.switchToStep(2);
            b = g.metrics;
            b.validateMetrics();
            return
        }
        e.attr("disabled", "disabled");
        if(!this.model.getTitle()) {
            this.model.setTitle(this.model.getTitleOrDefault() + " " + moment().format(a))
        }
        this.showWaitMessage(Granite.I18n.get("Please wait while we save your activity."));
        this.model.save(this.model.getModifiedAttributesToSave(), {
            wait: true,
            success: function(h) {
                f.components.experienceEditor.cdq.showUnloadWarning(false);
                f.clearBackupActivityAttributes();
                f.trigger("model:" + c, h);
                if(d) {
                    F.trigger("infoNotification", {
                        message: Granite.I18n.get("{0} will stay in draft status until experiences are edited.", h.getTitle()),
                        heading: Granite.I18n.get("Note")
                    })
                } else {
                    F.trigger("successNotification", {
                        message: Granite.I18n.get("{0} has been saved.", h.getTitle()),
                        heading: Granite.I18n.get("Success")
                    })
                }
            },
            error: function(j, h) {
                var i = JSON.parse(h.responseText);
                e.removeAttr("disabled");
                F.trigger("errorNotification", {
                    message: i["error.message"],
                    heading: Granite.I18n.get("Error")
                })
            }
        })
    },
    destructEditorModes: function() {
        var b = ["experienceEditor"];
        for(var a in this.components) {
            if(b.indexOf(a) != -1) {
                this.components[a].destroy();
                this.components[a].isSetup = false
            }
        }
        this.cdq.domListeners = {};
        this.cdq.domListenersCount = 0;
        this.cdq.requests = [];
        return this
    }
});
ELM.Activities.RecommendationExperienceEditor = new Class({
    toString: "RecommendationExperienceEditor",
    extend: ELM.Activities.ExperienceEditor,
    View: F.View.extend({
        events: {
            "click .url-settings": "handleUrlSettingsClick",
            "click .highlight-objects": "highlightObjects",
            "click .cancel-overlay-popover": "hideOverlayPopover",
            "selected .color-options": "updateButtonColor",
            "click .show-preview": "switchToPreviewMode",
            "click .exit-preview": "exitPreviewMode"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerGlobalTriggers();
        this.registerVars();
        this.cacheSelectors();
        this.addSubComponents();
        this.initWidgets()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    initView: function(a) {
        this.view = new this.View({
            el: $('<div class="experienceEditorRecMode height-100p" />').appendTo(a),
            component: this,
            template: ELM.Activities.Templates.RecommendationExperienceEditor
        }).render();
        this.view.render = function() {}
    },
    loadModel: function(a) {
        this.load(a)
    },
    registerBinders: function() {
        this.bind(this.setup);
        this.bind(this.handleHostClick);
        this.bind(this.handleHostLoad);
        this.bind(this.handleScroll);
        this.bind(this.resetHoverBox);
        this.bind(this.resetSelectedBox);
        this.bind(this.resetSelection);
        this.bind(this.resetBoxes);
        this.bind(this.resetHoverAndSelectionBox);
        this.bind(this.handleThumbnailGenerate);
        this.bind(this.startHostLoadingProgress);
        this.bind(this.stopHostLoadingProgress);
        this.bind(this.handleHostLoadTimeout);
        this.bind(this.handleHostHandShake);
        this.bind(this.handleKeyBoardEvents);
        this.bind(this.getBlockedMboxes);
        this.bind(this.addItemsAndLockRecommendation);
        this.bind(this.performAction);
        this.bind(this.undoRecommendation);
        this.bind(this.lockdownRecommendation);
        this.bind(this.updateCatalogRefAndPreview);
        this.bind(this.showCatalogPicker);
        this.bind(this.createRecommendationBox);
        this.bind(this.onPreviewExperience);
        this.bind(this.setUsedTemplateChangedFlag);
        this.bind(this.setUsedCatalogChangedFlag);
        this.bind(this.updateEEPreview);
        this.bind(this.handleItemPickerClosed)
    },
    registerGlobalTriggers: function() {
        F.on("recommendation:template-updated", this.setUsedTemplateChangedFlag);
        F.on("recommendation:catalog-updated", this.setUsedCatalogChangedFlag)
    },
    unregisterGlobalTriggers: function() {
        F.off("recommendation:template-updated", this.setUsedTemplateChangedFlag);
        F.off("recommendation:catalog-updated", this.setUsedCatalogChangedFlag)
    },
    registerVars: function() {
        this.actionHandlerMap = {
            "replace-recommendations": this.replaceWithRecommentions,
            "add-recommendations": this.addRecommendations,
            "insert-recommendations-after": this.insertRecommendationsAfter,
            "insert-recommendations-before": this.insertRecommendationsBefore,
            "delete-recommendation": this.deleteRecommendation,
            "change-template": this.changeTemplate,
            "update-algorithms": this.showAlgorithmPicker,
            "update-templates": this.showTemplatePicker,
            "change-catalog": this.showCatalogPicker
        };
        this.control = {};
        this.initialState = null;
        this.recommendationSelector = "#AT_recommendation_icon_container";
        this.imagesToLoad = 0;
        this.imagesLoaded = 0;
        this.actionApplied = false;
        this.usedTemplateChanged = false;
        this.usedCatalogChanged = false;
        this.tooltipMessage = "";
        this.tooltipType = "";
        this.previewIndex = 0;
        this.inherited(arguments)
    },
    cacheSelectors: function() {
        this.inherited(arguments);
        this.$previewPanel = this.view.$(".preview-panel");
        this.$frameView = this.view.$(".frame-view");
        this.$previewButton = this.view.$(".show-preview");
        this.$eeToolbar = this.view.$(".ee-mode-toolbar");
        this.$previewToolbar = this.view.$(".preview-mode-toolbar")
    },
    initWidgets: function() {
        this.view.$(".popover").popover();
        this.overlayPopoverCUIObject = this.view.$(".object-highlighter-popover").data("popover");
        this.view.$(".select").select()
    },
    addSubComponents: function() {
        this.addExperienceEditorActionMenu();
        this.addItemPicker();
        this.addPreviewPanel();
        this.addSelectPageTypeDialog();
        this.addCatalogPicker();
        this.inherited(arguments)
    },
    addExperienceEditorActionMenu: function() {
        this.addComponent(new ELM.Activities.RecommendationExperienceEditor.ActionMenu({
            el: $('<div class="experienceEditorPopover min-width-12 max-width-20-875" id="recommendation-action-menu" />').appendTo(document.body),
            component: this
        }), "recommendationActionMenu").on("perform-action", this.performAction)
    },
    addItemPicker: function() {
        this.addComponent(new ELM.Activities.RecommendationItemPicker({
            el: $('<div id="recommendation-item-picker" class="content-picker-container"></div>').appendTo(document.body),
            component: this
        }), "recommendationItemPicker").on("recommendation:itemPicker:closed", this.handleItemPickerClosed).on("recommendation:itemPicker:items:selected", this.addItemsAndLockRecommendation)
    },
    addPreviewPanel: function() {
        this.addComponent(new ELM.Activities.RecommendationExperienceEditor.PreviewPanel({
            el: this.$previewPanel.find("#preview-panel-list"),
            visible: false
        }), "recsPreviewPanel").on("experience:preview", this.onPreviewExperience)
    },
    addSelectPageTypeDialog: function() {
        this.selectPageTypeDialog = new CUI.Modal({
            element: $('<div class="select-page-type"></div>').appendTo(document.body),
            visible: false,
            type: "default"
        })
    },
    showSelectPageTypeDialog: function(a) {
        this.selectPageTypeDialog.set({
            heading: Granite.I18n.get("Select Page Type"),
            content: ELM.Activities.Templates.RecommendationEditor.SelectPageTypeDialogContent({
                industryType: ELM.industryType,
                pageType: ""
            })
        }).show();
        this.selectPageTypeDialog.$element.find(".page-type").select().on("selected", function(b) {
            var c = b.selected;
            if(!c) {
                return
            }
            this.model.setPageType(c);
            this.model.setIndustryType(ELM.industryType);
            this.selectPageTypeDialog.hide();
            this.showItemPicker(a)
        }.bind(this))
    },
    showItemPicker: function(a) {
        this.resetUsedContentChangedFlags();
        if(typeof this.model.getPageType() === "undefined") {
            this.showSelectPageTypeDialog(a)
        } else {
            this.components.recommendationItemPicker.show({
                pageType: this.model.getPageType(),
                industryType: this.model.getIndustryType(),
                action: a,
                recommendationParams: this.lastData.recommendationParams,
                recommendationGlobalConfig: this.lastData.recommendationGlobalConfig,
                selectedAlgorithms: this.model.getSelectedAlgorithmsData(),
                selectedTemplates: this.model.getSelectedTemplatesData(),
                recAlgoSessionId: this.model.getRecAlgoSessionId(),
                silent: true
            })
        }
    },
    addCatalogPicker: function() {
        this.addComponent(new ELM.Activities.RecommendationCatalogPicker({
            el: this.view.$("#recommendation-catalog-picker"),
            component: this
        }), "catalogPicker").on("catalog:selected", this.updateCatalogRefAndPreview).on("catalog-picker:closed", this.updateEEPreview)
    },
    updateCatalogRefAndPreview: function(a) {
        if(this.model.getRefCatalog() === a.reference && !this.isUsedContentChanged()) {
            return
        }
        this.model.updateRefCatalog(a);
        this.changeTemplate()
    },
    showCatalogPicker: function() {
        this.resetUsedContentChangedFlags();
        this.components.catalogPicker.show({
            silent: true
        })
    },
    resetHoverAndSelectionBox: function() {
        this.resetSelectedBox();
        this.resetHoverBox()
    },
    performAction: function(b, a) {
        var c = this.actionHandlerMap[b];
        if(typeof c === "function") {
            c.call(this, a)
        }
    },
    setActivityUrl: function(a) {
        var b = this.model.getTemplates();
        b.activityUrl = a
    },
    getActivityUrl: function() {
        return this.model.getActivityUrl()
    },
    setup: function() {
        var a = this.getActivityUrl() || ELM.defaultSimulatorUrl;
        this.setOffsetTop(152);
        this.setPath([]);
        this.setControlString(" [Control]");
        this.setIdSelectorParameter("#");
        this.setCdqParameter("disableJavaScript", false);
        this.setCdqParameter("unloadWarningMessage", this.messages.unloadWarning);
        this.setCdqParameter("blockedMboxes", this.getBlockedMboxes());
        this.setCdqParameter("mode", this.mode);
        this.startHostLoadingProgress();
        this.isHostLoaded = false;
        this.frame.src = this.getProxiedUrl({
            url: a
        });
        this.mixContentCheck();
        this.actionMenuPopover = this.components.recommendationActionMenu.popover;
        this.isSetup = true
    },
    showExperienceEditor: function() {
        this.setMode(this.modes.recommendation);
        this.addCdqClientListeners();
        if(!this.isSetup) {
            this.setup()
        }
        this.showFrame();
        this.resetHostSite(true);
        this.trigger("experienceEditor:shown")
    },
    show: function(a) {
        var b = this;
        this.cdq = a.cdq;
        this.moveIframeElement(this.cdq);
        this.loadModel(a.model);
        this.authenticateAndShowExperienceEditor(function() {
            b.showExperienceEditor()
        });
        this.view.show()
    },
    hideActionButtons: function() {},
    updateEditorMode: function() {
        if(this.isPreviewMode()) {
            this.switchToRecommendationPreviewMode();
            this.renderPreviewPanel();
            this.moveFrameView();
            this.showPreviewPanel()
        } else {
            this.switchToRecsMode()
        }
    },
    switchToRecsMode: function() {
        this.cdq.copyAttribute("a", this.cdqPrefix + "href", "href");
        this.cdq.removeAttribute("a", this.cdqPrefix + "href");
        this.cdq.copyAttribute("a", this.cdqPrefix + "target", "target");
        this.cdq.removeAttribute("a", this.cdqPrefix + "target");
        this.removeAttributesToAvoidNavigation();
        this.clickListenerId = this.cdq.addListener("*", "at-click", this.handleHostClick, null, true, true);
        this.formListenerId = this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.cdq.addListener("document", "scroll", this.handleScroll);
        this.resetHoverBox();
        this.cdq.setStyle("#AT_box_selected", "display", "block")
    },
    handleUrlSettingsClick: function() {
        this.trigger("updateUrlSettings")
    },
    updateLocation: function(e, f) {
        var d = this,
            c = this.lastData.el,
            a = c.mboxName,
            b;
        this.cdq.getSelector("#" + c.id, function(g) {
            b = {
                action: e,
                selector: g.selector,
                cssSelector: c.cssSelector
            };
            if(e === ELM.ExperienceEditorActions.SET_CONTENT && a) {
                b.mbox = a
            }
            d.model.setLocation(_.extend(d.model.getLocation(), b));
            if(typeof f === "function") {
                f.call(d)
            }
        })
    },
    showNotification: function() {
        var a = this.model.getSelector(),
            b = Granite.I18n.get("Your Recommendations Location has been set up.");
        if(this.recommendationExists()) {
            b = Granite.I18n.get("Your Recommendation has been updated.")
        }
        if(a[0] !== this.getIdSelectorParameter()) {
            b = b + " " + Granite.I18n.get("However, because your chosen location does not have an id for unique identification, your content may unintentionally be applied to a different location with the same selector.");
            ELM.Util.showNoticeNotification({
                message: b,
                heading: Granite.I18n.get("WARNING:")
            })
        } else {
            this.cdq.getElementsCountForSelector(a, function(c) {
                if(c.count > 1) {
                    b = b + " " + Granite.I18n.get("However, because your chosen location does not have a unique id, your content may unintentionally be applied to a different location with the same id.");
                    ELM.Util.showNoticeNotification({
                        message: b,
                        heading: Granite.I18n.get("WARNING:")
                    })
                } else {
                    ELM.Util.showSuccessNotification({
                        message: b,
                        heading: Granite.I18n.get("SUCCESS:")
                    })
                }
            })
        }
    },
    addItemsAndLockRecommendation: function(a) {
        this.model.updateRefAlgorithms(a.getSelectedAlgorithms(), true);
        this.model.updateRefRecTemplates(a.getSelectedTemplates(), true);
        if(this.recommendationExists()) {
            this.undoRecommendation(this.lockdownRecommendation);
            this.showNotification()
        } else {
            this.updateLocation(a.getAction(), function() {
                this.applyActionAndLockRecommendation(this.lastData.el, Granite.I18n.get("Recommendations Location"));
                this.showNotification()
            }.bind(this))
        }
    },
    lockdownRecommendation: function() {
        var a = this;
        if(this.model.getRefAlgorithms().length && this.model.getRefRecTemplates().length) {
            this.cdq.getSelector(this.model.getSelector(), function(b) {
                a.applyActionAndLockRecommendation(b.el, Granite.I18n.get("Recommendations Location"))
            }, function(b) {
                if(b.error === "selectorNotFound") {
                    a.updateCDQPageState(true);
                    a.showMissingRecommendationErrorDialog()
                }
            })
        }
    },
    showMissingRecommendationErrorDialog: function() {
        this.selectorNotFoundNotificationDialog.set({
            content: '<div class="max-width-31">' + Granite.I18n.get("We've noticed some structural changes to your page since this activity was last saved. ") + Granite.I18n.get("This may cause unexpected results in delivering your recommendation. ") + Granite.I18n.get("Placeholder for this recommendation has moved or no longer exist.") + "</div>",
            buttons: [{
                label: Granite.I18n.get("Delete Missing Recommendation"),
                className: "primary",
                click: function(a) {
                    this.deleteRecommendation();
                    this.selectorNotFoundNotificationDialog.hide()
                }.bind(this)
            }]
        }).show()
    },
    applyActionAndLockRecommendation: function(d, c) {
        var b = this.model.getSelector(),
            f = this.model.getAction(),
            a = (this.lastData && this.lastData.selectedIndex) || 0,
            e = this;
        if(f === ELM.ExperienceEditorActions.SET_CONTENT) {
            this.control = {
                action: ELM.ExperienceEditorActions.SET_CONTENT,
                selector: b,
                content: d.innerHTML
            }
        } else {
            this.control = {
                action: ELM.ExperienceEditorActions.REMOVE_FROM_DOM,
                selector: this.recommendationSelector
            }
        }
        this.resetHoverAndSelectionBox();
        this.getPreviewContent(this.model.getRefRecTemplates()[a], function(g) {
            this.cdq.applyActions([{
                action: f,
                selector: b,
                content: g
            }], function() {
                e.actionApplied = true;
                e.$previewButton.removeAttr("disabled");
                e.markRecommendationAsLocked(d, c);
                e.addRecommendationParamsToActivity(d);
                e.addRecommendationGlobalConfigToActivity()
            })
        }.bind(this))
    },
    getPreviewContent: function(e, f) {
        var d = this,
            c = this.model.getRefCatalog(),
            a = "/target/" + ELM.client + "/target/setup/recs.preview.at.html?path=" + e,
            b = 20000;
        this.$progressNotifier.removeClass("hidden");
        this.progressBar.start(b);
        this.imagesLoaded = 0;
        this.imagesToLoad = 0;
        this.actionApplied = false;
        if(c) {
            a = a + "&catalogPath=/target/" + ELM.client + "/target" + c
        }
        $.ajax({
            url: a,
            success: function(g) {
                var h = $("img", $(g));
                d.updateTooltipMessage(g);
                d.imagesToLoad = h.length;
                h.load(function() {
                    d.imagesLoaded++;
                    d.createRecommendationBox()
                }).error(function() {
                    d.imagesLoaded++;
                    d.createRecommendationBox()
                });
                g = '<div id="AT_recommendation_icon_container">' + g + "</div></div>";
                f(g)
            },
            error: function() {
                d.updateTooltipMessage();
                f('<div class="AT_recommendation_icon_container" id="AT_recommendation_icon_container"><div class="AT_recommendation_icon"></div></div>')
            }
        })
    },
    createRecommendationBox: function() {
        if(this.actionApplied) {
            if(this.imagesLoaded === this.imagesToLoad) {
                clearTimeout(this.timerId);
                delete this.timerId;
                this.actionApplied = false;
                this.progressBar.stop(true);
                this.$progressNotifier.addClass("hidden");
                this.cdq.sendHighlightElementRequest(this.recommendationSelector);
                this.cdq.createRecommendationBox(this.recommendationSelector, Granite.I18n.get("Recommendations Location"));
                this.cdq.createTooltip("#AT_box_recommendation_AT_recommendation_icon_container", this.tooltipMessage, this.tooltipType)
            } else {
                if(typeof this.timerId === "undefined") {
                    this.timerId = setTimeout(function() {
                        this.imagesLoaded = this.imagesToLoad;
                        this.createRecommendationBox()
                    }.bind(this), 5000000)
                }
            }
        }
    },
    markRecommendationAsLocked: function(c, b) {
        var a = c.mboxName;
        if(a) {
            this.cdq.setAttribute(this.recommendationSelector, "data-mboxname", a)
        }
        this.cdq.setStyle(".AT_Border", "visibility", "hidden");
        this.cdq.updatePageState("IS_HOVER_DISABLED", true);
        this.updateCDQPageState(true);
        this.createRecommendationBox();
        this.cdq.setAttribute(this.recommendationSelector, "data-cdq-recommendation", b)
    },
    addRecommendationParamsToActivity: function(b) {
        var a = this.lastData ? this.lastData.recommendationParams : this.getRecommendationParams(b);
        this.model.setEntityIdRequired(a[ELM.RECOMMENDATION_PARAM.ENTITY_ID]);
        this.model.setCategoryIdRequired(a[ELM.RECOMMENDATION_PARAM.CATEGORY_ID])
    },
    addRecommendationGlobalConfigToActivity: function() {
        var a = this.lastData ? this.lastData.recommendationGlobalConfig : {};
        this.model.setRecommendationGlobalConfig(a)
    },
    updateCDQPageState: function(a, b) {
        this.cdq.updatePageState("IS_RECOMMENDATION_EXISTS", a, b)
    },
    getRecommendationParams: function(d) {
        var h = d.mboxParams,
            c = {},
            e = h.length,
            a, g, f, b;
        for(b = 0; b < e; b++) {
            a = h[b].split("=");
            if(a.length == 2) {
                g = a[0].trim();
                f = a[1].trim().split(",");
                if(f[0] && ((g === ELM.RECOMMENDATION_PARAM.ENTITY_ID && f.length === 1) || g === ELM.RECOMMENDATION_PARAM.CATEGORY_ID)) {
                    c[g] = true
                }
            }
        }
        return c
    },
    handleHostClick: function(c) {
        var d = c.el.path,
            a = c.el.className || "",
            b = this;
        if($("#object-highlighter-popover-recs-ap").is(":visible")) {
            this.hideOverlayPopover()
        }
        if(a.indexOf("AT_cover") > -1) {
            this.actionMenuPopover.hide();
            this.cdq.deleteTooltip("#AT_box_recommendation_AT_recommendation_icon_container")
        }
        if(a.indexOf("AT_click_disabled") > -1 || !c.evt.isATEvent) {
            return false
        }
        if(c.pageState.IS_RECOMMENDATION_EXISTS && !c.el.recommendationName) {
            this.actionMenuPopover.hide();
            return false
        }
        c.recommendationGlobalConfig.isRegionalMbox = (c.el.mboxName !== "");
        c.recommendationParams = this.getRecommendationParams(c.el);
        c.templates = this.model.getSelectedTemplatesData();
        c.algorithms = this.model.getSelectedAlgorithmsData();
        c.selectedIndex = (this.lastData && this.lastData.selectedIndex) || 0;
        this.actionMenuAdjustPosition(c);
        this.pageOriginalOffsetY = c.evt.pageYOffset;
        this.pageOriginalOffsetX = c.evt.pageXOffset;
        if(typeof d === "string") {
            c.el.path = JSON.parse(d)
        }
        this.lastData = c;
        this.setPath(c.el.path);
        this.lastChild = this.getPathLength() - 1
    },
    backupInitialState: function() {
        this.initialState = this.initialState || this.model.createBackUp()
    },
    hasChanged: function() {
        if(!this.initialState) {
            return true
        }
        return ELM.Util.hasChanged(this.model, this.initialState, {
            ignoreKeys: ["thumbnailSrc"]
        })
    },
    handleHostLoad: function(b) {
        var a = b.location = this.getOriginalUrl({
            url: b.location
        });
        this.setActivityUrl(a);
        this.cdq.showUnloadWarning(true, function() {
            this.isHostLoaded = true;
            if(!this.model.getThumbnailSrc()) {
                this.generateThumbnail(0)
            }
            this.actionMenuPopover.hide();
            this.updateEditorMode();
            this.stopHostLoadingProgress();
            this.updatePage();
            this.view.$(".unableToLoadPageNotifier").addClass("hidden");
            this.backupInitialState();
            this.trigger("experienceEditor:loaded")
        }.bind(this))
    },
    handleHostLoadTimeout: function() {
        this.stopHostLoadingProgress(true);
        this.hideProgressNotifier();
        if(!this.isProxyEnabled()) {
            ELM.Util.showErrorNotification({
                message: this.messages.timeoutError,
                heading: Granite.I18n.get("ERROR")
            })
        }
    },
    handleScroll: function(a) {
        a.pageInfo = {
            topOffset: this.getOffsetTop(),
            leftOffset: this.leftOffset,
            pageOriginalOffsetX: this.pageOriginalOffsetX,
            pageOriginalOffsetY: this.pageOriginalOffsetY
        };
        this.components.recommendationActionMenu.adjustPopoverOnScroll(a)
    },
    actionMenuAdjustPosition: function(a) {
        this.components.recommendationActionMenu.adjustPosition(a)
    },
    changeControlUrl: function(a) {
        this.clearExperiences();
        this.setBuildModeUrl(a);
        this.setActivityUrl(a);
        this.model.removePageType();
        this.model.removeIndustryType();
        this.model.setThumbnailSrc("");
        this.reloadHost()
    },
    clearExperiences: function() {
        this.model.resetLocation();
        this.model.setRefAlgorithms([], true);
        this.model.setRefRecTemplates([], true)
    },
    recommendationExists: function() {
        return this.lastData.el.recommendationName
    },
    handleThumbnailGenerate: function(b) {
        var c = moment().unix() + ".png",
            a = this;
        this.saveThumbnail(b.thumbnail, c, function(d) {
            a.model.setThumbnailSrc(d)
        })
    },
    replaceWithRecommentions: function() {
        this.showItemPicker(ELM.ExperienceEditorActions.SET_CONTENT)
    },
    addRecommendations: function() {
        this.showItemPicker(ELM.ExperienceEditorActions.SET_CONTENT)
    },
    insertRecommendationsAfter: function() {
        this.showItemPicker(ELM.ExperienceEditorActions.INSERT_AFTER)
    },
    insertRecommendationsBefore: function() {
        this.showItemPicker(ELM.ExperienceEditorActions.INSERT_BEFORE)
    },
    changeTemplate: function() {
        var a = this;
        this.getPreviewContent(this.model.getRefRecTemplates()[this.lastData.selectedIndex], function(b) {
            a.undoRecommendation();
            a.resetHoverAndSelectionBox();
            a.cdq.applyActions([{
                action: a.model.getAction(),
                selector: a.model.getSelector(),
                content: b
            }], function() {
                a.actionApplied = true;
                a.markRecommendationAsLocked(a.lastData.el, Granite.I18n.get("Recommendations Location"))
            })
        })
    },
    showAlgorithmPicker: function() {
        this.trigger("show:algorithmPicker", {
            recommendationParams: this.lastData.recommendationParams,
            recommendationGlobalConfig: this.lastData.recommendationGlobalConfig
        })
    },
    showTemplatePicker: function() {
        this.resetUsedContentChangedFlags();
        this.trigger("show:templatePicker")
    },
    deleteRecommendation: function() {
        this.undoRecommendation();
        this.clearExperiences();
        this.resetBoxes();
        this.$previewButton.attr("disabled", "disabled")
    },
    undoRecommendation: function(c) {
        var b = false,
            a = this;
        this.cdq.removeAttribute(this.recommendationSelector, "data-cdq-recommendation");
        this.cdq.sendRemoveHighlightFromElementRequest(this.recommendationSelector);
        this.cdq.deleteTooltip("#AT_box_recommendation_AT_recommendation_icon_container");
        this.lastData && this.lastData.el && this.cdq.deleteRecommendationBox(this.lastData.el);
        this.updateCDQPageState(b);
        this.cdq.applyActions([this.control], function() {
            a.cdq.updatePageState("IS_HOVER_DISABLED", false);
            if(typeof c === "function") {
                c.call()
            }
        });
        this.actionMenuPopover.hide()
    },
    updateTooltipMessage: function(c) {
        if(!c) {
            this.tooltipMessage = Granite.I18n.get("Unable to generate preview.") + " " + Granite.I18n.get("Please try after sometime.");
            this.tooltipType = "notice";
            return
        }
        var d = false,
            a = $(c),
            e = a.length;
        for(var b = 0; b < e; b++) {
            if(a[b].tagName === "SCRIPT") {
                d = true;
                break
            }
        }
        this.tooltipMessage = Granite.I18n.get("Sample of random products from your collection.");
        this.tooltipType = "";
        if(d) {
            this.tooltipMessage += " " + Granite.I18n.get("The JavaScript in your design was disabled to allow our tools to work on your page.") + " " + Granite.I18n.get("To see your design with JavaScript, switch to preview mode.");
            this.tooltipType = "notice"
        }
    },
    onComplete: function() {
        return true
    },
    isComplete: function() {
        return true
    },
    showPreviewPanel: function() {
        this.$previewPanel.removeClass("display-none")
    },
    hidePreviewPanel: function() {
        this.$previewPanel.addClass("display-none")
    },
    moveFrameView: function() {
        this.$frameView.addClass("margin-l-16-5")
    },
    centerFrameView: function() {
        this.$frameView.removeClass("margin-l-16-5")
    },
    isPreviewMode: function() {
        return this.getMode() === this.modes.preview
    },
    isRecommendationMode: function() {
        return this.getMode() === this.modes.recommendation
    },
    changeMode: function(a) {
        if(this.getMode() === a) {
            return
        }
        this.setMode(a);
        if(this.isRecommendationMode()) {
            this.centerFrameView();
            this.hidePreviewPanel()
        }
        this.reloadHost()
    },
    switchToRecommendationPreviewMode: function() {
        this.cdq.updatePageState("IS_PREVIEW", true);
        this.cdq.addListener("*", "at-click", null, null, true, true);
        this.cdq.addListener("form", "submit", this.stopSubmit, null, true, true);
        this.removeAttributesToAvoidNavigation();
        this.cdq.addListener("document", "scroll", null);
        this.cdq.copyAttribute("img", "src");
        this.cdq.setStyle(".AT_Border", "visibility", "hidden");
        this.cdq.updatePageState("IS_HOVER_DISABLED", true)
    },
    renderPreviewPanel: function() {
        var a = this.model.getSelectedTemplatesData();
        this.components.recsPreviewPanel.show({
            silent: true,
            collection: a,
            selectedIndex: this.previewIndex
        });
        this.view.$(".template-name").text(a[this.previewIndex].name || a[this.previewIndex]["dc:title"])
    },
    switchToPreviewMode: function() {
        this.previewIndex = 0;
        this.$eeToolbar.addClass("display-none");
        this.$previewToolbar.removeClass("display-none");
        this.changeMode(this.modes.preview)
    },
    exitPreviewMode: function() {
        if(this.lastData) {
            this.lastData.selectedIndex = 0
        }
        this.$eeToolbar.removeClass("display-none");
        this.$previewToolbar.addClass("display-none");
        this.changeMode(this.modes.recommendation)
    },
    onPreviewExperience: function(a) {
        if(a === this.previewIndex) {
            return
        }
        this.previewIndex = a;
        this.reloadHost()
    },
    applyExperience: function() {
        var a = this;
        this.getPreviewContent(this.model.getRefRecTemplates()[this.previewIndex], function(b) {
            a.cdq.applyActions([{
                action: a.model.getAction(),
                selector: a.model.getSelector(),
                content: b
            }], function() {
                a.progressBar.stop(true);
                a.$progressNotifier.addClass("hidden")
            })
        })
    },
    handleItemPickerClosed: function() {
        this.resetHoverAndSelectionBox();
        this.updateEEPreview()
    },
    isContentReferredInActivity: function(c) {
        var a = c.reference,
            b = this.model.getElmReferences();
        a = a ? a : c.path;
        if(b[a] || b[ELM.Util.getCompleteResourcePath(a)]) {
            return true
        }
        return false
    },
    isUsedContentChanged: function() {
        return this.usedTemplateChanged || this.usedCatalogChanged
    },
    resetUsedContentChangedFlags: function() {
        this.usedCatalogChanged = false;
        this.usedTemplateChanged = false
    },
    setUsedTemplateChangedFlag: function(a) {
        if(this.isContentReferredInActivity(a)) {
            this.usedTemplateChanged = true
        }
    },
    setUsedCatalogChangedFlag: function(a) {
        if(this.isContentReferredInActivity(a)) {
            this.usedCatalogChanged = true
        }
    },
    updateEEPreview: function() {
        if(this.isUsedContentChanged()) {
            this.changeTemplate()
        }
    },
    updatePage: function() {
        if(this.isRecommendationMode()) {
            this.lockdownRecommendation()
        } else {
            this.applyExperience()
        }
    }
});
ELM.Activities.RecommendationExperienceEditor.ActionMenu = new Class({
    toString: "RecommendationExperienceEditorActionMenu",
    extend: ELM.Activities.ExperienceEditorActionMenu,
    construct: function() {
        this.registerBinders()
    },
    registerBinders: function() {
        this.selectParent.bind(this);
        this.adjustPopoverOnScroll.bind(this);
        this.getPosition.bind(this)
    },
    getActionMenuTemplate: function(a) {
        switch(a) {
            case "RECOMMENDATION":
                return ELM.Activities.Templates.RecommendationExperienceEditor.ActionMenu.Recommendation;
            case "MBOX":
                return ELM.Activities.Templates.RecommendationExperienceEditor.ActionMenu.Mbox;
            case "DIV":
                return ELM.Activities.Templates.RecommendationExperienceEditor.ActionMenu.Container;
            default:
                return ELM.Activities.Templates.RecommendationExperienceEditor.ActionMenu.Others
        }
    },
    performAction: function(b, a) {
        if(b === "select-parent") {
            this.selectParent.call(this, a)
        }
        this.trigger("perform-action", b, a)
    },
    handlePopoverItemSelection: function(b) {
        var e = this.parent.lastData,
            a = $(b.currentTarget),
            d = a.data("action"),
            c = a.data("index");
        if(typeof c !== "undefined") {
            e.selectedIndex = c
        }
        this.performAction(d, e);
        this.popover.hide();
        this.parent.mousePosition = {
            clientX: b.clientX,
            clientY: b.clientY
        };
        b.stopPropagation()
    },
    adjustPosition: function(f) {
        var e = f.el.tagName,
            d = this.getActionMenuTemplate(f.el.recommendationName !== "" ? "RECOMMENDATION" : (f.el.mboxName === "" ? e : "MBOX")),
            c = {},
            b = this.popover.$element,
            a = f.recommendationParams;
        c.isRecommendationMbox = a && (a[ELM.RECOMMENDATION_PARAM.ENTITY_ID] || a[ELM.RECOMMENDATION_PARAM.CATEGORY_ID]);
        c.isEmpty = f.el.isEmpty === "true";
        c.templates = f.templates;
        c.algorithms = f.algorithms;
        c.selectedIndex = f.selectedIndex;
        this.isMbox = (f.el.mboxName !== "");
        this.popover.set("content", d(c));
        this.popover.set(this.getPosition(f));
        this.popover.show();
        this.originalOffset = b.offset()
    }
});
ELM.Activities.RecommendationExperienceEditor.PreviewPanel = new Class({
    toString: "RecommendationExperienceEditorPreviewPanel",
    extend: F.ListComponent,
    ItemTemplate: Handlebars.compile(['<span class="cell">{{#if name}}{{name}}{{else}}{{[dc:title]}}{{/if}}</span>'].join("")),
    ItemView: F.View.extend({
        tagName: "li",
        className: "row"
    }),
    show: function(a) {
        this.view.collection = new this.Collection(a.collection);
        this.collectionLoaded = true;
        this.selectedItem = a.selectedIndex;
        this.render();
        this.inherited(arguments)
    },
    render: function() {
        this.view.render();
        this.markAsSelected(this.view.$el.find("li").eq(this.selectedItem))
    },
    handleSelect: function(a) {
        var d = a.target,
            c = this.view.$(a.currentTarget).closest("li"),
            b = c.data("viewIndex");
        if(this.selectedItem === b) {
            return
        }
        this.previewExperience(c, b)
    },
    previewExperience: function(b, a) {
        this.selectedItem = a;
        this.clearSelected();
        this.markAsSelected(b);
        this.trigger("experience:preview", a)
    },
    clearSelected: function() {
        this.view.$(".selected").removeClass("selected")
    },
    markAsSelected: function(a) {
        a.addClass("selected")
    }
});
ELM.Activities.RecommendationTarget = new Class({
    toString: "RecommendationTarget",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {
            "change .recs-default-content": "updateDefaultContent",
            "click .change-audience": "triggerChooseAudienceEvent",
            "click .remove-algorithm": "removeAlgorithm",
            "click .edit-algorithm": "showAlgorithmEditor",
            "click .remove-template": "removeTemplate",
            "click .edit-template": "showTemplateEditor",
            "click .change-templates": "triggerShowTemplatePicker",
            "click .change-algorithms": "triggerShowAlgorithmPicker",
            "click .testing-template-rules": "triggerShowTemplateTestingModal",
            "click .template-preview-link": "loadTemplatePreview"
        }
    }),
    construct: function(a) {
        this.load(a.model);
        this.registerVars();
        this.initView(a.el);
        this.registerListeners();
        this.registerBinders()
    },
    registerVars: function() {
        this.algorithmIndex = 0;
        this.templateIndex = 0;
        this.hasValidDefaultContentPercentage = true;
        this.algorithms = []
    },
    initView: function(a) {
        this.view = new this.View({
            el: a,
            component: this,
            template: ELM.Activities.Templates.RecommendationTarget
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.addSubComponents();
            this.initializeWidgets()
        })
    },
    registerBinders: function() {
        this.bind(this.updateTargetAudience);
        this.bind(this.updateAlgorithm);
        this.bind(this.updateTemplate);
        this.bind(this.updateDefaultContent);
        this.bind(this.handleAlgorithmCardCollapse);
        this.bind(this.handleAlgorithmCardExpand)
    },
    initializeWidgets: function() {
        var a = this;
        this.view.$(".select").select();
        this.view.$(".tooltip").tooltip();
        this.view.$(".algorithm-card-summary").each(function(b, c) {
            $(c).elmInit({
                expandText: Granite.I18n.get("Show Details"),
                collapseText: Granite.I18n.get("Hide Details"),
                expanded: (a.algorithms[b] && a.algorithms[b].expanded) || false
            }).on("collapsed", a.handleAlgorithmCardCollapse).on("expanded", a.handleAlgorithmCardExpand)
        })
    },
    addSubComponents: function() {
        this.addAlgorithmEditor();
        this.addTemplateEditor();
        this.addTemplatePreview()
    },
    addAlgorithmEditor: function() {
        this.addComponent(new ELM.Activities.AlgorithmEditor({
            el: $('<div class="new-algorithm container-fixed width-64 pos-tbl-0 z-index-9999 bg-f0f0f0"></div>').appendTo(document.body),
            recAlgoSessionId: this.model.getRecAlgoSessionId(),
            showAsSlidingPanel: true,
            component: this
        }), "algorithmEditor").on("algorithm:created", this.updateAlgorithm)
    },
    addTemplateEditor: function() {
        this.addComponent(new ELM.Activities.RecommendationTemplateEditor({
            el: $('<div class="new-template container-fixed width-64 pos-tbl-0 z-index-9999 bg-f0f0f0"></div>').appendTo(document.body),
            showAsSlidingPanel: true,
            component: this
        }), "templateEditor").on("template:created", this.updateTemplate)
    },
    addTemplatePreview: function() {
        this.addComponent(new ELM.Activities.RecsTemplatePreview(), "templatePreview")
    },
    loadTemplatePreview: function(a) {
        var c = this.components.templatePreview,
            b = $(a.currentTarget);
        c.showPreview(b)
    },
    triggerChooseAudienceEvent: function() {
        var a = {
            addAndCloseButtonLabel: Granite.I18n.get("Add to Activity"),
            selectedAudienceConsumer: this.updateTargetAudience
        };
        this.trigger("choose:audience", a)
    },
    updateTargetAudience: function(a) {
        this.show({
            silent: true
        });
        this.model.setTargetsRefAudiences([a])
    },
    removeAlgorithm: function(a) {
        var b = $(a.target).data("index");
        this.algorithms.splice(b, 1);
        this.model.removeAlgorithmByIndex(b)
    },
    showAlgorithmEditor: function(a) {
        var c, d, b = this;
        this.algorithmIndex = $(a.target).data("index");
        c = this.model.getAlgorithmDataByIndex(this.algorithmIndex);
        d = new this.components.algorithmEditor.Model({
            id: c.id
        });
        d.fetch({
            success: function() {
                ELM.Recommendation.Util.entityVariablesFactory.getItems({
                    callback: function(e) {
                        d.setEntityAttributes(e);
                        b.components.algorithmEditor.load(d).showAsSlider()
                    }
                })
            },
            error: function() {
                b.showErrorNotification({
                    message: Granite.I18n.get("Unable to edit criteria due to network error."),
                    heading: Granite.I18n.get("ERROR")
                })
            }
        })
    },
    updateAlgorithm: function(a) {
        this.model.updateElmReferences(a.toJSON());
        ELM.Util.showSuccessNotification({
            message: Granite.I18n.get("Criteria: {0} updated.", a.getTitle())
        })
    },
    handleAlgorithmCardExpand: function(a) {
        var b = $(a.target).closest(".algorithm-card").data("index");
        if(!this.algorithms[b]) {
            this.algorithms[b] = {}
        }
        this.algorithms[b].expanded = true
    },
    handleAlgorithmCardCollapse: function(a) {
        var b = $(a.target).closest(".algorithm-card").data("index");
        if(this.algorithms[b]) {
            this.algorithms[b].expanded = false
        }
    },
    removeTemplate: function(a) {
        var b = $(a.target).data("index");
        this.model.removeTemplateByIndex(b)
    },
    showTemplateEditor: function(a) {
        var d, c, b = this;
        this.templateIndex = $(a.target).data("index");
        d = this.model.getTemplateDataByIndex(this.templateIndex);
        d.name = d.name || d["dc:title"];
        d.offerThumbnailUrl = d.offerThumbnailUrl || d.thumbnailUrl;
        d.lastModified = new Date().getTime();
        c = new this.components.templateEditor.Model(d);
        c.fetchTemplateContent().done(function() {
            ELM.Recommendation.Util.getAllEntityVariables({
                success: function(e) {
                    c.setDisplayVariables(e);
                    b.components.templateEditor.load(c).showAsSlider()
                },
                error: function(e) {
                    ELM.Util.showErrorNotification({
                        message: e,
                        heading: Granite.I18n.get("ERROR")
                    })
                }
            })
        }).fail(function() {
            b.showErrorNotification({
                message: Granite.I18n.get("Unable to edit template due to network error."),
                heading: Granite.I18n.get("ERROR")
            })
        })
    },
    triggerShowTemplatePicker: function() {
        this.trigger("show:templatePicker")
    },
    triggerShowAlgorithmPicker: function() {
        var a = {};
        a[ELM.RECOMMENDATION_PARAM.ENTITY_ID] = this.model.getEntityIdRequired();
        a[ELM.RECOMMENDATION_PARAM.CATEGORY_ID] = this.model.getCategoryIdRequired();
        this.trigger("show:algorithmPicker", {
            recommendationParams: a,
            recommendationGlobalConfig: this.model.getRecommendationGlobalConfig()
        })
    },
    triggerShowTemplateTestingModal: function() {
        this.trigger("show:templateTestingModal", false)
    },
    updateTemplate: function(a) {
        this.model.updateElmReferences(a.toJSON());
        ELM.Util.showSuccessNotification({
            message: Granite.I18n.get("Template updated successfully")
        })
    },
    showItemPicker: function() {
        var a = {};
        a[ELM.RECOMMENDATION_PARAM.ENTITY_ID] = this.model.getEntityIdRequired();
        a[ELM.RECOMMENDATION_PARAM.CATEGORY_ID] = this.model.getCategoryIdRequired();
        this.trigger("edit:recommendation", {
            recommendationParams: a,
            action: this.model.getAction()
        })
    },
    onComplete: function() {
        if(!this.hasValidDefaultContentPercentage) {
            this.showErrorNotification(Granite.I18n.get("Percentage for control experience should be a value between 0 and 99."));
            return false
        }
        return true
    },
    updateDefaultContent: function(a) {
        var b = $(a.currentTarget),
            c = parseInt(b.val());
        if(isNaN(c) || c < 0 || c > 99) {
            b.addClass("error");
            this.hasValidDefaultContentPercentage = false;
            return false
        }
        this.hasValidDefaultContentPercentage = true;
        b.removeClass("error");
        this.model.setDefaultContent(c)
    },
    showErrorNotification: function(a) {
        ELM.Util.showErrorNotification({
            message: a,
            heading: Granite.I18n.get("ERROR")
        })
    },
    isComplete: function() {
        return true
    }
});
ELM.Activities.RecommendationItemPicker = new Class({
    toString: "RecommendationItemPicker",
    extend: F.ModelComponent,
    View: F.View.extend({
        events: {}
    }),
    Model: ELM.Models.RecommendationItemPicker,
    construct: function(a) {
        this.initView(a.el);
        this.registerBinders();
        this.registerVars();
        this.registerListeners()
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.addSubComponents();
            this.initWidgets();
            this.model.setSingleSelectionMode(this.model.getSelectedTemplates().length > 1)
        })
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.RecommendationItemPicker,
            noRerender: true
        }).render()
    },
    initWidgets: function() {
        this.slidingPanel = new ELM.SlidingPanel({
            el: this.view.$el,
            visible: false
        });
        this.initWizard()
    },
    initWizard: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: "#recommendation-content-picker-wizard",
            component: this,
            onNextButtonClick: function() {
                a.nextStep()
            },
            onBackButtonClick: function() {
                a.prevStep()
            },
            onPageChanged: function() {
                a.handlePageChange()
            },
            onLeaving: function() {
                a.components.algorithmPicker.destroyIncompatibilityPopover();
                a.hideSlidingPanel();
                a.trigger("recommendation:itemPicker:closed")
            },
            onFinish: function() {
                a.components.algorithmPicker.destroyIncompatibilityPopover();
                a.hideSlidingPanel();
                a.trigger("recommendation:itemPicker:items:selected", a.model)
            }
        })
    },
    registerBinders: function() {
        this.bind(this.updateNextButtonState)
    },
    addSubComponents: function() {
        this.addAlgorithmPicker();
        this.addTemplatePicker()
    },
    registerVars: function() {
        this.curStep = 0;
        this.steps = [{
            name: "algorithm",
            component: "algorithmPicker"
        }, {
            name: "templatePicker",
            component: "templatePicker"
        }]
    },
    nextStep: function() {
        var a = (this.curStep === this.steps.length - 1);
        if(a) {
            return false
        }
        this.curStep++;
        this.model.setSingleSelectionMode(this.model.getSelectedAlgorithms().length > 1);
        this.showStep(this.curStep);
        return true
    },
    prevStep: function() {
        if(this.curStep < 1) {
            return
        }
        this.curStep--;
        this.model.setSingleSelectionMode(this.model.getSelectedTemplates().length > 1);
        this.showStep(this.curStep);
        return true
    },
    showStep: function(b) {
        var a = this.steps[b].component;
        this.components[a].show({
            model: this.model,
            silent: true
        });
        this.components[a].showMessage()
    },
    addAlgorithmPicker: function() {
        this.addComponent(new ELM.Activities.RecommendationAlgorithmPicker({
            recommendationParams: this.recommendationParams,
            recommendationGlobalConfig: this.recommendationGlobalConfig,
            el: this.view.$("#recommendation-algorithm-picker"),
            component: this
        }), "algorithmPicker").on("algorithmCount:changed", this.updateNextButtonState)
    },
    addTemplatePicker: function() {
        this.addComponent(new ELM.Activities.RecommendationTemplatePicker({
            el: this.view.$("#recommendation-template-picker"),
            component: this
        }), "templatePicker").on("templateCount:changed", this.updateNextButtonState)
    },
    handlePageChange: function() {
        var a = 0;
        if(this.wizard.pageNumber === 1) {
            a = this.model.getSelectedAlgorithms().length
        } else {
            a = this.model.getSelectedTemplates().length
        }
        this.updateNextButtonState(a)
    },
    updateNextButtonState: function(a) {
        a !== 0 ? this.wizard.$next.removeAttr("disabled") : this.wizard.$next.attr("disabled", "disabled")
    },
    show: function(a) {
        this.curStep = a.step || 0;
        this.recommendationParams = a.recommendationParams;
        this.recommendationGlobalConfig = a.recommendationGlobalConfig;
        this.load({
            pageType: a.pageType || "",
            industryType: a.industryType || "",
            selectedAlgorithms: a.selectedAlgorithms || [],
            selectedTemplates: a.selectedTemplates || [],
            recAlgoSessionId: a.recAlgoSessionId,
            action: a.action || ""
        });
        this.inherited(arguments);
        this.showStep(this.curStep);
        this.slidingPanel.show()
    },
    hideSlidingPanel: function() {
        this.slidingPanel.hide()
    }
});
ELM.Activities.RecommendationAlgorithmPicker = new Class({
    toString: "RecommendationAlgorithmPicker",
    extend: F.ModelComponent,
    Model: ELM.Models.RecommendationItemPicker,
    View: F.View.extend({
        events: {
            "selected .page-type": "fetchAlgorithmsByPageType",
            "selected .industry-type": "fetchAlgorithmsByIndustryType",
            "change #compatible-algorithms-input": "toggleCompatibleAlgorithms",
            "click #new-algorithm": "showAlgorithmEditor",
            "click .close-algorithm-picker": "closeAlgorithmPicker",
            "click .add-algorithms": "updateAlgorithms"
        }
    }),
    construct: function(a) {
        this.initView(a);
        this.registerVars(a);
        this.registerBinders();
        this.registerListeners();
        this.destroyIncompatibilityPopover()
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addSubComponents();
            this.bindScrollEventToScrollableArea();
            this.cacheSelectors();
            this.toggleCompatibilityFilter()
        })
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a.el,
            template: ELM.Activities.Templates.RecommendationAlgorithmPicker
        }).render()
    },
    cacheSelectors: function() {
        this.$compatibilityFilter = this.view.$(".compatibility-filter")
    },
    registerVars: function(a) {
        this.recommendationParams = a.recommendationParams;
        this.recommendationGlobalConfig = a.recommendationGlobalConfig;
        this.slidingPanelMode = a.slidingPanelMode || false
    },
    registerBinders: function() {
        this.bind(this.handleScroll);
        this.bind(this.searchAlgorithms);
        this.bind(this.handleAlgorithmSelected);
        this.bind(this.updateListAndShowPicker);
        this.bind(this.showAlgorithmEditor);
        this.bind(this.updateAlgorithmsAndHeader)
    },
    initWidgets: function() {
        if(this.slidingPanelMode && !this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
        this.view.$(".select").select()
    },
    addSubComponents: function() {
        this.addSearcher();
        this.addSorter();
        this.addAlgorithmList();
        this.addAlgorithmEditor()
    },
    addSearcher: function() {
        this.addComponent(new ELM.Searcher({
            el: this.view.$(".algorithm-search-placeholder")
        }), "searcher").on("search:changed", this.searchAlgorithms)
    },
    addSorter: function() {
        this.addComponent(new ELM.Sorter({
            el: this.view.$(".algorithm-sorter-placeholder"),
            model: {
                name: "algorithmSorter",
                ascending: false,
                options: [{
                    value: "jcr:title",
                    label: Granite.I18n.get("Name")
                }, {
                    value: "jcr:lastModified",
                    label: Granite.I18n.get("Date Modified"),
                    selected: true
                }]
            }
        }), "algorithmSorter")
    },
    addAlgorithmList: function() {
        this.addComponent(new ELM.Activities.RecommendationAlgorithmList({
            el: this.view.$("#algorithm-list"),
            defaultParams: {
                "filterQuery.algorithm": this.getAlgorithmFilteringParams()
            },
            visible: true,
            events: {
                "click .card-algorithm": "handleSelect"
            }
        }), "algorithmList").on("list:itemSelected", this.handleAlgorithmSelected).on("edit:algorithm", this.showAlgorithmEditor).on("collection:loaded", this.updateAlgorithmsAndHeader).on("create:algorithm", this.showAlgorithmEditor)
    },
    addAlgorithmEditor: function() {
        this.addComponent(new ELM.Activities.AlgorithmEditor({
            el: $('<div class="new-algorithm container-fixed width-64 pos-tbl-0 z-index-9999 bg-f0f0f0"></div>').appendTo(document.body),
            recAlgoSessionId: this.model.getRecAlgoSessionId(),
            component: this
        }), "algorithmEditor").on("algorithm:created", this.updateListAndShowPicker).on("algorithm-editor:closed", this.updateListAndShowPicker)
    },
    bindScrollEventToScrollableArea: function() {
        this.view.$(".scrollable").bind("scroll", this.handleScroll)
    },
    handleScroll: function(a) {
        this.components.algorithmList.handleScroll(a)
    },
    toggleCompatibilityFilter: function() {
        var a = this.recommendationGlobalConfig;
        if(this.recommendationParams[ELM.RECOMMENDATION_PARAM.ENTITY_ID] && this.recommendationParams[ELM.RECOMMENDATION_PARAM.CATEGORY_ID]) {
            this.$compatibilityFilter.addClass("hidden")
        } else {
            this.$compatibilityFilter.removeClass("hidden")
        }
        if(a.mboxVersion <= 55 && a.isTargetPageParamsDefined && !a.isAutoCreateGlobalMbox && !a.isRegionalMbox) {
            this.$compatibilityFilter.addClass("hidden")
        }
    },
    showMessage: function() {
        var a;
        if(!this.model.getSelectedAlgorithms().length || !this.model.getSelectedTemplates().length) {
            a = Granite.I18n.get("Running a recommendation requires at least one criteria & one design.") + " " + Granite.I18n.get("To start, select a criteria.")
        } else {
            if(this.isSingleSelectionMode()) {
                a = Granite.I18n.get("Since you have selected more than one design, please select one criteria.")
            } else {
                a = Granite.I18n.get("Since you have selected one design, please select one or more criteria.")
            }
        }
        setTimeout(function() {
            ELM.Util.showInfoNotification({
                message: a,
                heading: Granite.I18n.get("HELP"),
                className: ELM.Util.PANEL_MESSAGE_POSITION
            })
        }, 500)
    },
    isSingleSelectionMode: function() {
        return this.model.getSingleSelectionMode()
    },
    isEntityIdPresent: function() {
        return(this.recommendationParams && this.recommendationParams[ELM.RECOMMENDATION_PARAM.ENTITY_ID]) || false
    },
    isCategoryIdPresent: function() {
        return(this.recommendationParams && this.recommendationParams[ELM.RECOMMENDATION_PARAM.CATEGORY_ID]) || false
    },
    getAlgorithmFilteringParams: function() {
        var c = ["industryType=" + this.model.getIndustryType(), "pageTypes=" + this.model.getPageType(), "recAlgoSessionId=" + this.model.getRecAlgoSessionId()],
            a = this.isEntityIdPresent(),
            d = this.isCategoryIdPresent(),
            b = "child.configuration.key";
        if(this.isAlgorithmCompatibilityDisabled() || (a && d)) {
            return c.join(",")
        }
        if(a) {
            c.push(b + "!=" + ELM.Algorithm.key.CURRENT_CATEGORY)
        } else {
            if(d) {
                c.push(b + "!=" + ELM.Algorithm.key.CURRENT_ITEM)
            } else {
                c.push(b + "!=" + ELM.Algorithm.key.CURRENT_ITEM + "|" + ELM.Algorithm.key.CURRENT_CATEGORY)
            }
        }
        return c.join(",")
    },
    isAlgorithmCompatibilityDisabled: function() {
        return !this.model.getAlgorithmCompatibility()
    },
    updateAlgorithmsAndHeader: function(a) {
        this.updateAlgorithmPickerHeader(a.size());
        if(a.isEmpty()) {
            return
        }
        this.updateSelectedAlgorithms(a);
        if(this.isAlgorithmCompatibilityDisabled()) {
            this.updateNonCompatibleAlgorithms(a)
        }
        a.trigger("loaded", a)
    },
    updateSelectedAlgorithms: function(b) {
        var a = this.model.getSelectedAlgorithms(),
            c;
        _.each(a, function(e, d) {
            c = b.get(e.id);
            if(c) {
                a[d] = c.toJSON();
                c.setSelected(true)
            }
        })
    },
    updateNonCompatibleAlgorithms: function(a) {
        var b;
        _.each(a.models, function(c) {
            b = this.isAlgorithmCompatible(c);
            c.setCompatible(b)
        }, this)
    },
    isAlgorithmCompatible: function(a) {
        var b = a.getKey();
        if(this.$compatibilityFilter.is(":visible") && ((!this.isEntityIdPresent() && b === ELM.Algorithm.key.CURRENT_ITEM) || (!this.isCategoryIdPresent() && b === ELM.Algorithm.key.CURRENT_CATEGORY))) {
            return false
        }
        return true
    },
    updateAlgorithmPickerHeader: function(a) {
        this.view.$(".algorithm-picker-header").text(Granite.I18n.get("Select Criteria ({0})", [a || 0]))
    },
    showAlgorithmEditor: function(c) {
        var d = this.model.getIndustryType() || ELM.industryType,
            b = this.model.getPageType(),
            e = (c && c.model) || new this.components.algorithmEditor.Model({
                    isReuseable: true
                }),
            a;
        if(!e.getReference() && d) {
            e.setPageTypes([], true);
            e.setIndustryType(d, true);
            if(ELM.INDUSTRY_PAGE_MAP[d].indexOf(b) !== -1) {
                e.setPageTypes([b], true)
            }
        }
        ELM.Recommendation.Util.entityVariablesFactory.getItems({
            callback: function(f) {
                e.setEntityAttributes(f);
                this.components.algorithmEditor.show({
                    model: e,
                    silent: true
                })
            }.bind(this)
        })
    },
    updateListAndShowPicker: function(b, a) {
        if(b) {
            F.trigger(ELM.evtNamespace + ":algorithm-updated", b.toJSON());
            ELM.Util.showSuccessNotification({
                message: a ? Granite.I18n.get("{0} has been saved.", b.getTitle()) : Granite.I18n.get("{0} has been updated.", b.getTitle()),
                className: ELM.Util.PANEL_MESSAGE_POSITION
            })
        }
        this.components.algorithmList.updateList()
    },
    fetchAlgorithmsByPageType: function(a) {
        var b = a.selected;
        if(this.model.getPageType() === b) {
            return
        }
        this.model.setPageType(b);
        this.searchAlgorithms(this.getAlgorithmFilteringParams(), "filterQuery.algorithm")
    },
    fetchAlgorithmsByIndustryType: function(a) {
        var b = a.selected;
        if(this.model.getIndustryType() === b) {
            return
        }
        this.model.setIndustryType(b)
    },
    toggleCompatibleAlgorithms: function(a) {
        this.model.setAlgorithmCompatibility(a.target.checked);
        this.searchAlgorithms(this.getAlgorithmFilteringParams(), "filterQuery.algorithm")
    },
    searchAlgorithms: function(b, a) {
        this.components.algorithmList.search(b, a)
    },
    handleAlgorithmSelected: function(b) {
        var a = b.model,
            c = b.listItem,
            d;
        if(this.model.getSingleSelectionMode()) {
            d = this.handleSingleSelectionMode(c, a)
        } else {
            d = this.handleMultipleSelectionMode(c, a)
        }
        this.model.setSelectedAlgorithms(d);
        this.trigger("algorithmCount:changed", d.length);
        this.view.$(".algorithm-selected-count").text(d.length);
        this.view.$(".toolbar .add-algorithms").attr("disabled", d.length === 0)
    },
    handleSingleSelectionMode: function(b, a) {
        this.view.$el.find(".selected").removeClass("selected");
        b.addClass("selected");
        return [a.toJSON()]
    },
    handleMultipleSelectionMode: function(b, a) {
        var c = this.model.getSelectedAlgorithms(),
            d = a.getId();
        b.toggleClass("selected");
        if(b.hasClass("selected")) {
            c.push(a.toJSON())
        } else {
            c = _.reject(c, function(e) {
                return e.id === d
            })
        }
        return c
    },
    showAsSlider: function(a) {
        this.recommendationParams = a.recommendationParams;
        this.recommendationGlobalConfig = a.recommendationGlobalConfig;
        this.load({
            pageType: a.pageType || "",
            industryType: a.industryType || "",
            selectedAlgorithms: a.selectedAlgorithms || [],
            selectedTemplates: a.selectedTemplates || [],
            singleSelectionMode: a.singleSelectionMode || false,
            recAlgoSessionId: a.recAlgoSessionId,
            action: a.action || ""
        });
        this.show({
            silent: true
        });
        this.slidingPanel.show()
    },
    closeAlgorithmPicker: function() {
        this.destroyIncompatibilityPopover();
        this.slidingPanel.hide();
        this.trigger("algorithmPicker:closed")
    },
    updateAlgorithms: function() {
        this.destroyIncompatibilityPopover();
        this.slidingPanel.hide();
        this.trigger("algorithms:updated", this.model)
    },
    destroyIncompatibilityPopover: function() {
        $("#incompatible-algorithm-select").remove()
    }
});
ELM.Activities.RecommendationTemplatePicker = new Class({
    toString: "RecommendationTemplatePicker",
    extend: F.ModelComponent,
    Model: ELM.Models.RecommendationItemPicker,
    View: F.View.extend({
        events: {
            "click #new-template": "showTemplateEditor",
            "click .close-template-picker": "closeTemplatePicker",
            "click .add-templates": "updateTemplates"
        }
    }),
    getDefaultParamsForRecsTemplate: function() {
        return {
            path: "/content/dam/mac/" + ELM.client,
            orderby: "@jcr:content/renditions/original/jcr:content/jcr:lastModified",
            "orderby.sort": "desc",
            property: "jcr:primaryType",
            "property.value": "dam:Asset",
            "p.nodedepth": "3",
            "p.hits": "full",
            "p.limit": "-1",
            "2_property": "jcr:content/metadata/dc:format",
            "2_property.value": "text/html",
            "3_property": "jcr:content/related/targetAnonymousOffer",
            "3_property.value": "true",
            "3_property.operation": "not",
            "4_property": "jcr:content/related/targetGlobalOffer",
            "4_property.value": "true",
            "4_property.operation": "not",
            "5_property": "jcr:content/related/targetRecsTemplate",
            "5_property.value": "true"
        }
    },
    construct: function(a) {
        this.initView(a);
        this.registerVars(a);
        this.registerBinders();
        this.registerListeners();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a.el,
            template: ELM.Activities.Templates.RecommendationTemplatePicker,
            noRerender: true
        }).render()
    },
    registerVars: function(a) {
        this.recsTemplateQueryParams = this.getDefaultParamsForRecsTemplate();
        this.slidingPanelMode = a.slidingPanelMode
    },
    registerBinders: function() {
        this.bind(this.searchTemplates);
        this.bind(this.showTemplateEditor);
        this.bind(this.addTemplateAndShowPicker);
        this.bind(this.handleTemplateSelected);
        this.bind(this.updateTemplatesAndHeader);
        this.bind(this.sortTemplates)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.addSubComponents();
            this.initWidgets()
        })
    },
    registerGlobalTriggers: function() {
        F.on("templateSorter:change", this.sortTemplates)
    },
    unregisterGlobalTriggers: function() {
        F.off("templateSorter:change", this.sortTemplates)
    },
    initWidgets: function() {
        if(this.slidingPanelMode && !this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
    },
    addSubComponents: function() {
        this.addSearcher();
        this.addSorter();
        this.addTemplateList();
        this.addTemplateEditor()
    },
    addSearcher: function() {
        this.addComponent(new ELM.Searcher({
            el: this.view.$(".template-search-placeholder")
        }), "searcher").on("search:changed", this.searchTemplates)
    },
    addSorter: function() {
        this.addComponent(new ELM.Sorter({
            el: this.view.$(".template-sorter-placeholder"),
            model: {
                name: "templateSorter",
                ascending: false,
                options: [{
                    value: "@fn:lower-case(jcr:content/metadata/dc:title)",
                    label: Granite.I18n.get("Name")
                }, {
                    value: "@jcr:content/renditions/original/jcr:content/jcr:lastModified",
                    label: Granite.I18n.get("Date Modified"),
                    selected: true
                }]
            }
        }), "templateSorter")
    },
    addTemplateList: function() {
        this.addComponent(new ELM.Activities.RecommendationTemplateList({
            el: this.view.$("#template-list"),
            visible: true,
            defaultParams: this.recsTemplateQueryParams,
            events: {
                "click article": "handleSelect"
            }
        }), "templateList").on("edit:template", this.showTemplateEditor).on("collection:loaded", this.updateTemplatesAndHeader).on("list:itemSelected", this.handleTemplateSelected).on("create:template", this.showTemplateEditor)
    },
    addTemplateEditor: function() {
        this.addComponent(new ELM.Activities.RecommendationTemplateEditor({
            el: $('<div class="new-template container-fixed width-64 pos-tbl-0 z-index-9999 bg-f0f0f0"></div>').appendTo(document.body),
            component: this
        }), "templateEditor").on("template:created", this.addTemplateAndShowPicker)
    },
    updateTemplatesAndHeader: function(c) {
        var b = this.model.getSelectedTemplates(),
            a = _.pluck(b, "path"),
            e = this.components.templateList.view.subViews,
            d;
        _.each(c.models, function(g, f) {
            d = a.indexOf(g.getPath());
            if(d !== -1) {
                g.setSelected(true);
                e[f].$el.find("img").load(function(h) {
                    this.updateThumbnail($(h.target).closest(".card-template"))
                }.bind(this));
                b[d] = g.toJSON()
            }
        }, this);
        this.updateTemplatePickerHeader(c.length)
    },
    updateTemplatePickerHeader: function(a) {
        this.view.$(".template-picker-header").text(Granite.I18n.get("Select Design ({0})", [a || 0]))
    },
    showTemplateEditor: function(a) {
        var c = this,
            b = (a && a.model) || new this.components.templateEditor.Model();
        ELM.Recommendation.Util.getAllEntityVariables({
            success: function(d) {
                b.setDisplayVariables(d);
                c.components.templateEditor.show({
                    model: b,
                    silent: true
                })
            },
            error: function(d) {
                ELM.Util.showErrorNotification({
                    message: d,
                    heading: Granite.I18n.get("ERROR"),
                    className: ELM.Util.PANEL_MESSAGE_POSITION
                })
            }
        })
    },
    addTemplateAndShowPicker: function(a) {
        if(a) {
            F.trigger(ELM.evtNamespace + ":template-updated", a.toJSON());
            ELM.Util.showSuccessNotification({
                message: a.getName() + (a.isNew() ? Granite.I18n.get(" has been saved.") : Granite.I18n.get(" has been updated.")),
                className: ELM.Util.PANEL_MESSAGE_POSITION
            })
        }
        this.components.templateList.updateList(this.recsTemplateQueryParams)
    },
    showMessage: function() {
        var a;
        if(this.isSingleSelectionMode()) {
            a = Granite.I18n.get("Since you have selected more than one criteria, please select one design.")
        } else {
            a = Granite.I18n.get("Since you have selected one criteria, please select one or more designs.")
        }
        setTimeout(function() {
            ELM.Util.showInfoNotification({
                message: a,
                heading: Granite.I18n.get("HELP"),
                className: ELM.Util.PANEL_MESSAGE_POSITION
            })
        }, 500)
    },
    isSingleSelectionMode: function() {
        return this.model.getSingleSelectionMode()
    },
    addSearchParams: function(b, a) {
        _.extend(b, {
            "0_group.p.or": "true",
            "0_group.0_property": "fn:lower-case(jcr:content/cq:name)",
            "0_group.0_property.value": a,
            "0_group.0_property.operation": "like",
            "0_group.1_property": "fn:lower-case(jcr:content/metadata/dc:title)",
            "0_group.1_property.value": a,
            "0_group.1_property.operation": "like"
        })
    },
    removeSearchParams: function(a) {
        delete a["0_group.p.or"];
        delete a["0_group.0_property"];
        delete a["0_group.0_property.value"];
        delete a["0_group.0_property.operation"];
        delete a["0_group.1_property"];
        delete a["0_group.1_property.value"];
        delete a["0_group.1_property.operation"]
    },
    searchTemplates: function(b, a) {
        if(b) {
            b = "%" + b.toLowerCase() + "%";
            this.addSearchParams(this.recsTemplateQueryParams, b)
        } else {
            this.removeSearchParams(this.recsTemplateQueryParams)
        }
        this.components.templateList.updateList(this.recsTemplateQueryParams)
    },
    sortTemplates: function(b, a) {
        this.recsTemplateQueryParams.orderby = b;
        this.recsTemplateQueryParams["orderby.sort"] = (a === "DESCENDING") ? "desc" : "asc";
        this.components.templateList.updateList(this.recsTemplateQueryParams);
        return false
    },
    updateThumbnail: function(c) {
        var b = c.find("img"),
            e, f, d, a;
        if(b.length == 2 || b[0].className.indexOf("default-template-thumbnail") > -1) {
            return
        }
        a = c.css("background-color");
        if(!a) {
            return
        }
        e = b[0];
        d = this.generateImageWithBackgroundColor(e, a);
        f = $('<img class="' + e.className + ' multiplied" width="' + e.naturalWidth + '" height="' + e.naturalHeight + '" src="' + d + '"/>').insertBefore(e);
        f.width(c.width() - 2)
    },
    generateImageWithBackgroundColor: function(e, g) {
        var b = e.naturalWidth,
            m = e.naturalHeight,
            d = $('<canvas width="' + b + '" height="' + m + '"></canvas>')[0],
            c = d.getContext("2d"),
            k, a, j;
        c.drawImage(e, 0, 0, b, m);
        a = c.getImageData(0, 0, b, m);
        j = a.data;
        g = $.map(g.match(/(\d+)/g), function(i) {
            return i / 255
        });
        for(var h = 0, f = j.length; h < f; h += 4) {
            j[h] *= g[0];
            j[h + 1] *= g[1];
            j[h + 2] *= g[2]
        }
        c.putImageData(a, 0, 0);
        return d.toDataURL("image/png")
    },
    handleTemplateSelected: function(c) {
        var b = c.model,
            d = c.listItem.find(".card-template"),
            a;
        b.unsetTemplateContent();
        if(this.model.getSingleSelectionMode()) {
            a = this.handleSingleSelectionMode(d, b)
        } else {
            a = this.handleMultipleSelectionMode(d, b)
        }
        this.updateThumbnail(d);
        this.model.setSelectedTemplates(a);
        this.trigger("templateCount:changed", a.length);
        this.view.$(".template-selected-count").text(a.length);
        this.view.$(".toolbar .add-templates").attr("disabled", a.length === 0)
    },
    handleSingleSelectionMode: function(b, a) {
        this.view.$el.find(".selected").removeClass("selected");
        b.addClass("selected");
        return [a.toJSON()]
    },
    handleMultipleSelectionMode: function(c, b) {
        var a = this.model.getSelectedTemplates(),
            d = b.getPath();
        c.toggleClass("selected");
        if(c.hasClass("selected")) {
            a.push(b.toJSON())
        } else {
            a = _.reject(a, function(e) {
                return e.path === d
            })
        }
        return a
    },
    showAsSlider: function(a) {
        this.load({
            selectedAlgorithms: a.selectedAlgorithms || [],
            selectedTemplates: a.selectedTemplates || [],
            singleSelectionMode: a.singleSelectionMode || false,
            action: a.action || ""
        });
        this.show({
            silent: true
        });
        this.slidingPanel.show()
    },
    closeTemplatePicker: function() {
        this.removeSearchParams(this.recsTemplateQueryParams);
        this.slidingPanel.hide();
        this.trigger("templatePicker:closed")
    },
    updateTemplates: function() {
        this.removeSearchParams(this.recsTemplateQueryParams);
        this.slidingPanel.hide();
        this.trigger("tempates:updated", this.model)
    }
});
ELM.Activities.RecommendationAlgorithmList = new Class({
    toString: "RecommendationAlgorithmList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.Algorithms,
    ItemView: F.ListComponent.prototype.ItemView.extend({
        tagName: "article",
        className: function() {
            var a, b;
            if(this.model instanceof Backbone.Model) {
                a = "card-algorithm";
                b = this.model.getCompatible();
                if(this.model.getSelected()) {
                    a += " selected"
                }
                if(typeof b !== "undefined" && !b) {
                    a += " non-compatible"
                }
            } else {
                a = "listItem"
            }
            return a
        },
        events: {
            "click .edit-algorithm": "editAlgorithm",
            "click .delete-algorithm": "deleteAlgorithm",
            "click .copy-algorithm": "copyAlgorithm",
            "click #create-new-algorithm": "triggerCreateAlgorithm"
        }
    }),
    ListView: F.ListComponent.prototype.ListView.extend({
        tagName: "div"
    }),
    ItemTemplate: function() {
        return ELM.Activities.Templates.AlgorithmCard.apply(this, arguments)
    },
    NoResultsTemplate: function() {
        var c = this.component.parent,
            a = c.model,
            b;
        b = {
            search: this.component.params.search,
            pageType: a.getPageType(),
            industryType: a.getIndustryType(),
            compatible: !(c.isEntityIdPresent() && c.isCategoryIdPresent()) && a.getAlgorithmCompatibility()
        };
        return ELM.Activities.Templates.RecsAlgorithm.NoSearchResultAlgorithm.apply(this, [b])
    },
    construct: function(a) {
        this.registerVars();
        this.registerBinders();
        this.registerListeners();
        this.registerGlobalTriggers();
        this.initPopover()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerVars: function() {
        this.nonCompatibleSelected = false;
        this.fetchParams = {};
        this.confirmationDialog = new CUI.Modal({
            element: $('<div class="-e2e-deleteAlgorithmDialog pos-l-34-imp"></div>').appendTo(document.body),
            visible: false,
            type: "notice"
        })
    },
    registerBinders: function() {
        this.bind(this.sortAlgorithms);
        this.bind(this.fillAvailableSpace);
        this.bind(this.fetchMoreAlgorithms);
        this.bind(this.hidePopover);
        this.bind(this.hidePopoverAndSelectAlgorithm)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.cacheSelectors();
            this.fillAvailableSpace();
            this.applyCardFlowLayout()
        })
    },
    registerGlobalTriggers: function() {
        F.on("algorithmSorter:change", this.sortAlgorithms);
        F.on("window:resize", this.fillAvailableSpace)
    },
    unregisterGlobalTriggers: function() {
        F.off("algorithmSorter:changed", this.sortAlgorithms);
        F.off("window:resize", this.fillAvailableSpace)
    },
    initPopover: function() {
        this.popover = $("#incompatible-algorithm-select").popover().data("popover");
        this.popover.$element.on("click", ".select-incompatible-algorithm", this.hidePopoverAndSelectAlgorithm);
        this.popover.$element.on("click", ".cancel-incompatible-algorithm", this.hidePopover)
    },
    cacheSelectors: function() {
        this.$algorithmList = this.view.$el
    },
    sortAlgorithms: function(b, a) {
        this.fetchParams.sortBy = b;
        this.fetchParams.sortOrder = a;
        this.updateList()
    },
    search: function(b, a) {
        this.fetchParams[a] = b;
        this.updateList()
    },
    updateList: function() {
        this.fetch(this.fetchParams)
    },
    handleSelect: function(c) {
        var a = $(c.target),
            b = $(c.currentTarget);
        if(a.hasClass("non-compatible-popover-link")) {
            if(this.popoverShown && this.isPopoverVisible()) {
                this.popoverShown = false;
                a.click()
            }
            return
        }
        if(!b.hasClass("selected") && b.hasClass("non-compatible") && !this.nonCompatibleSelected) {
            c.stopImmediatePropagation();
            this.popoverShown = true;
            this.$nonCompatibleAlgorithm = b;
            this.updatePopoverText(this.getModelFromLi(b).getKey());
            b.find(".non-compatible-popover-link").click();
            return
        }
        this.inherited(arguments)
    },
    hidePopover: function() {
        this.nonCompatibleSelected = false;
        this.popover.hide()
    },
    hidePopoverAndSelectAlgorithm: function() {
        this.nonCompatibleSelected = true;
        this.$nonCompatibleAlgorithm.click();
        this.hidePopover()
    },
    isPopoverVisible: function() {
        return this.popover.$element.is(":visible")
    },
    editAlgorithm: function(a) {
        a.stopPropagation();
        var b = $(a.target).data("algorithm-id"),
            c = this.collection.get(b);
        this.trigger("edit:algorithm", {
            model: c
        })
    },
    deleteAlgorithm: function(a) {
        a.stopPropagation();
        var b = $(a.target).data("algorithm-id"),
            d = this.collection.get(b),
            c = this;
        ELM.Util.showConfirmationDialog(this.confirmationDialog, {
            heading: Granite.I18n.get("Confirm delete"),
            message: "<p>" + Granite.I18n.get('Are you sure you want to delete the criteria "{0}"?', ELM.Util.escape(d.getTitle())) + "</p><p>" + Granite.I18n.get("Deleted criteria cannot be recovered.") + "</p>",
            label: Granite.I18n.get("Delete"),
            callback: function() {
                d.destroy({
                    wait: true,
                    success: function(e) {
                        c.updateList();
                        ELM.Util.showSuccessNotification({
                            message: Granite.I18n.get("{0} has been deleted.", e.getTitle()),
                            className: ELM.Util.PANEL_MESSAGE_POSITION
                        });
                        F.trigger(ELM.evtNamespace + ":algorithm-deleted", d.getReference())
                    },
                    error: function(e, f) {
                        ELM.Util.showErrorNotification({
                            message: JSON.parse(f.responseText)["error.message"],
                            className: ELM.Util.PANEL_MESSAGE_POSITION
                        })
                    }
                })
            }
        })
    },
    copyAlgorithm: function(a) {
        a.stopPropagation();
        var b = $(a.target).data("algorithm-id"),
            d = this.collection.get(b),
            c = d.createCopy();
        this.trigger("edit:algorithm", {
            model: c
        })
    },
    triggerCreateAlgorithm: function(a) {
        a.stopPropagation();
        this.trigger("create:algorithm")
    },
    fetchMoreAlgorithms: function() {
        var b = this.view.$el.closest(".scrollable")[0],
            a = (b.scrollHeight - b.offsetHeight) < 100;
        if(a) {
            this.fetchAvailablePage()
        }
    },
    fillAvailableSpace: function() {
        if(this.loading || !this.view.$el.is(":visible") || this.collection.isEmpty()) {
            return
        }
        this.fetchMoreAlgorithms()
    },
    applyCardFlowLayout: function() {
        var a = 5;
        if(this.collection.length > a) {
            this.view.$el.addClass("card-flow-container-4-0")
        } else {
            this.view.$el.removeClass("card-flow-container-4-0")
        }
    },
    updatePopoverText: function(a) {
        var b;
        switch(a) {
            case ELM.Algorithm.key.CURRENT_ITEM:
                b = Granite.I18n.get("An entity.id is required for this criteria to work properly.");
                break;
            case ELM.Algorithm.key.CURRENT_CATEGORY:
                b = Granite.I18n.get("An entity.categoryId is required for this criteria to work properly.");
                break;
            default:
                b = Granite.I18n.get("Your settings may not support this criteria.");
                break
        }
        b = b + " " + Granite.I18n.get("Use it anyway?");
        $("#incompatible-algorithm-select .message").text(b)
    }
});
ELM.Activities.RecommendationTemplateList = new Class({
    toString: "RecommendationTemplateList",
    extend: F.ListComponent,
    Collection: ELM.Collections.RecsTemplates,
    ItemView: F.ListComponent.prototype.ItemView.extend({
        tagName: "article",
        events: {
            "click .edit-template": "editTemplate",
            "click .delete-template": "deleteTemplate",
            "click .copy-template": "copyTemplate",
            "click #create-new-template": "triggerCreateTemplate"
        }
    }),
    ListView: F.ListComponent.prototype.ListView.extend({
        tagName: "div"
    }),
    ItemTemplate: function() {
        return ELM.Activities.Templates.TemplateCard.apply(this, arguments)
    },
    ListEmptyTemplate: function() {
        return ELM.Activities.Templates.RecsTemplates.NoSavedTemplate.apply(this, arguments)
    },
    NoResultsTemplate: function() {
        var a = this.component.parent.components.searcher.view.$(".searchField").val();
        return ELM.Activities.Templates.RecsTemplates.NoSearchResultTemplate.apply(this, [{
            search: a
        }])
    },
    construct: function() {
        this.registerListeners();
        this.confirmationDialog = new CUI.Modal({
            element: $('<div class="-e2e-deleteTemplateDialog pos-l-34-imp"></div>').appendTo(document.body),
            visible: false,
            type: "notice"
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.applyCardFlowLayout()
        })
    },
    updateList: function(a) {
        this.fetch(a)
    },
    editTemplate: function(a) {
        var b = $(a.target).data("template-path");
        a.stopPropagation();
        this.trigger("edit:template", {
            model: this.getTemplateModel(b, true)
        })
    },
    deleteTemplate: function(a) {
        var d = $(a.target).data("template-path"),
            c = this.getTemplateModel(d, false),
            b = this;
        a.stopPropagation();
        ELM.Util.showConfirmationDialog(this.confirmationDialog, {
            heading: Granite.I18n.get("Confirm delete"),
            message: "<p>" + Granite.I18n.get('Are you sure you want to delete the design "{0}"?', c.getName()) + "</p><p>" + Granite.I18n.get("Deleted designs cannot be recovered.") + "</p>",
            label: Granite.I18n.get("Delete"),
            callback: function() {
                c.deleteTemplate(function() {
                    b.updateList(b.parent.recsTemplateQueryParam);
                    ELM.Util.showSuccessNotification({
                        message: Granite.I18n.get("{0} has been deleted.", c.getName()),
                        className: ELM.Util.PANEL_MESSAGE_POSITION
                    });
                    F.trigger(ELM.evtNamespace + ":template-deleted", c.getPath())
                }, function(e) {
                    e = Granite.I18n.get("Failed to delete asset.") + " " + e;
                    ELM.Util.showErrorNotification({
                        message: e,
                        className: ELM.Util.PANEL_MESSAGE_POSITION
                    })
                })
            }
        })
    },
    copyTemplate: function(a) {
        var d = $(a.target).data("template-path"),
            c = this.getTemplateModel(d, true),
            b = _.extend({}, c.toJSON(), {
                offerThumbnailUrl: "",
                path: "",
                name: "",
                lastModified: ""
            });
        a.stopPropagation();
        this.trigger("edit:template", {
            model: new ELM.Models.RecsTemplate(b)
        })
    },
    triggerCreateTemplate: function(a) {
        a.stopPropagation();
        this.trigger("create:template")
    },
    handleSelect: function() {
        if(this.collection.isEmpty()) {
            return
        }
        this.inherited(arguments)
    },
    getTemplateModel: function(d, a) {
        var c = _.filter(this.collection.models, function(e) {
                return e.getPath() === d
            }),
            b = c[0];
        if(a) {
            this.contentRequest({
                url: b.getPath(),
                async: false
            }).done(function(e) {
                b.setTemplateContent(e)
            })
        }
        return b
    },
    contentRequest: function(a) {
        return ELM.Util.sendGETRequest(a)
    },
    applyCardFlowLayout: function() {
        var a = 5;
        if(this.collection.length > a) {
            this.view.$el.addClass("card-flow-container-4-0")
        } else {
            this.view.$el.removeClass("card-flow-container-4-0")
        }
    }
});
ELM.Activities.RecommendationDetails = new Class({
    toString: "RecommendationDetails",
    extend: ELM.Activities.Details,
    handleRenderComplete: function() {
        this.inherited(arguments);
        this.fetchRecsClientDetails()
    },
    fetchRecsClientDetails: function() {
        var a = this;
        new ELM.Models.RecsClientDetails().fetch({
            success: function(b) {
                a.recsHost = b.getRecsHost();
                a.clientToken = b.getClientToken();
                a.updateDataDownloadLink()
            }
        })
    },
    updateToolbar: function() {
        this.inherited(arguments);
        this.fetchRecsClientDetails()
    },
    updateDataDownloadLink: function() {
        var a = this.recsHost + "/rest/?action=recommendation.file.download&id=" + this.model.getRecId() + "&client=" + ELM.tntClientCode + "&clientToken=" + this.clientToken;
        this.view.$(".download-data-link").attr("href", a)
    },
    registerGlobalTriggers: function() {
        F.on("recommendation:activityStatus:updated", this.updateActivityDetails);
        if(ELM.isActivityCollisionEnabled) {
            F.on("recommendation:collision:noData", this.updateRetrievingCollisionData)
        }
    },
    unRegisterGlobalTriggers: function() {
        F.off("recommendation:activityStatus:updated", this.updateActivityDetails);
        F.off("recommendation:collision:noData", this.updateRetrievingCollisionData)
    },
    addOverview: function() {
        this.addComponent(new ELM.Activities.RecommendationOverview({
            el: this.view.$(".activityOverview"),
            activityModel: this.model
        }), "activityOverview")
    },
    addReport: function() {
        var a = this.getReportModelFromActivityData();
        if(a.reportSuite) {
            this.addComponent(new ELM.Activities.ReportsA4Recs({
                el: this.view.$(".activityReports"),
                model: a
            }), "activityReport")
        } else {
            this.addComponent(new ELM.Activities.ReportsRecommendation({
                el: this.view.$(".activityReports"),
                model: a
            }), "activityReport")
        }
    },
    getReportModelFromActivityData: function() {
        var b = this.model.getMetrics(),
            c = this.model.getExperiences(),
            a = this.model.getControlExperienceId();
        return {
            id: this.model.getId(),
            activityType: this.model.getActivityType(),
            startDate: this.model.getStartDate() || this.model.getActivatedDate(),
            endDate: this.model.getEndDate() || this.model.getDeactivatedDate(),
            experiences: c,
            controlExperience: c[a],
            controlExperienceId: a,
            metrics: b,
            successMetric: b[0],
            reportingAudiences: this.model.getReportingAudiences(),
            extremeOrders: true,
            calculationMode: "cumulative",
            reportSuite: this.model.getReportSuite(),
            targetId: this.model.getTargetId()
        }
    },
    updateModelBeforeRerender: function() {},
    updateWinnerExperience: function() {}
});
ELM.Activities.RecommendationSummary = new Class({
    toString: "RecommendationSummary",
    extend: ELM.Activities.Summary,
    View: F.View.extend({
        events: {
            "click .template-preview-link": "loadTemplatePreview"
        }
    }),
    Template: function() {
        return ELM.Activities.Templates.RecommendationTarget.apply(this, arguments)
    },
    initSubViews: function() {
        this.initializeAlgorithmCards();
        this.addTemplatePreview();
        this.initializeTooltip();
        this.inherited(arguments)
    },
    initializeAlgorithmCards: function() {
        this.view.$(".algorithm-card-summary").elmInit({
            expandText: Granite.I18n.get("Show Details"),
            collapseText: Granite.I18n.get("Hide Details"),
            expanded: false
        })
    },
    addTemplatePreview: function() {
        this.addComponent(new ELM.Activities.RecsTemplatePreview(), "templatePreview")
    },
    initializeTooltip: function() {
        this.view.$(".tooltip").tooltip()
    },
    loadTemplatePreview: function(a) {
        var c = this.components.templatePreview,
            b = $(a.currentTarget);
        c.showPreview(b)
    }
});
ELM.Activities.AlgorithmEditor = new Class({
    toString: "AlgorithmEditor",
    extend: F.ModelComponent,
    Model: ELM.Models.Algorithm,
    View: F.View.extend({
        events: {
            "change .save-to-library": "updateReusability",
            "click .close-algorithm-editor": "closeAlgorithmEditor",
            "click .create-algorithm": "createAndCloseAlgorithmEditor"
        }
    }),
    options: {
        visible: false
    },
    construct: function(a) {
        this.initView(a.el);
        this.registerListeners();
        this.registerVars(a);
        this.registerBinders()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.AlgorithmEditor,
            noRerender: true
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.addSubComponents();
            this.initWidgets()
        })
    },
    registerVars: function(a) {
        this.recAlgoSessionId = a.recAlgoSessionId;
        this.slidingPanelMode = a.showAsSlidingPanel || false
    },
    registerBinders: function() {
        this.bind(this.updateTitle);
        this.bind(this.updateMetaData);
        this.bind(this.updateDetails);
        this.bind(this.updateConfigurationAndDetails);
        this.bind(this.updateDataSource)
    },
    initWidgets: function() {
        if(this.slidingPanelMode && !this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
    },
    addSubComponents: function() {
        this.addAlgorithmMetadata();
        this.addAlgorithmConfiguration();
        this.addAlgorithmDetails();
        this.addAlgorithmCard();
        this.addEditableLabel()
    },
    addAlgorithmMetadata: function() {
        this.addComponent(new ELM.Activities.AlgorithmMetadata({
            el: this.view.$("#algorithm-metadata"),
            model: {
                "jcr:description": this.model.getDescription(),
                industryType: this.model.getIndustryType(),
                pageTypes: this.model.getPageTypes()
            },
            visible: true
        }), "algorithmMetadata").on("algorithmMetadata:changed", this.updateMetaData)
    },
    addAlgorithmConfiguration: function() {
        this.addComponent(new ELM.Activities.AlgorithmConfiguration({
            el: this.view.$("#algorithm-configuration"),
            model: {
                configuration: this.model.getConfiguration(),
                details: this.model.getDetails()
            },
            visible: true
        }), "algorithmConfiguration").on("algorithmConfiguration:changed", this.updateConfigurationAndDetails)
    },
    addAlgorithmDetails: function() {
        this.addComponent(new ELM.Activities.AlgorithmDetails({
            el: this.view.$("#algorithm-details"),
            model: {
                configuration: this.model.getConfiguration(),
                details: this.model.getDetails(),
                entityAttributes: this.model.getEntityAttributes()
            },
            visible: true
        }), "algorithmDetails").on("algorithmDetails:changed", this.updateDetails).on("dataSource:changed", this.updateDataSource)
    },
    addAlgorithmCard: function() {
        this.addComponent(new ELM.Activities.AlgorithmCard({
            el: this.view.$("#algorithm-card"),
            model: this.model,
            visible: true
        }), "algorithmCard")
    },
    addEditableLabel: function() {
        this.addComponent(new ELM.EditableLabel({
            el: this.view.$(".algorithm-title"),
            model: {
                title: this.model.getTitle(),
                placeholder: Granite.I18n.get("Untitled Criteria"),
                maxlength: 250
            },
            visible: true
        }), "editableAlgorithmTitle").on("change", this.updateTitle)
    },
    showAsSlider: function() {
        this.show({
            silent: true
        });
        this.slidingPanel.show()
    },
    updateTitle: function(b) {
        var a = b.value;
        if(a != this.model.getTitle()) {
            this.model.setTitle(a)
        }
    },
    updateReusability: function(a) {
        if(a.target.checked) {
            this.model.clearRecAlgoSessionId();
            this.model.setIsReuseable(true)
        } else {
            this.model.clearIsReuseable();
            this.model.setRecAlgoSessionId(this.recAlgoSessionId)
        }
    },
    updateMetaData: function(a) {
        this.model.setDescription(a["jcr:description"]);
        this.model.setIndustryType(a.industryType);
        this.model.setPageTypes(a.pageTypes)
    },
    updateDataSource: function(a) {
        this.model.setDataSource(a);
        this.components.algorithmConfiguration.updateDataSource(a)
    },
    updateDetails: function(a) {
        this.model.setDetails(a);
        this.components.algorithmConfiguration.updateDetails(a)
    },
    updateConfigurationAndDetails: function(b, a) {
        this.model.setDetails(b.details, true);
        this.model.setConfiguration(b.configuration);
        if(!a) {
            this.components.algorithmDetails.removeReportSuites()
        }
        this.components.algorithmDetails.updateDetails(b.details, true);
        this.components.algorithmDetails.updateConfiguration(b.configuration, a)
    },
    showError: function() {
        ELM.Util.showErrorNotification({
            message: this.model.getValidationError().message,
            heading: Granite.I18n.get("ERROR"),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        })
    },
    isModelValid: function() {
        if(!this.model.isValid()) {
            this.showError();
            return false
        }
        if(!(this.components.algorithmConfiguration.isValid() && this.components.algorithmDetails.isValid())) {
            return false
        }
        return true
    },
    createAndCloseAlgorithmEditor: function(b) {
        var d = this,
            a = this.model.isNew(),
            e, c;
        if(!this.isModelValid()) {
            return
        }
        e = this.components.algorithmConfiguration.getModifiedConfigurationToSave();
        c = this.components.algorithmDetails.getModifiedDetailsToSave();
        this.model.save(this.model.getModifiedAttributesToSave(e, c), {
            wait: true,
            silent: true,
            success: function(f, g) {
                d.hideAlgorithmEditor();
                d.trigger("algorithm:created", f, a)
            },
            error: function(f, g) {
                d.components.algorithmDetails.model.handleSaveFailure(JSON.parse(g.responseText));
                d.components.algorithmDetails.showError()
            }
        })
    },
    hideAlgorithmEditor: function() {
        this.slidingPanelMode ? this.slidingPanel.hide() : this.hide()
    },
    closeAlgorithmEditor: function(a) {
        this.hideAlgorithmEditor();
        this.trigger("algorithm-editor:closed")
    }
});
ELM.Activities.AlgorithmMetadata = new Class({
    toString: "AlgorithmMetadata",
    extend: F.ModelComponent,
    Model: ELM.Model,
    View: F.View.extend({
        events: {
            "change .description": "updateDescription",
            "selected .industry-type": "updateIndustryType",
            "itemadded .algorithm-pagetype-tags": "addPageType",
            "itemremoved .algorithm-pagetype-tags": "removePageType"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.load(a.model);
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.AlgorithmEditor.AlgorithmMetadata
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.registerVars()
        });
        this.listenTo(this.model, "change", function() {
            this.trigger("algorithmMetadata:changed", this.model.toJSON())
        })
    },
    initWidgets: function() {
        this.view.$(".select").select();
        this.view.$(".autocomplete").autocomplete()
    },
    registerVars: function() {
        this.autoCompleteObject = this.view.$(".autocomplete").data("autocomplete")
    },
    updateDescription: function(a) {
        var b = $.trim(a.target.value);
        this.setDescription(b)
    },
    updateIndustryType: function(a) {
        var b = a.selected;
        if(b === this.getIndustryType()) {
            return
        }
        this.resetPageTypes();
        this.setIndustryType(b)
    },
    addPageType: function(a, d) {
        var e = d.value,
            c = ELM.INDUSTRY_PAGE_MAP[this.getIndustryType()].indexOf(e) === -1,
            b;
        if(c) {
            this.autoCompleteObject._tagList.removeItem(e);
            return
        }
        b = this.autoCompleteObject._tagList.getValues();
        this.setPageTypes(b)
    },
    removePageType: function(a) {
        var d = a.value,
            c = ELM.INDUSTRY_PAGE_MAP[this.getIndustryType()].indexOf(d) === -1,
            b;
        if(c) {
            return
        }
        b = this.autoCompleteObject._tagList.getValues();
        b.splice(b.indexOf(d), 1);
        this.setPageTypes(b)
    },
    setDescription: function(a) {
        this.model.set("jcr:description", a)
    },
    setPageTypes: function(a, b) {
        this.model.set("pageTypes", a, {
            silent: b
        })
    },
    resetPageTypes: function() {
        this.setPageTypes([], true)
    },
    setIndustryType: function(a) {
        this.model.set("industryType", a)
    },
    getIndustryType: function() {
        return this.model.get("industryType")
    }
});
ELM.Activities.AlgorithmConfiguration = new Class({
    toString: "AlgorithmConfiguration",
    extend: F.ModelComponent,
    Model: ELM.Models.AlgorithmConfigurationAndDetails,
    View: F.View.extend({
        events: {
            "selected #key": "updateKey",
            "selected #type": "updateType",
            "selected #customProfileAttribute": "updateCustomProfileAttribute"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.load(a.model);
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.AlgorithmEditor.AlgorithmConfiguration
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            if(this.model.getKey() === ELM.Algorithm.key.CUSTOM_PROFILE_ATTRIBUTE && typeof this.model.getProfileAttributes() === "undefined") {
                this.fetchCustomProfileAttributes()
            }
            if(this.model.getKey() === ELM.Algorithm.key.POPULARITY && typeof this.model.getSCMetrics() === "undefined") {
                this.fetchSCMetrics()
            }
        })
    },
    initWidgets: function() {
        this.view.$(".select").select()
    },
    triggerAlgorithmConfigurationChanged: function(a) {
        this.trigger("algorithmConfiguration:changed", this.model.toJSON(), a)
    },
    updateKey: function(a) {
        var b = a.selected;
        if(b === this.model.getKey()) {
            return
        }
        this.model.updateKey(b);
        this.triggerAlgorithmConfigurationChanged()
    },
    updateType: function(a) {
        var c = a.selected,
            b;
        if(c === this.model.getType()) {
            return
        }
        b = this.model.updateType(c);
        this.triggerAlgorithmConfigurationChanged(b)
    },
    updateCustomProfileAttribute: function(a) {
        var b = a.selected;
        if(b === this.model.getCustomProfileAttribute()) {
            return
        }
        this.model.setCustomProfileAttribute(b);
        this.triggerAlgorithmConfigurationChanged(true)
    },
    updateDetails: function(a) {
        this.model.setDetails(a, true)
    },
    updateDataSource: function(a) {
        this.model.setDataSource(a)
    },
    fetchCustomProfileAttributes: function() {
        ELM.Activities.app.mboxProfileAttributesFactory.getItems({
            callback: function(b) {
                var c, a;
                b = _.groupBy(b, function(d) {
                    c = d.parameterType;
                    a = d.name;
                    if(c === "PROFILE" && a.indexOf("profile.") != 0) {
                        d.name = "profile." + a
                    }
                    return c
                });
                this.model.setProfileAttributes(b);
                this.model.removeProfileAttributes()
            }.bind(this)
        })
    },
    fetchSCMetrics: function() {
        ELM.Activities.app.recsSCMetricFactory.getItems({
            params: "sortBy=jcr:title",
            callback: function(a) {
                this.model.setSCMetrics(a)
            }.bind(this)
        })
    },
    showError: function() {
        ELM.Util.showErrorNotification({
            message: this.model.getValidationError().message,
            heading: Granite.I18n.get("ERROR"),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        })
    },
    isValid: function() {
        if(!this.model.validateConfiguration()) {
            return true
        }
        this.showError();
        return false
    },
    getModifiedConfigurationToSave: function() {
        return this.model.getModifiedConfigurationToSave()
    }
});
ELM.Activities.AlgorithmDetails = new Class({
    toString: "AlgorithmDetails",
    extend: F.ModelComponent,
    Model: ELM.Models.AlgorithmConfigurationAndDetails,
    View: F.View.extend({
        events: {
            "change .min-inventory": "updateInventory",
            "change #daysCount": "updateDaysCount",
            "change #productConfidence": "updateProductConfidence",
            "selected .add-inclusion-rule": "addInclusionRule",
            "click .delete-inclusion-rule": "deleteInclusionRule",
            "selected .attribute": "updateAttribute",
            "selected .evaluator": "updateOperation",
            "change .values": "updateValues",
            "change .low-range": "updateLowRange",
            "change .high-range": "updateHighRange",
            "selected #price": "updatePriceType",
            "change .min-price": "updateMinPrice",
            "change .max-price": "updateMaxPrice",
            "change .inventory-input": "removeOrAddInventory",
            "change input[name=data-source]": "changeDataSource",
            "selected .report-suite": "updateDataSource"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.load(a.model);
        this.registerListeners()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.AlgorithmEditor.AlgorithmDetails
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            var a = this.view.$(".inventory-input");
            this.cacheSelectors();
            this.initWidgets();
            this.updateDaysCountTooltip();
            this.updateProductConfidenceTooltip();
            if(typeof this.model.getReportSuites() === "undefined" && !_.contains([ELM.Algorithm.key.CURRENT_CATEGORY, ELM.Algorithm.key.FAVORITE_CATEGORY], this.model.getKey())) {
                this.fetchReportSuites()
            }
            if(a.length > 0 && !a.is(":checked")) {
                this.model.removeInventory()
            }
        });
        this.listenTo(this.model, "change:details", function() {
            this.triggerAlgorithmDetailsChanged()
        })
    },
    initWidgets: function() {
        this.view.$(".select").select();
        this.view.$(".collapsible").accordion();
        this.view.$(".slider").slider();
        this.$numberInput.numberInput()
    },
    cacheSelectors: function() {
        this.$daysCountTooltip = this.view.$(".days-count .tooltip");
        this.$productConfidenceTooltip = this.view.$(".product-confidence .tooltip");
        this.$numberInput = this.view.$(".numberinput")
    },
    triggerAlgorithmDetailsChanged: function() {
        this.trigger("algorithmDetails:changed", this.model.getDetails())
    },
    triggerDataSourceChanged: function() {
        this.trigger("dataSource:changed", this.model.getDataSource())
    },
    updateInventory: function(a) {
        var b = a.target.value;
        if(b !== this.model.getInventory()) {
            this.model.setInventory(b);
            this.triggerAlgorithmDetailsChanged()
        }
    },
    removeOrAddInventory: function(a) {
        if(a.target.checked) {
            this.$numberInput.numberInput({
                disabled: false
            });
            this.model.setInventory(this.$numberInput.find("input").val())
        } else {
            this.$numberInput.numberInput({
                disabled: true
            });
            this.model.removeInventory()
        }
        this.triggerAlgorithmDetailsChanged()
    },
    updateConfiguration: function(b, a) {
        this.model.setConfiguration(b, a)
    },
    updateDetails: function(b, a) {
        this.model.setDetails(b, a)
    },
    updateDaysCount: function(a) {
        this.model.setDaysCount(ELM.Algorithm.daysCount[a.target.value]);
        this.updateDaysCountTooltip();
        this.triggerAlgorithmDetailsChanged()
    },
    updateDaysCountTooltip: function() {
        var b = "",
            a = this.model.getDaysCount();
        if(!a) {
            return
        }
        switch(a) {
            case "oneDay":
                b = Granite.I18n.get("one day");
                break;
            case "twoDays":
                b = Granite.I18n.get("two days");
                break;
            case "oneWeek":
                b = Granite.I18n.get("one week");
                break;
            case "twoWeeks":
                b = Granite.I18n.get("two weeks");
                break;
            case "oneMonth":
                b = Granite.I18n.get("one month");
                break;
            case "twoMonths":
                b = Granite.I18n.get("two months");
                break
        }
        this.$daysCountTooltip.text(b)
    },
    updateProductConfidence: function(a) {
        this.model.setProductConfidence(ELM.Algorithm.productConfidence[a.target.value]);
        this.triggerAlgorithmDetailsChanged();
        this.updateProductConfidenceTooltip()
    },
    updateProductConfidenceTooltip: function() {
        var a = "";
        switch(this.model.getProductConfidence()) {
            case "veryWeak":
                a = Granite.I18n.get("very weak");
                break;
            case "weak":
                a = Granite.I18n.get("weak");
                break;
            case "moderate":
                a = Granite.I18n.get("moderate");
                break;
            case "strong":
                a = Granite.I18n.get("strong");
                break;
            case "veryStrong":
                a = Granite.I18n.get("very strong");
                break
        }
        this.$productConfidenceTooltip.text(a)
    },
    addInclusionRule: function(a) {
        var b = a.selected;
        if(!b) {
            return
        }
        if(b === "REFRESH_ATTRIBUTES") {
            this.refreshEntityAttributes(a);
            return
        }
        this.model.addInclusionRule(b)
    },
    refreshEntityAttributes: function(a) {
        var b = this;
        ELM.Recommendation.Util.refreshEntityAttributes({
            targetElem: a.target,
            success: function(c) {
                if(c) {
                    b.model.set("entityAttributes", c, {
                        silent: true
                    })
                }
                b.model.trigger("change")
            }
        })
    },
    deleteInclusionRule: function(a) {
        var b = this.getInclusionRuleIndex($(a.target));
        this.model.deleteInclusionRule(b)
    },
    updateAttribute: function(a) {
        var b = a.selected;
        if(b === "REFRESH_ATTRIBUTES") {
            this.refreshEntityAttributes(a);
            return
        }
        this.model.updateAttribute(b, this.getInclusionRuleIndex($(a.target)))
    },
    updateOperation: function(a) {
        var b = this.getInclusionRuleIndex($(a.target)),
            c = a.selected;
        this.model.updateOperation(c, b)
    },
    updateValues: function(b) {
        var d = this.getInclusionRuleIndex($(b.target)),
            a = b.target.value,
            c = [];
        _.each(a.split(","), function(e) {
            e = e.trim();
            if(e) {
                c.push(e)
            }
        });
        this.updateValuesByInclusionRuleIndex(c, d)
    },
    updateValuesByInclusionRuleIndex: function(a, b) {
        this.model.updateValues(a, b)
    },
    updateLowRange: function(a) {
        var c = a.target.value,
            b;
        b = this.getInclusionRuleIndex($(a.target));
        this.model.updateLowRange(c, b)
    },
    updateHighRange: function(a) {
        var c = a.target.value,
            b;
        b = this.getInclusionRuleIndex($(a.target));
        this.model.updateHighRange(c, b)
    },
    updatePriceType: function(a) {
        this.model.updatePriceType(a.selected)
    },
    updateMinPrice: function(a) {
        this.model.setMinPrice(a.target.value)
    },
    updateMaxPrice: function(a) {
        this.model.setMaxPrice(a.target.value)
    },
    getInclusionRuleIndex: function(a) {
        return a.closest(".inclusion-rule").data("index")
    },
    changeDataSource: function(a) {
        var b = this.model.getDataSource();
        if(a.target.value === "mboxes") {
            this.model.removeDataSource()
        } else {
            if(!b) {
                this.model.setDataSource("");
                this.view.$(".report-suite button").removeAttr("disabled")
            }
        }
        this.triggerDataSourceChanged()
    },
    updateDataSource: function(a) {
        var b = a.selected;
        if(this.model.getDataSource() === b) {
            return
        }
        this.model.setDataSource(b);
        this.triggerDataSourceChanged()
    },
    removeReportSuites: function() {
        this.model.removeReportSuites()
    },
    fetchReportSuites: function() {
        var a = this.model.getType(),
            b = "sortBy=jcr:title";
        if(this.model.getKey() === ELM.Algorithm.key.POPULARITY && a && a !== "topSellers" && a !== "topViewed") {
            b += "&scMetric=" + a
        }
        ELM.Activities.app.recsReportSuiteFactory.getItems({
            params: b,
            callback: function(c) {
                this.model.setReportSuites(c)
            }.bind(this)
        })
    },
    showError: function() {
        var b = this.model.getValidationError(),
            a = b.indexes,
            e, d;
        ELM.Util.showErrorNotification({
            message: b.message,
            heading: Granite.I18n.get("ERROR"),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        });
        if(b.fieldName === "priceOption") {
            this.view.$el.find(".price-option").addClass("incomplete");
            return
        }
        if(b.fieldName === "inclusionRules") {
            e = this.view.$el.find(".inclusion-rule");
            d = a.length;
            for(var c = 0; c < d; c++) {
                e[a[c]].className += " incomplete"
            }
        }
    },
    isValid: function() {
        if(!this.model.validateDetails()) {
            return true
        }
        this.showError();
        return false
    },
    getModifiedDetailsToSave: function() {
        return this.model.getModifiedDetailsToSave()
    }
});
ELM.Activities.AlgorithmCard = new Class({
    toString: "AlgorithmCard",
    extend: F.ModelComponent,
    Model: ELM.Models.Algorithm,
    View: F.View,
    construct: function(a) {
        this.initView(a.el);
        this.load(a.model)
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.AlgorithmCard
        })
    }
});
ELM.Activities.RecommendationTemplateEditor = new Class({
    toString: "TemplateEditor",
    extend: F.ModelComponent,
    Model: ELM.Models.RecsTemplate,
    View: F.View.extend({
        events: {
            "keyup .template-name": "setTemplateName",
            "keyup .template-code": "setTemplateContent",
            "click .recs-sample-template": "setStarterTemplateCode",
            "click .show-all-entity-variables": "showAllEntityVariables",
            "fileselected .fileupload": "uploadFile",
            "fileuploadstart .fileupload": "startUpload",
            "fileuploadsuccess .fileupload": "updateImageSource",
            "filerejected .fileupload": "showUploadErrorMessage",
            "fileuploadprogress .fileupload": "updateProgressBar",
            "click .delete-thumbnail": "deleteThumbnail"
        }
    }),
    options: {
        visible: false
    },
    construct: function(a) {
        this.initView(a.el);
        this.registerVars(a);
        this.registerListeners();
        this.registerBinders()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.TemplateEditor,
            noRerender: true
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.cacheSelectors()
        })
    },
    registerBinders: function() {
        this.bind(this.updateImageSource)
    },
    initWidgets: function() {
        this.initWizard();
        this.initFileUpload();
        if(this.slidingPanelMode && !this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
    },
    cacheSelectors: function() {
        this.$uploadProgressBar = this.view.$(".thumbnail-upload-progress")
    },
    initFileUpload: function(a) {
        this.view.$(".fileupload").fileUpload(a)
    },
    initWizard: function() {
        var a = this;
        this.wizard = new CUI.Wizard({
            element: this.view.$("#template-editor-wizard"),
            component: this,
            onPageChanged: {},
            onNextButtonClick: function() {
                return a.nextStep()
            },
            onBackButtonClick: function() {
                return a.prevStep()
            },
            onLeaving: function() {
                a.closeTemplateEditor();
                a.curStep = 0
            },
            onFinish: function() {
                a.hideTemplateEditor();
                a.curStep = 0;
                a.trigger("template:created", a.model)
            }
        })
    },
    registerVars: function(a) {
        this.curStep = 0;
        this.slidingPanelMode = a.showAsSlidingPanel || false;
        this.steps = [{
            el: ".template-code-editor"
        }, {
            el: ".template-metadata-editor"
        }]
    },
    nextStep: function() {
        var b = (this.curStep === this.steps.length - 1),
            a = this;
        if(b) {
            return
        }
        if(this.curStep === 0) {
            this.wizard.$next.prop("disabled", "disabled");
            this.saveTemplate(function() {
                var c = a.model.getPath();
                a.curStep++;
                a.wizard.changePage(a.curStep + 1);
                a.showStep(a.curStep);
                a.wizard.$next.removeAttr("disabled");
                a.initFileUpload({
                    uploadUrl: c + "/jcr:content/related.createasset.html"
                })
            }, function(c) {
                a.wizard.$next.removeAttr("disabled");
                ELM.Util.showErrorNotification({
                    message: c,
                    className: ELM.Util.PANEL_MESSAGE_POSITION
                })
            })
        }
        return false
    },
    prevStep: function() {
        if(this.curStep < 1) {
            return
        }
        this.curStep--;
        this.showStep(this.curStep);
        return true
    },
    showStep: function(a) {
        this.view.$(".template-code-editor .template-metadata-editor").hide();
        this.view.$(this.steps[a].el).show()
    },
    showAsSlider: function() {
        this.show({
            silent: true
        });
        this.slidingPanel.show()
    },
    setTemplateName: function(a) {
        this.model.setTemplateName(a.currentTarget.value)
    },
    setTemplateContent: function(a) {
        this.view.$(".recs-sample-template").removeClass("color-878787-imp");
        this.model.setTemplateContent(a.currentTarget.value)
    },
    setStarterTemplateCode: function(b) {
        var a = this,
            c = b.currentTarget;
        this.view.$(".recs-sample-template").removeClass("color-878787-imp");
        c.classList.add("color-878787-imp");
        ELM.Recommendation.Util.getStarterTemplateCode({
            target: c,
            success: function(d) {
                a.view.$(".template-code").val(d);
                a.model.setTemplateContent(d)
            }
        })
    },
    showAllEntityVariables: function() {
        var a = this;
        ELM.Recommendation.Util.getAllEntityVariables({
            success: function(b) {
                a.model.setDisplayVariables(b);
                a.view.render();
                a.view.$(".show-all-entity-variables").addClass("hidden")
            },
            error: function(b) {
                ELM.Util.showErrorNotification({
                    message: b,
                    heading: Granite.I18n.get("ERROR"),
                    className: ELM.Util.PANEL_MESSAGE_POSITION
                })
            },
            includeCustom: true
        })
    },
    hideTemplateEditor: function() {
        this.slidingPanelMode ? this.slidingPanel.hide() : this.hide()
    },
    closeTemplateEditor: function() {
        this.hideTemplateEditor();
        this.trigger("template-editor:closed")
    },
    uploadFile: function(a) {
        a.fileUpload.uploadFile(a.item)
    },
    startUpload: function() {
        this.$uploadProgressBar.show()
    },
    updateImageSource: function(b) {
        var a = this.model.getPath() + "/jcr:content/related/" + b.item.fileName;
        this.model.setThumbnailSrc(a);
        this.updateArticleContent();
        $.post(a, {
            "jcr:content/related/offerThumbnail": "true"
        })
    },
    updateArticleContent: function() {
        var a = ELM.Activities.Templates.UploadThumbnail(this.model.toJSON());
        this.view.$(".template-metadata-editor").html(a);
        this.cacheSelectors()
    },
    showUploadErrorMessage: function(b) {
        var a = b.message === "File mime type is not allowed";
        ELM.Util.showErrorNotification({
            message: a ? Granite.I18n.get("Invalid file type. Please upload an image (e.g. jpeg, png, etc.)") : b.message,
            className: ELM.Util.PANEL_MESSAGE_POSITION
        })
    },
    updateProgressBar: function(b) {
        var a = (b.originalEvent.loaded / b.originalEvent.total).toFixed(2) * 100;
        this.$uploadProgressBar.find(".bar").css("width", a + "%");
        this.$uploadProgressBar.find("label").html(a + "%");
        if(a === 100) {
            this.$uploadProgressBar.hide()
        }
    },
    saveTemplate: function(a, b) {
        if(this.model.isNew()) {
            this.model.saveTemplate(a, b)
        } else {
            this.model.updateTemplate(a, b)
        }
    },
    deleteThumbnail: function() {
        var a = this.model.getThumbnailSrc(),
            c = this.model.getPath(),
            b = this;
        $.ajax({
            url: a,
            type: "DELETE"
        }).done(function() {
            b.model.clearThumbnailSrc();
            b.updateArticleContent();
            b.initFileUpload({
                uploadUrl: c + "/jcr:content/related.createasset.html"
            })
        })
    }
});
ELM.Activities.RecsTemplatePreview = new Class({
    toString: "RecsTemplatePreview",
    extend: F.ModelComponent,
    Model: ELM.Models.RecsTemplate,
    popoverTemplate: function() {
        return ['<div id="recs-template-preview" class="popover width-50p height-50p">', '<div class="content height-100p"></div>', "</div>"].join("")
    },
    construct: function() {
        this.initView()
    },
    initView: function() {
        this.$popover = $("#recs-template-preview");
        if(this.$popover.length === 0) {
            this.$popover = $(this.popoverTemplate()).appendTo("body")
        }
        this.view = new F.View({
            el: this.$popover.find(".content"),
            component: this,
            template: ELM.Activities.Templates.RecsTemplatePreview
        })
    },
    destruct: function() {
        this.$popover.remove()
    },
    showPreview: function(a) {
        var c = this,
            b = a.data("path");
        if(this.previewShown && this.isPopoverVisible()) {
            this.previewShown = false;
            a.click();
            return
        }
        if(!this.model || this.model.getPath() !== b) {
            this.load({
                path: b,
                loading: true
            });
            this.model.fetchTemplateContent().fail(function() {
                c.model.set("error", Granite.I18n.get("ERROR: Failed to load the template code."))
            }).always(function() {
                c.model.unset("loading")
            })
        }
        this.show({
            silent: true
        });
        this.previewShown = true
    },
    isPopoverVisible: function() {
        return this.$popover.is(":visible")
    }
});
ELM.Activities.RecommendationCatalogPicker = new Class({
    toString: "CatalogPicker",
    extend: F.Component,
    options: {
        singly: true,
        visible: false
    },
    View: F.View.extend({
        events: {
            "click .close-catalog-picker": "hideCatalogPicker",
            "click #new-catalog": "showCatalogEditor"
        }
    }),
    construct: function(a) {
        this.registerBinders();
        this.initView(a.el);
        this.registerListeners()
    },
    registerBinders: function() {
        this.bind(this.handleScroll);
        this.bind(this.searchCatalogs);
        this.bind(this.triggerCatalogSelected);
        this.bind(this.handleCatalogCreated);
        this.bind(this.updateList);
        this.bind(this.showCatalogEditor);
        this.bind(this.updateCatalogPickerHeader)
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.CatalogPicker
        })
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", function() {
            this.initWidgets();
            this.addSubComponents();
            this.bindScrollEventToScrollableArea()
        })
    },
    initWidgets: function() {
        if(!this.slidingPanel) {
            this.slidingPanel = new ELM.SlidingPanel({
                el: this.view.$el,
                visible: false
            })
        }
    },
    addSubComponents: function() {
        this.addSearcher();
        this.addSorter();
        this.addCatalogList();
        this.addCatalogEditor()
    },
    addSearcher: function() {
        this.addComponent(new ELM.Searcher({
            el: this.view.$el.find(".search-placeholder")
        }), "searcher").on("search:changed", this.searchCatalogs)
    },
    addSorter: function() {
        this.addComponent(new ELM.Sorter({
            el: this.view.$el.find(".sorter-placeholder"),
            model: {
                name: "catalogSorter",
                ascending: false,
                options: [{
                    value: "jcr:title",
                    label: Granite.I18n.get("Name")
                }, {
                    value: "jcr:lastModified",
                    label: Granite.I18n.get("Last Updated"),
                    selected: true
                }]
            }
        }), "catalogSorter")
    },
    addCatalogList: function() {
        this.addComponent(new ELM.Activities.RecommendationCatalogList({
            el: this.view.$(".catalog-list")
        }), "catalogList").on("collection:loaded", this.updateCatalogPickerHeader).on("list:itemSelected", this.triggerCatalogSelected).on("catalog:edit", this.showCatalogEditor)
    },
    addCatalogEditor: function() {
        this.addComponent(new ELM.Activities.RecommendationCatalogEditor({
            el: $('<div class="catalog-editor container-fixed width-64 pos-tbl-0 z-index-9999 bg-f0f0f0"/>').appendTo(document.body),
            slidingPanelMode: false,
            environmentId: ELM.Recommendation.Util.getDefaultSearchEnvironment()
        }), "catalogEditor").on("catalog:created", this.handleCatalogCreated).on("catalog-editor:closed", this.updateList)
    },
    bindScrollEventToScrollableArea: function() {
        this.view.$(".scrollable").bind("scroll", this.handleScroll)
    },
    handleScroll: function(a) {
        this.components.catalogList.handleScroll(a)
    },
    searchCatalogs: function(b, a) {
        this.components.catalogList.search(b, a)
    },
    updateCatalogPickerHeader: function(a) {
        this.view.$(".catalog-picker-header").text(Granite.I18n.get("Collections ({0})", [a.size() || 0]))
    },
    show: function() {
        this.inherited(arguments);
        this.slidingPanel.show()
    },
    hideCatalogPicker: function() {
        this.slidingPanel.hide();
        this.trigger("catalog-picker:closed")
    },
    showCatalogEditor: function(b) {
        var a = (b && b.model) || new this.components.catalogEditor.Model();
        ELM.Recommendation.Util.entityVariablesFactory.getItems({
            callback: function(c) {
                a.setEntityAttributes(c);
                this.components.catalogEditor.show({
                    model: a,
                    silent: true
                })
            }.bind(this)
        })
    },
    handleCatalogCreated: function(a) {
        this.updateList();
        F.trigger(ELM.evtNamespace + ":catalog-updated", a.toJSON());
        ELM.Util.showSuccessNotification({
            message: Granite.I18n.get("Collection {0} was successfully saved.", a.getTitle()) + " " + Granite.I18n.get("Changes will generally appear for your visitors within 12 hours but could take up to 24 hours."),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        })
    },
    updateList: function() {
        this.components.catalogList.updateList()
    },
    triggerCatalogSelected: function(a) {
        this.trigger("catalog:selected", a.model.toJSON());
        this.slidingPanel.hide()
    }
});
ELM.Activities.RecommendationCatalogList = new Class({
    toString: "CatalogList",
    extend: ELM.InfiniteScrollList,
    Collection: ELM.Collections.Catalogs,
    ItemView: F.ListComponent.prototype.ItemView.extend({
        events: {
            "click .edit-catalog": "editCatalog",
            "click .copy-catalog": "copyCatalog"
        }
    }),
    options: {
        visible: true
    },
    ItemTemplate: function() {
        return ELM.Activities.Templates.CatalogRow.apply(this, arguments)
    },
    construct: function(a) {
        this.registerVars();
        this.registerBinders();
        this.registerListeners();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unregisterGlobalTriggers()
    },
    registerVars: function() {
        this.fetchParams = {}
    },
    registerBinders: function() {
        this.bind(this.fillAvailableSpace);
        this.bind(this.sortItems)
    },
    registerListeners: function() {
        this.listenTo(this.view, "renderComplete", this.fillAvailableSpace)
    },
    registerGlobalTriggers: function() {
        F.on("window:resize", this.fillAvailableSpace);
        F.on("catalogSorter:change", this.sortItems)
    },
    unregisterGlobalTriggers: function() {
        F.off("window:resize", this.fillAvailableSpace);
        F.off("catalogSorter:change", this.sortItems)
    },
    search: function(b, a) {
        this.fetchParams[a] = b;
        this.updateList()
    },
    sortItems: function(b, a) {
        this.fetchParams.sortBy = b;
        this.fetchParams.sortOrder = a;
        this.updateList()
    },
    updateList: function() {
        this.fetch(this.fetchParams)
    },
    fillAvailableSpace: function() {
        if(!this.view.$el.is(":visible") || this.collection.isEmpty()) {
            return
        }
        var b = this.view.$el.height(),
            c = this.getSiblingsHeight(),
            d = window.innerHeight - this.view.$el.closest(".scrollable").offset().top - c,
            a = d - b > 0;
        if(a) {
            this.fetchAvailablePage()
        }
    },
    getSiblingsHeight: function() {
        var a = _.reduce(this.view.$el.siblings(), function(b, c) {
            return b + $(c).outerHeight(true)
        }, 0);
        return a
    },
    getItemRowFromModel: function(a) {
        return this.getListItemRow(this.view.$("#" + a.getId()))
    },
    getListItemRow: function(a) {
        return a.closest(".listItem")
    },
    editCatalog: function(a) {
        a.stopPropagation();
        var b = this.getModelFromLi(this.getListItemRow($(a.currentTarget))),
            c = this;
        b.fetch({
            success: function() {
                c.trigger("catalog:edit", {
                    model: b
                })
            },
            error: function() {
                ELM.Util.showErrorNotification({
                    message: Granite.I18n.get("Unable to edit '{0}' due to network error.", [b.getTitle()]),
                    className: ELM.Util.PANEL_MESSAGE_POSITION
                })
            }
        })
    },
    copyCatalog: function(a) {
        a.stopPropagation();
        var b = this.getModelFromLi(this.getListItemRow($(a.currentTarget))),
            d = this,
            c;
        b.fetch({
            success: function() {
                d.trigger("catalog:edit", {
                    model: b.createCopy()
                })
            },
            error: function() {
                ELM.Util.showErrorNotification({
                    message: Granite.I18n.get("Unable to copy '{0}' due to network error.", [b.getTitle()]),
                    className: ELM.Util.PANEL_MESSAGE_POSITION
                })
            }
        })
    },
});
ELM.Activities.RecommendationCatalogEditor = new Class({
    toString: "CatalogEditor",
    extend: ELM.Search.SearchEditor,
    Model: ELM.Models.Catalog,
    construct: function(a) {
        this.initView(a.el);
        this.registerListeners();
        this.registerGlobalTriggers()
    },
    destruct: function() {
        this.unRegisterGlobalTriggers()
    },
    registerGlobalTriggers: function() {
        F.on("window:resize", this.updateView)
    },
    unRegisterGlobalTriggers: function() {
        F.off("window:resize", this.updateView)
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.CatalogEditor
        })
    },
    addSubComponents: function() {
        this.addEditableLabel();
        this.addSearchComponents("catalogEditor")
    },
    updateView: function() {
        var a = this.view.$(".scrollable"),
            b = a[0].scrollHeight > a[0].clientHeight;
        if(b) {
            a.addClass("scrolling-present")
        } else {
            a.removeClass("scrolling-present")
        }
    },
    addEditableLabel: function() {
        this.addComponent(new ELM.EditableLabel({
            el: this.view.$(".catalog-title"),
            model: {
                title: this.model.getTitle(),
                placeholder: Granite.I18n.get("Untitled Collection"),
                maxlength: 250
            },
            visible: true
        }), "editableCatalogTitle").on("change", this.updateTitle)
    },
    showErrorNotification: function() {
        var b = this.model.getValidationError(),
            a = b.indexes,
            e, d;
        ELM.Util.showErrorNotification({
            message: b.message,
            heading: Granite.I18n.get("ERROR"),
            className: ELM.Util.PANEL_MESSAGE_POSITION
        });
        if(b.fieldName === "rules") {
            e = this.view.$el.find(".rule");
            d = a.length;
            for(var c = 0; c < d; c++) {
                e[a[c]].className += " incomplete-rule"
            }
        }
        this.updateView()
    }
});
ELM.Activities.RecommendationOverview = new Class({
    toString: "RecommendationOverview",
    extend: ELM.Activities.Overview,
    Summary: ELM.Activities.RecommendationSummary
});
ELM.Activities.NewAudience = new Class({
    toString: "NewAudience",
    extend: F.ModelComponent,
    Model: ELM.Models.Audience,
    View: F.View.extend({
        events: {
            "click .closeAudienceEditor": "triggerNewAudienceDialogHideEvent",
            "click .save": "handleSaveClick",
            "click .cancel": "triggerNewAudienceDialogHideEvent",
            "change .audiencename": "handleAudienceNameChange"
        }
    }),
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            template: ELM.Activities.Templates.NewAudience,
            component: this
        });
        this.listenTo(this.view, "renderComplete", function() {
            this.renderSubViews();
            this.initializeWidgets()
        })
    },
    renderSubViews: function() {
        this.addComponent(new ELM.Audiences.TargetingWidget({
            el: this.view.$(".targetingcontainer"),
            model: this.model.getTargets(),
            visible: true
        }), "targetingwidget").on("save:enable", this.enableSave.bind(this))
    },
    initializeWidgets: function() {
        this.$audiencename = this.view.$(".audiencename");
        this.$saveButton = this.view.$(".save")
    },
    show: function() {
        this.view.rendered = null;
        this.load(new this.Model());
        this.inherited(arguments)
    },
    triggerNewAudienceDialogHideEvent: function(a) {
        a.preventDefault();
        this.trigger("newAudienceDialog:hide")
    },
    handleSaveClick: function() {
        var a = this,
            b = this.components.targetingwidget.getTargetRules();
        if(!this.model.getTitle().length) {
            this.$audiencename.addClass("error").focus();
            return
        }
        if(b.length < this.components.targetingwidget.getNumberOfRules()) {
            F.trigger("errorNotification", {
                message: Granite.I18n.get("There are one or more incomplete audience targeting rules. Review the highlighted rules below.")
            });
            return
        }
        this.model.setTargets(b);
        this.model.save(null, {
            success: function(d, c) {
                a.trigger("audience:saved", d);
                F.trigger("successNotification", {
                    message: Granite.I18n.get('Audience : "{0}" saved.', d.getTitle()),
                    className: a.parent.isViewModeSlidingPanel() ? "pos-l-34-imp" : ""
                })
            },
            error: function(d, c) {
                var e;
                if(c && c.responseText) {
                    var f = JSON.parse(c.responseText);
                    e = f["error.message"]
                }
                F.trigger("errorNotification", {
                    message: e || Granite.I18n.get("Error saving audience."),
                    className: a.parent.isViewModeSlidingPanel() ? "pos-l-34-imp" : ""
                })
            }
        })
    },
    handleAudienceNameChange: function(a) {
        this.$audiencename.removeClass("error");
        this.model.setTitle(a.target.value)
    },
    enableSave: function(a) {
        if(a === false) {
            this.$saveButton.addClass("disabled")
        } else {
            this.$saveButton.removeClass("disabled")
        }
    }
});
"use strict";
ELM.Activities.Rail = new Class({
    toString: "Rail",
    extend: F.Component,
    construct: function(a) {
        this.view = new this.View({
            el: a.el,
            component: this
        });
        new ELM.Activities.Filters({
            el: this.view.$el.find(".activityFilters")
        })
    },
    View: F.View.extend({
        events: {
            'change input[name="activityName"]': "triggerChangeEvent"
        }
    }),
    triggerChangeEvent: function(a) {
        var b = this.view.$(a.currentTarget);
        F.trigger("rail:search", b.val())
    },
    hide: function() {
        this.view.hide()
    }
});
ELM.Activities.App = new Class({
    toString: "Activities",
    extend: F.Component,
    options: {
        singly: true
    },
    View: F.View.extend({
        className: "activities",
        events: {
            "click button.foundation-admin-rail-toggle": "toggleRail",
            "click .create-activity": "createActivity"
        }
    }),
    construct: function(a) {
        this.initView(a.el);
        this.registerVars();
        this.registerBinders();
        this.registerGlobalTriggers();
        this.addSubComponents();
        this.initializeDummyIframe();
        this.fetchMboxes()
    },
    initView: function(a) {
        this.view = new this.View({
            component: this,
            el: a,
            template: ELM.Activities.Templates.App
        }).render()
    },
    addBrowserBackButtonListener: function() {
        var a = this;
        if(!this.backboneLoadUrlFunction) {
            this.backboneLoadUrlFunction = Backbone.history.loadUrl;
            Backbone.history.loadUrl = function(b) {
                if(a.currentEditor && a.currentEditor.isVisible() && !a.currentEditor.checkAndShowIfWarningNeeded()) {
                    window.location.hash = "#" + Backbone.history.fragment;
                    return false
                }
                return a.backboneLoadUrlFunction.apply(this, arguments)
            }
        }
    },
    removeBrowserBackButtonListener: function() {
        Backbone.history.loadUrl = this.backboneLoadUrlFunction;
        this.backboneLoadUrlFunction = null
    },
    addSubComponents: function() {
        this.addIndex();
        this.addEditor();
        this.addExperienceTargetingEditor();
        if(this.isRecsEnabled()) {
            this.addRecommendationEditor();
            this.addRecommendationDetails();
            this.addRecsReportSuiteFactory();
            this.addMboxProfileAttributesFactory();
            this.addRecsSCMetricFactory()
        }
        this.addDetails();
        this.addOneToOneDetails();
        if(this.isMvtEnabled()) {
            this.addMvtDetails()
        }
        this.addNotification()
    },
    registerVars: function() {
        this.resizeTimer = null;
        this.activityUrl = null;
        this.currentEditor = null;
        this.$loadingOverlay = this.view.$(".loading-overlay")
    },
    registerGlobalTriggers: function() {
        $(window).on("resize", this.handleWindowResize);
        $(document).on("tap", this.hideTooltips);
        F.on("new:activity", this.setActivityDetails);
        F.on("activity:action:requested", this.handleActivityActionRequest)
    },
    registerBinders: function() {
        this.bind(this.navigateToActivityDetails);
        this.bind(this.handleSave);
        this.bind(this.updateListAndNavigateToPreviousPage);
        this.bind(this.navigateToPreviousPage);
        this.bind(this.handleWindowResize);
        this.bind(this.hideTooltips);
        this.bind(this.setActivityDetails);
        this.bind(this.handleActivityActionRequest)
    },
    addIndex: function() {
        this.addComponent(new ELM.Activities.Index({
            el: this.view.$(".index")
        }))
    },
    addEditor: function() {
        this.addComponent(new ELM.Activities.ABEditor({
            el: this.view.$(".ab-editor")
        }), "abEditor").on("editor:closed", this.navigateToActivityDetails).on("model:saved", this.handleSave).on("model:lateSave", this.updateListAndNavigateToPreviousPage).on("model:saveFailed", this.navigateToPreviousPage).on("model:noChange", this.navigateToPreviousPage)
    },
    addOneToOneEditor: function() {
        this.addComponent(new ELM.Activities.OneToOneEditor({
            el: this.view.$(".one-to-one-editor"),
            visible: false
        }), "oneToOneEditor").on("editor:closed", this.navigateToActivityDetails).on("model:noChange", this.navigateToPreviousPage).on("model:saved", this.handleSave)
    },
    addExperienceTargetingEditor: function() {
        this.addComponent(new ELM.Activities.ExperienceTargetingEditor({
            el: this.view.$(".experience-targeting-editor"),
            visible: false
        }), "experienceTargetingEditor").on("editor:closed", this.navigateToActivityDetails).on("model:saved", this.handleSave).on("model:lateSave", this.updateListAndNavigateToPreviousPage).on("model:saveFailed", this.navigateToPreviousPage).on("model:noChange", this.navigateToPreviousPage)
    },
    addRecommendationEditor: function() {
        this.addComponent(new ELM.Activities.RecommendationEditor({
            el: this.view.$(".recommendation-editor"),
            visible: false
        }), "recommendationEditor").on("editor:closed", this.navigateToActivityDetails).on("model:saved", this.handleSave).on("model:noChange", this.navigateToPreviousPage).on("model:lateSave", this.updateListAndNavigateToPreviousPage)
    },
    addDetails: function() {
        this.addComponent(new ELM.Activities.Details({
            el: this.view.$(".activityDetailsDialog")
        }), "activityDetails")
    },
    addOneToOneDetails: function() {
        this.addComponent(new ELM.Activities.OneToOneDetails({
            el: this.view.$(".one-to-one-activity-details"),
            visible: false
        }), "oneToOneActivityDetails")
    },
    addRecommendationDetails: function() {
        this.addComponent(new ELM.Activities.RecommendationDetails({
            el: this.view.$(".recommendation-activity-details"),
            visible: false
        }), "recommendationActivityDetails")
    },
    addMvtDetails: function() {
        this.addComponent(new ELM.Activities.MVTDetails({
            el: this.view.$(".mvt-activity-details"),
            visible: false
        }), "mvtActivityDetails")
    },
    addNotification: function() {
        this.addComponent(new ELM.Notification({
            el: this.view.$("#notification")
        }), "notification")
    },
    addRecsReportSuiteFactory: function() {
        this.recsReportSuiteFactory = new ELM.ItemFactory({
            url: "/target/" + ELM.client + "/target/setup/recs/analyticsSuites.at.json",
            pageSize: 2000,
            name: "recsReportSuiteFactory",
            disableCache: true,
            disable: !ELM.isFeedSourceAnalyticsEnabled
        })
    },
    addMboxProfileAttributesFactory: function() {
        this.mboxProfileAttributesFactory = new ELM.ItemFactory({
            url: "/target/" + ELM.client + "/target/mboxes.profiles.at.json",
            name: "mboxProfileAttributesFactory",
            disableCache: true,
            parse: function(a) {
                return a.attributes || []
            }
        })
    },
    addRecsSCMetricFactory: function() {
        this.recsSCMetricFactory = new ELM.ItemFactory({
            url: "/target/" + ELM.client + "/target/setup/recs/scMetrics.at.json",
            pageSize: 2000,
            name: "recsSCMetricFactory",
            disable: !ELM.isFeedSourceAnalyticsEnabled
        })
    },
    fetchMboxes: function() {
        new ELM.Models.MboxItems().fetch({
            data: {
                sortBy: "jcr:title",
                sortOrder: "ASCENDING"
            },
            success: function(b, a) {
                if(_.isArray(a.items)) {
                    ELM.mboxes = a.items
                }
            }
        })
    },
    isRecsEnabled: function() {
        return ELM.isRecsEnabled
    },
    isMvtEnabled: function() {
        return ELM.isMvtEnabled
    },
    performActivityAction: function(a, f, e) {
        var d, b, c = "ref:audiences,ref:reportAudiences";
        if(a === ELM.Activities.activityTypes.ONE_TO_ONE) {
            d = new ELM.Models.OneToOneActivity({
                id: f
            })
        } else {
            if(a === ELM.Activities.activityTypes.MVT) {
                d = new ELM.Models.MvtActivity({
                    id: f
                })
            } else {
                if(a === ELM.Activities.activityTypes.RECOMMENDATION) {
                    c = c.concat(",ref:algorithms,ref:catalog,ref:recTemplates");
                    d = new ELM.Models.Recommendation({
                        id: f
                    })
                } else {
                    d = new ELM.Models.Activity({
                        id: f
                    })
                }
            }
        }
        b = {
            dereference: c
        };
        this.fetchActivity(d, b, e)
    },
    fetchActivity: function(e, d, h) {
        var c = this,
            a = this.components.index,
            g, b, f = false;
        if(a.isVisible()) {
            g = a.components.activities.collection.get(e.getId());
            b = g && g.getTitle() || "";
            this.$loadingOverlay.find(".title").text(Granite.I18n.get("Loading {0}...", b));
            setTimeout(function() {
                if(!f) {
                    c.$loadingOverlay.removeClass("hidden")
                }
            }, 500)
        }
        e.fetch({
            data: d,
            success: function(i) {
                h(i)
            },
            error: function() {
                c.showErrorNotification(Granite.I18n.get("Activity not shown due to network error."))
            }
        }).always(function() {
            f = true;
            c.$loadingOverlay.addClass("hidden")
        })
    },
    handleActivityActionRequest: function(c) {
        var b = this.components.index.components.activities,
            a = {
                activate: b.activateActivity,
                deactivate: b.deactivateActivity,
                copy: b.copyActivity,
                "delete": b.deleteActivity
            }[c.action];
        if(a) {
            a(c.model)
        }
    },
    editActivity: function(b) {
        var a = b.getActivityType(),
            c = null;
        this.removeExperienceEditors();
        this.setEventNamespace(a);
        if(a === ELM.Activities.activityTypes.ONE_TO_ONE || a === ELM.Activities.activityTypes.MVT) {
            c = this.getOneToOneEditor()
        } else {
            if(a === ELM.Activities.activityTypes.RECOMMENDATION) {
                c = this.components.recommendationEditor
            } else {
                if(a === ELM.Activities.activityTypes.EXPERIENCE_TARGETING) {
                    c = this.components.experienceTargetingEditor
                } else {
                    c = this.components.abEditor
                }
            }
        }
        this.currentEditor = c;
        this.addBrowserBackButtonListener();
        c.showEditor({
            model: b,
            isViewMode: this.isEditorInViewMode(b)
        })
    },
    isEditorInViewMode: function(a) {
        var b = [ELM.Activities.status.ACTIVATING, ELM.Activities.status.SCHEDULED, ELM.Activities.status.LIVE, ELM.Activities.status.ENDED, ELM.Activities.status.DEACTIVATING];
        return a.isUserObserver() || (a.isUserEditor() && b.indexOf(a.getStatus()) !== -1)
    },
    showActivityDetails: function(a) {
        var b = a.getActivityType();
        this.setEventNamespace(b);
        if(b === ELM.Activities.activityTypes.ONE_TO_ONE) {
            this.components.oneToOneActivityDetails.show({
                model: a
            })
        } else {
            if(b === ELM.Activities.activityTypes.MVT) {
                this.components.mvtActivityDetails.show({
                    model: a
                })
            } else {
                if(b === ELM.Activities.activityTypes.RECOMMENDATION) {
                    this.components.recommendationActivityDetails.show({
                        model: a
                    })
                } else {
                    this.components.activityDetails.show({
                        model: a
                    })
                }
            }
        }
    },
    showReports: function(a) {
        var b = a.getActivityType();
        this.setEventNamespace(b);
        if(b === ELM.Activities.activityTypes.ONE_TO_ONE) {
            this.components.oneToOneActivityDetails.showReports({
                model: a
            })
        } else {
            if(b === ELM.Activities.activityTypes.MVT) {
                this.components.mvtActivityDetails.showReports({
                    model: a
                })
            } else {
                if(b === ELM.Activities.activityTypes.RECOMMENDATION) {
                    this.components.recommendationActivityDetails.showReports({
                        model: a
                    })
                } else {
                    this.components.activityDetails.showReports({
                        model: a
                    })
                }
            }
        }
    },
    showContributionReports: function(a) {
        var b = a.getActivityType();
        this.setEventNamespace(b);
        if(b === ELM.Activities.activityTypes.MVT) {
            this.components.mvtActivityDetails.showContributionReports({
                model: a
            })
        }
    },
    showCollision: function(a) {
        var b = a.getActivityType();
        this.setEventNamespace(b);
        if(b === ELM.Activities.activityTypes.ONE_TO_ONE) {
            this.components.oneToOneActivityDetails.showCollision({
                model: a
            })
        } else {
            if(b === ELM.Activities.activityTypes.MVT) {
                this.components.mvtActivityDetails.showCollision({
                    model: a
                })
            } else {
                if(b === ELM.Activities.activityTypes.RECOMMENDATION) {
                    this.components.recommendationActivityDetails.showCollision({
                        model: a
                    })
                } else {
                    this.components.activityDetails.showCollision({
                        model: a
                    })
                }
            }
        }
    },
    createActivity: function() {
        var a = ELM.Activities.activityTypes.AB_TEST;
        if(ELM.reportingEngine === ELM.Activities.reportingEngine.ANALYTICS) {
            a = ELM.Activities.activityTypes.AB_ANALYTICS
        }
        ELM.Activities.router.navigate("#new/" + a, {
            trigger: true
        })
    },
    newActivity: function(a) {
        var b = {};
        if(a) {
            b.activityType = a
        }
        this.removeExperienceEditors();
        this.setEventNamespace(a);
        this.addBrowserBackButtonListener();
        if(a === ELM.Activities.activityTypes.ONE_TO_ONE) {
            if(!this.activityUrl) {
                ELM.Activities.router.navigate("", {
                    trigger: true
                });
                return
            }
            this.newOneToOneActivity()
        } else {
            if(a === ELM.Activities.activityTypes.RECOMMENDATION) {
                if(!this.activityUrl) {
                    ELM.Activities.router.navigate("", {
                        trigger: true
                    });
                    return
                }
                this.newRecommendation()
            } else {
                if(a === ELM.Activities.activityTypes.EXPERIENCE_TARGETING) {
                    this.newExperienceTargetingActivity(b)
                } else {
                    if(a === ELM.Activities.activityTypes.MVT) {
                        if(!this.activityUrl) {
                            ELM.Activities.router.navigate("", {
                                trigger: true
                            });
                            return
                        }
                        this.newMvtActivity()
                    } else {
                        this.newAbActivity(b)
                    }
                }
            }
        }
    },
    newAbActivity: function(a) {
        this.currentEditor = this.components.abEditor;
        this.currentEditor.curStep = null;
        if(!_.isUndefined(this.currentEditor.experienceEditor)) {
            this.currentEditor.experienceEditor.isSetup = false
        }
        this.currentEditor.showEditor({
            model: new ELM.Models.Activity(a)
        })
    },
    newRecommendation: function() {
        this.currentEditor = this.components.recommendationEditor;
        this.currentEditor.curStep = 0;
        this.currentEditor.showEditor({
            model: new ELM.Models.Recommendation({
                targets: {
                    "ref:audiences": ["/audiences/all_visitors"],
                    template: {
                        activityUrl: this.activityUrl
                    }
                }
            })
        })
    },
    setActivityDetails: function(a) {
        this.activityUrl = a.url
    },
    getOneToOneEditor: function() {
        if(_.isUndefined(this.components.oneToOneEditor)) {
            this.addOneToOneEditor()
        }
        return this.components.oneToOneEditor
    },
    newOneToOneActivity: function(a) {
        this.currentEditor = this.getOneToOneEditor();
        this.currentEditor.curStep = 0;
        if(_.isUndefined(a)) {
            a = {
                model: new ELM.Models.OneToOneActivity({
                    targets: {
                        "ref:audiences": ["/audiences/all_visitors"],
                        template: {
                            activityUrl: this.activityUrl
                        }
                    },
                    locations: []
                })
            }
        }
        a.isNew = true;
        this.currentEditor.showEditor(a)
    },
    newExperienceTargetingActivity: function(a) {
        this.currentEditor = this.components.experienceTargetingEditor;
        this.currentEditor.curStep = null;
        if(!_.isUndefined(this.components.experienceTargetingEditor.experienceEditor)) {
            this.currentEditor.experienceEditor.isSetup = false
        }
        this.currentEditor.showEditor({
            model: new ELM.Models.Activity(a)
        })
    },
    newMvtActivity: function() {
        this.newOneToOneActivity({
            model: new ELM.Models.MvtActivity({
                targets: {
                    "ref:audiences": ["/audiences/all_visitors"],
                    template: {
                        activityUrl: this.activityUrl
                    }
                }
            })
        })
    },
    removeExperienceEditors: function() {
        var b = ["abEditor", "oneToOneEditor", "experienceTargetingEditor", "recommendationEditor"];
        for(var a in this.components) {
            if(b.indexOf(a) != -1) {
                this.components[a].destructEditorModes()
            }
        }
    },
    handleSave: function(a) {
        this.navigateToActivityDetails(a)
    },
    navigateToActivityDetails: function(b) {
        var a = "#activitydetails/" + b.getActivityType() + "/:" + b.getId();
        this.removeBrowserBackButtonListener();
        ELM.Activities.router.navigate(a, {
            trigger: true
        })
    },
    updateListAndNavigateToPreviousPage: function(a) {
        this.index.activities.updateList();
        this.navigateToPreviousPage()
    },
    isEditorOpenAndActivityChanged: function() {
        return this.editor && this.editor.isVisible() && this.editor.curStep !== null && this.editor.isActivityChanged()
    },
    confirmEditorSave: function() {
        this.editor.checkAndShowIfWarningNeeded()
    },
    toggleRail: function(a) {
        var b = $("#content"),
            d = Granite.I18n.get("Close left panel"),
            c = $(a.currentTarget);
        $(c.data("target")).toggle();
        b.toggleClass("expand");
        if(b.hasClass("expand")) {
            d = Granite.I18n.get("Open left panel")
        }
        c.attr("title", d)
    },
    navigateToPreviousPage: function() {
        this.removeBrowserBackButtonListener();
        ELM.Activities.router.navigateToPreviousPage();
        return true
    },
    handleWindowResize: function() {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(this.triggerWindowResizeEvent, 100)
    },
    triggerWindowResizeEvent: function() {
        F.trigger("window:resize")
    },
    showErrorNotification: function(a) {
        F.trigger("errorNotification", {
            message: a,
            heading: Granite.I18n.get("Error")
        })
    },
    hideTooltips: function() {
        var a = $(".tooltip");
        _.each(a, function(b) {
            if(b.offsetWidth > 0 && b.offsetHeight > 0) {
                b.style.display = "none"
            }
        })
    },
    setEventNamespace: function(a) {
        ELM.evtNamespace = a
    },
    initializeDummyIframe: function() {
        var a = document.getElementById("at-dummy-iframe");
        a.style.display = "none";
        a.src = "about:blank"
    }
});
this.cdq = this.cdq || {};
this.cdq.JSON = (typeof _AT !== "undefined" && _AT.JSON) ? _AT.JSON : JSON;
this.cdq.querySelectorAll = (typeof _AT !== "undefined" && _AT.querySelectorAll) ? _AT.querySelectorAll : document.querySelectorAll;
cdq.Base = function(b) {
    arguments[0] = arguments[0] || {};
    if(typeof b.allowedHost === "string") {
        Object.defineProperty(this, "allowedHost", {
            configurable: false,
            writeable: false,
            value: b.allowedHost
        })
    }
    var a = this;
    this.messageHandler = function() {
        a.receive.apply(a, arguments)
    };
    this.removeMessageHandler = function() {
        window.removeEventListener("message", this.messageHandler, false)
    };
    window.addEventListener("message", this.messageHandler, false);
    this.listeners = {};
    console.log("cdq." + this.toString() + ": Started")
};
cdq.Base.prototype = {
    toString: function() {
        return "Base"
    },
    send: function(b) {
        var a = this.otherWindow || this.frame.contentWindow;
        if(a) {
            a.postMessage(cdq.JSON.stringify(b), this.allowedHost)
        }
    },
    receive: function(a) {
        if(this.allowedHost && this.allowedHost != "*" && a.origin !== this.allowedHost) {
            console.warn("cdq." + this.toString() + ": Received message from unauthorized client at " + a.origin);
            return
        }
        var c = a.data;
        if(typeof c === "string") {
            try {
                c = cdq.JSON.parse(c)
            } catch(b) {
                console.warn("cdq." + this.toString() + ": Invalid JSON in message data: " + c);
                return
            }
        }
        return c
    },
    on: function(a, b) {
        if(typeof b !== "function") {
            return
        }
        if(!this.listeners[a]) {
            this.listeners[a] = []
        }
        this.listeners[a].push(b)
    },
    once: function(b, d) {
        var a = this;
        var c = function() {
            a.off(b, c);
            d.apply(this, arguments)
        };
        this.on(b, c)
    },
    off: function(a, c) {
        if(!this.listeners[a]) {
            return
        }
        for(var b = this.listeners[a].length; b >= 0; b--) {
            if(this.listeners[a][b] === c) {
                this.listeners[a].splice(b, 1);
                break
            }
        }
    },
    trigger: function(a, c) {
        if(!this.listeners[a]) {
            return
        }
        for(var b = 0; b < this.listeners[a].length; b++) {
            this.listeners[a][b](c)
        }
    }
};
this.cdq = this.cdq || {};
cdq.Client = function(b) {
    cdq.Base.apply(this, arguments);
    Object.defineProperty(this, "frame", {
        configurable: false,
        writeable: false,
        value: b.frame
    });
    this.onload = b.onload;
    var a = this;
    this.frame.addEventListener("load", function() {
        a.connect.apply(a, arguments)
    }, false);
    this.domListeners = {};
    this.domListenerCount = 0;
    this.requests = [];
    this.isConnectedToHost = false;
    this.hostLoadTimeoutId = null
};
cdq.Client.prototype = Object.create(cdq.Base.prototype);
cdq.Client.prototype.toString = function() {
    return "Client"
};
cdq.Client.prototype.actions = {
    CONNECT: "connect",
    NAVIGATE: "navigate",
    RELOAD: "reload",
    ADD_CLASS: "addClass",
    REMOVE_CLASS: "removeClass",
    SET_ATTRIBUTE: "setAttribute",
    COPY_ATTRIBUTE: "copyAttribute",
    REMOVE_ATTRIBUTE: "removeAttribute",
    SET_PROPERTY: "setProperty",
    REMOVE: "remove",
    GET_SELECTOR: "getSelector",
    GET_PARENT: "getParent",
    GET_DOCUMENT_SCROLL: "getDocumentScroll",
    TRIGGER_EVENT: "triggerEvent",
    SET_STYLE: "setStyle",
    SET_STYLES: "setStyles",
    ADD_LISTENER: "addListener",
    REMOVE_LISTENER: "removeListener",
    APPLY_ACTIONS: "applyActions",
    GENERATE_THUMBNAIL: "generateThumbnail",
    SHOW_UNLOAD_WARNING: "showUnloadWarning",
    SELECTOR_COUNT: "getSelectorCount",
    SETUP_REARRANGEMENT: "setupRearrangement",
    SETUP_RESIZE: "setupResize",
    SETUP_MOVE: "setupMove",
    MOVE_ELEMENT_IN_MOVE_MODE: "moveElementInMoveMode",
    RESIZE_ELEMENT_IN_RESIZE_MODE: "resizeElementInResizeMode",
    GET_STYLE: "getStyle",
    GET_ATTRIBUTE: "getAttribute",
    HIGHLIGHT_ELEMENT: "highlightElement",
    REMOVE_HIGHLIGHT_FROM_ELEMENT: "removeHighlightFromElement",
    INSERT_AFTER: "insertAfter",
    INSERT_BEFORE: "insertBefore",
    UPDATE_PAGESTATE: "updatePageState",
    CREATE_RECOMMENDATION_BOX: "createRecommendationBox",
    DELETE_RECOMMENDATION_BOX: "deleteRecommendationBox",
    CREATE_TOOLTIP: "createTooltip",
    DELETE_TOOLTIP: "deleteTooltip",
    APPLY_OVERLAY: "applyOverlay",
    TOGGLE_JAVASCRIPT: "toggleJavaScript",
    MARK_CLICKED_ELEMENT_AS_SELECTED: "markClickedElementsAsSelected",
    MODIFY_HREF_FOR_INTERACT_MODE: "modifyHrefForInteractMode",
    TARGET_JS_HANDSHAKE_ACK: "targetjsHandShakeAck"
};
cdq.Client.prototype.connect = function() {
    var a = 15000;
    console.log("cdq.Client: Connecting to host...");
    this.isConnectedToHost = false;
    if(this.frame.src) {
        clearTimeout(this.hostLoadTimeoutId);
        this.hostLoadTimeoutId = setTimeout(this.unableToConnectToHost.bind(this), a)
    }
    this.send({
        action: this.actions.CONNECT,
        config: {
            disableJavaScript: this.disableJavaScript,
            unloadWarningMessage: this.unloadWarningMessage,
            blockedMboxes: this.blockedMboxes,
            mode: this.mode
        }
    });
    if(typeof this.onload === "function") {
        this.onload()
    }
};
cdq.Client.prototype.unableToConnectToHost = function() {
    if(!this.isConnectedToHost) {
        this.trigger("host:loadTimeOut")
    }
};
cdq.Client.prototype.receive = function(a) {
    var c = cdq.Base.prototype.receive.apply(this, arguments);
    if(!c) {
        return
    }
    if(typeof c.action !== "string") {
        console.warn("cdq.Client: Message did not specify an action");
        return
    }
    switch(c.action) {
        case "connect-to-client":
            this.connect();
            break;
        case "error-on-host":
            this.send({
                hostname: window.location.host,
                pathname: window.location.pathname,
                protocol: window.location.protocol
            });
            this.unableToConnectToHost();
            break;
        case "executeEventListener":
            var b = c.data.listenerId;
            delete c.action;
            delete c.data.listenerId;
            this.executeListener(b, c);
            break;
        case "receiveResponse":
            this.receiveResponse(c);
            break;
        case "loaded":
            this.isConnectedToHost = true;
            this.hostURL = c.location;
            this.trigger("host:loaded", c);
            break;
        case "targetjsHandShake":
            this.triggerTargetJSHandShake(c);
            break;
        default:
    }
};
cdq.Client.prototype.executeListener = function(a, b) {
    if(this.domListeners.hasOwnProperty(a) && typeof this.domListeners[a] === "function") {
        this.domListeners[a].call(this, b)
    }
};
cdq.Client.prototype.navigate = function(a) {
    this.send({
        action: this.actions.NAVIGATE,
        location: a
    })
};
cdq.Client.prototype.reload = function() {
    this.send({
        action: this.actions.RELOAD
    })
};
cdq.Client.prototype.sendContentRequest = function(d, a, c, e, b) {
    this.sendRequest({
        action: d + "Content",
        selector: a,
        content: c
    }, e, b)
};
cdq.Client.prototype.setContent = function(a, b, c) {
    this.sendContentRequest("set", a, b, c)
};
cdq.Client.prototype.sendGetContentRequest = function(a, c, b) {
    this.sendContentRequest("get", a, null, c, b)
};
cdq.Client.prototype.appendContent = function(a, b, c) {
    this.sendContentRequest("append", a, b, c)
};
cdq.Client.prototype.prependContent = function(a, b, c) {
    this.sendContentRequest("prepend", a, b, c)
};
cdq.Client.prototype.addClass = function(a, b) {
    this.send({
        action: this.actions.ADD_CLASS,
        selector: a,
        className: b
    })
};
cdq.Client.prototype.removeClass = function(a, b) {
    this.send({
        action: this.actions.REMOVE_CLASS,
        selector: a,
        className: b
    })
};
cdq.Client.prototype.setAttribute = function(a, b, c, d) {
    this.sendRequest({
        action: this.actions.SET_ATTRIBUTE,
        selector: a,
        attribute: b,
        value: c
    }, d)
};
cdq.Client.prototype.removeAttribute = function(a, b) {
    this.send({
        action: this.actions.REMOVE_ATTRIBUTE,
        selector: a,
        attribute: b
    })
};
cdq.Client.prototype.copyAttribute = function(a, c, b) {
    this.send({
        action: this.actions.COPY_ATTRIBUTE,
        selector: a,
        attribute: c,
        newAttribute: b
    })
};
cdq.Client.prototype.setProperty = function(a, c, b) {
    this.send({
        action: this.actions.SET_PROPERTY,
        selector: a,
        property: c,
        value: b
    })
};
cdq.Client.prototype.remove = function(a, b) {
    this.sendRequest({
        action: this.actions.REMOVE,
        selector: a
    }, b)
};
cdq.Client.prototype.getSelector = function(a, c, b) {
    this.sendRequest({
        action: this.actions.GET_SELECTOR,
        selector: a
    }, c, b)
};
cdq.Client.prototype.getParent = function(a, b) {
    this.sendRequest({
        action: this.actions.GET_PARENT,
        selector: a
    }, b)
};
cdq.Client.prototype.getDocumentScroll = function(a) {
    this.sendRequest({
        action: this.actions.GET_DOCUMENT_SCROLL
    }, a)
};
cdq.Client.prototype.storeRequest = function(b, d, a) {
    this.requests.push({
        message: b,
        success: d,
        error: a
    });
    var c = this.requests.length - 1;
    b.requestId = c;
    return c
};
cdq.Client.prototype.sendRequest = function(b, c, a) {
    if(typeof c !== "undefined") {
        this.storeRequest(b, c, a)
    }
    this.send(b)
};
cdq.Client.prototype.receiveResponse = function(b) {
    var a = this.requests[b.requestId],
        c;
    if(a) {
        if(b.error) {
            c = a.error
        } else {
            c = a.success
        }
        if(typeof c == "function") {
            c(b)
        }
    } else {
        console.warn("cdq.Client: Received response we didn't ask for with requestId " + b.requestId)
    }
};
cdq.Client.prototype.triggerEvent = function(a, c, b) {
    this.send({
        action: this.actions.TRIGGER_EVENT,
        eventType: c,
        selector: a,
        options: b
    })
};
cdq.Client.prototype.setStyle = function(a, c, b, d) {
    if(typeof c == "string") {
        this.sendRequest({
            action: this.actions.SET_STYLE,
            selector: a,
            property: c,
            value: b
        }, d)
    } else {
        this.sendRequest({
            action: this.actions.SET_STYLES,
            selector: a,
            styles: c
        }, d)
    }
};
cdq.Client.prototype.addListener = function(a, c, g, f, d, b) {
    var e = "l" + this.domListenerCount;
    this.domListeners[e] = g;
    f = f || {};
    f.listenerId = e;
    this.send({
        action: this.actions.ADD_LISTENER,
        selector: a,
        eventName: c,
        data: f,
        listenerId: e,
        preventDefault: d,
        stopPropagation: b
    });
    this.domListenerCount++;
    return e
};
cdq.Client.prototype.removeListener = function(a) {
    this.send({
        action: this.actions.REMOVE_LISTENER,
        listenerId: a
    })
};
cdq.Client.prototype.applyActions = function(b, c, a) {
    this.sendRequest({
        action: this.actions.APPLY_ACTIONS,
        actions: b,
        poll: a
    }, c)
};
cdq.Client.prototype.perform = function(b, a) {
    this.send(_.extend({
        action: b
    }, a))
};
cdq.Client.prototype.generateThumbnail = function(b) {
    var a = this;
    this.sendRequest({
        action: this.actions.GENERATE_THUMBNAIL,
        experienceNum: b
    }, function(c) {
        a.trigger("thumbnailGeneratedComplete", c)
    })
};
cdq.Client.prototype.showUnloadWarning = function(a, b) {
    this.sendRequest({
        action: this.actions.SHOW_UNLOAD_WARNING,
        showUnloadWarning: a
    }, b)
};
cdq.Client.prototype.getElementsCountForSelector = function(a, b) {
    this.sendRequest({
        action: this.actions.SELECTOR_COUNT,
        selector: a
    }, b)
};
cdq.Client.prototype.setupRearrangement = function(a, b) {
    this.sendRequest({
        action: this.actions.SETUP_REARRANGEMENT,
        element: a.el
    }, b)
};
cdq.Client.prototype.setupResize = function(a, b) {
    this.sendRequest({
        action: this.actions.SETUP_RESIZE,
        element: a.el
    }, b)
};
cdq.Client.prototype.setupMove = function(a, b) {
    this.sendRequest({
        action: this.actions.SETUP_MOVE,
        element: a.el
    }, b)
};
cdq.Client.prototype.moveElementInMoveMode = function(a, b) {
    this.sendRequest({
        action: this.actions.MOVE_ELEMENT_IN_MOVE_MODE,
        actionjson: a
    }, b)
};
cdq.Client.prototype.resizeElementInResizeMode = function(a, b) {
    this.sendRequest({
        action: this.actions.RESIZE_ELEMENT_IN_RESIZE_MODE,
        actionjson: a
    }, b)
};
cdq.Client.prototype.sendGetStyleRequest = function(a, c, b) {
    this.sendRequest({
        action: this.actions.GET_STYLE,
        selector: a
    }, c, b)
};
cdq.Client.prototype.sendGetAttributeRequest = function(a, c, d, b) {
    this.sendRequest({
        action: this.actions.GET_ATTRIBUTE,
        selector: a,
        attribute: c
    }, d, b)
};
cdq.Client.prototype.sendHighlightElementRequest = function(a) {
    this.send({
        action: this.actions.HIGHLIGHT_ELEMENT,
        selector: a
    })
};
cdq.Client.prototype.sendRemoveHighlightFromElementRequest = function(a) {
    this.send({
        action: this.actions.REMOVE_HIGHLIGHT_FROM_ELEMENT,
        selector: a
    })
};
cdq.Client.prototype.sendInsertAfterRequest = function(a, b, c) {
    this.sendRequest({
        action: this.actions.INSERT_AFTER,
        selector: a,
        content: b
    }, c)
};
cdq.Client.prototype.sendInsertBeforeRequest = function(a, b, c) {
    this.sendRequest({
        action: this.actions.INSERT_BEFORE,
        selector: a,
        content: b
    }, c)
};
cdq.Client.prototype.updatePageState = function(a, b, c) {
    this.sendRequest({
        action: this.actions.UPDATE_PAGESTATE,
        pageName: a,
        pageState: b
    }, c)
};
cdq.Client.prototype.createRecommendationBox = function(a, b, c) {
    this.sendRequest({
        action: this.actions.CREATE_RECOMMENDATION_BOX,
        selector: a,
        label: b
    }, c)
};
cdq.Client.prototype.deleteRecommendationBox = function(a, b) {
    this.sendRequest({
        action: this.actions.DELETE_RECOMMENDATION_BOX,
        element: a
    }, b)
};
cdq.Client.prototype.createTooltip = function(a, c, b, d) {
    this.sendRequest({
        action: this.actions.CREATE_TOOLTIP,
        selector: a,
        text: c,
        type: b
    }, d)
};
cdq.Client.prototype.deleteTooltip = function(a, b) {
    this.sendRequest({
        action: this.actions.DELETE_TOOLTIP,
        selector: a
    }, b)
};
cdq.Client.prototype.applyOverlay = function(a) {
    this.send({
        action: this.actions.APPLY_OVERLAY,
        options: a
    })
};
cdq.Client.prototype.toggleJavaScript = function(a) {
    this.sendRequest({
        action: this.actions.TOGGLE_JAVASCRIPT,
        options: {
            disableJavaScript: (typeof a.disableJavaScript !== "undefined") ? a.disableJavaScript : this.disableJavaScript
        }
    }, a.callback)
};
cdq.Client.prototype.markClickedElementsAsSelected = function(a) {
    this.send({
        action: this.actions.MARK_CLICKED_ELEMENT_AS_SELECTED,
        options: {
            selectors: a.selectors,
            poll: a.poll
        }
    })
};
cdq.Client.prototype.modifyHrefForInteractMode = function(a) {
    this.send({
        action: this.actions.MODIFY_HREF_FOR_INTERACT_MODE,
        options: {
            baseURL: a.baseURL,
            adminParameter: a.adminParameter,
            isProxyEnabled: a.isProxyEnabled
        }
    })
};
cdq.Client.prototype.triggerTargetJSHandShake = function(a) {
    this.trigger("host:handshake", {
        isAdmin: a.isAdmin,
        pageURL: a.pageURL
    })
};
cdq.Client.prototype.sendTargetJSHandShakeACK = function(a) {
    this.send({
        action: this.actions.TARGET_JS_HANDSHAKE_ACK,
        config: {
            updatePageURL: a.updatePageURL,
            pageURL: a.pageURL
        }
    })
};